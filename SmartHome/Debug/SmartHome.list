
SmartHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f7c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800819c  0800819c  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081a4  080081a4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a8  080081a8  000181a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080081ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000040  080081ec  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080081ec  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001275b  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244e  00000000  00000000  000327cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00035da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170de  00000000  00000000  00036ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eee  00000000  00000000  0004df7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091055  00000000  00000000  00061e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2ec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b68  00000000  00000000  000f2f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080080fc 	.word	0x080080fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	080080fc 	.word	0x080080fc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <KeyPad_Init+0xb0>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <KeyPad_Init+0xb0>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	75fb      	strb	r3, [r7, #23]
 8000cce:	e022      	b.n	8000d16 <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <KeyPad_Init+0xb4>)
 8000ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce4:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <KeyPad_Init+0xb8>)
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	463a      	mov	r2, r7
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 f948 	bl	8003f88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <KeyPad_Init+0xb8>)
 8000cfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <KeyPad_Init+0xb4>)
 8000d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f003 fad8 	bl	80042c0 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	3301      	adds	r3, #1
 8000d14:	75fb      	strb	r3, [r7, #23]
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <KeyPad_Init+0xb0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	7dfa      	ldrb	r2, [r7, #23]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d3d7      	bcc.n	8000cd0 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	75bb      	strb	r3, [r7, #22]
 8000d24:	e016      	b.n	8000d54 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_PULLUP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 8000d32:	7dbb      	ldrb	r3, [r7, #22]
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <KeyPad_Init+0xbc>)
 8000d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3a:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);		
 8000d3c:	7dbb      	ldrb	r3, [r7, #22]
 8000d3e:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <KeyPad_Init+0xc0>)
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	463a      	mov	r2, r7
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f91d 	bl	8003f88 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000d4e:	7dbb      	ldrb	r3, [r7, #22]
 8000d50:	3301      	adds	r3, #1
 8000d52:	75bb      	strb	r3, [r7, #22]
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <KeyPad_Init+0xb0>)
 8000d56:	785b      	ldrb	r3, [r3, #1]
 8000d58:	7dba      	ldrb	r2, [r7, #22]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3e3      	bcc.n	8000d26 <KeyPad_Init+0x6e>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000005c 	.word	0x2000005c
 8000d6c:	08008174 	.word	0x08008174
 8000d70:	20000000 	.word	0x20000000
 8000d74:	0800817c 	.word	0x0800817c
 8000d78:	20000010 	.word	0x20000010

08000d7c <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e07e      	b.n	8000e8a <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	71bb      	strb	r3, [r7, #6]
 8000d90:	e00e      	b.n	8000db0 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <KeyPad_Scan+0x124>)
 8000d96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	4a41      	ldr	r2, [pc, #260]	; (8000ea4 <KeyPad_Scan+0x128>)
 8000d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da2:	2201      	movs	r2, #1
 8000da4:	4619      	mov	r1, r3
 8000da6:	f003 fa8b 	bl	80042c0 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	3301      	adds	r3, #1
 8000dae:	71bb      	strb	r3, [r7, #6]
 8000db0:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <KeyPad_Scan+0x12c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	79ba      	ldrb	r2, [r7, #6]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3eb      	bcc.n	8000d92 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4a38      	ldr	r2, [pc, #224]	; (8000ea0 <KeyPad_Scan+0x124>)
 8000dbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4a37      	ldr	r2, [pc, #220]	; (8000ea4 <KeyPad_Scan+0x128>)
 8000dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f003 fa77 	bl	80042c0 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000dd2:	2005      	movs	r0, #5
 8000dd4:	f002 ff10 	bl	8003bf8 <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	717b      	strb	r3, [r7, #5]
 8000ddc:	e04d      	b.n	8000e7a <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	4a32      	ldr	r2, [pc, #200]	; (8000eac <KeyPad_Scan+0x130>)
 8000de2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000de6:	797b      	ldrb	r3, [r7, #5]
 8000de8:	4931      	ldr	r1, [pc, #196]	; (8000eb0 <KeyPad_Scan+0x134>)
 8000dea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dee:	4619      	mov	r1, r3
 8000df0:	4610      	mov	r0, r2
 8000df2:	f003 fa4d 	bl	8004290 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d13b      	bne.n	8000e74 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000dfc:	2014      	movs	r0, #20
 8000dfe:	f002 fefb 	bl	8003bf8 <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	4a29      	ldr	r2, [pc, #164]	; (8000eac <KeyPad_Scan+0x130>)
 8000e06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0a:	797b      	ldrb	r3, [r7, #5]
 8000e0c:	4928      	ldr	r1, [pc, #160]	; (8000eb0 <KeyPad_Scan+0x134>)
 8000e0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e12:	4619      	mov	r1, r3
 8000e14:	4610      	mov	r0, r2
 8000e16:	f003 fa3b 	bl	8004290 <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d129      	bne.n	8000e74 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;					
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2201      	movs	r2, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 8000e34:	797b      	ldrb	r3, [r7, #5]
 8000e36:	3308      	adds	r3, #8
 8000e38:	2201      	movs	r2, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000e4a:	e002      	b.n	8000e52 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f002 fed3 	bl	8003bf8 <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	4a15      	ldr	r2, [pc, #84]	; (8000eac <KeyPad_Scan+0x130>)
 8000e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	4914      	ldr	r1, [pc, #80]	; (8000eb0 <KeyPad_Scan+0x134>)
 8000e5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e62:	4619      	mov	r1, r3
 8000e64:	4610      	mov	r0, r2
 8000e66:	f003 fa13 	bl	8004290 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0ed      	beq.n	8000e4c <KeyPad_Scan+0xd0>
          return key;
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	e011      	b.n	8000e98 <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	3301      	adds	r3, #1
 8000e78:	717b      	strb	r3, [r7, #5]
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <KeyPad_Scan+0x12c>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	797a      	ldrb	r2, [r7, #5]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3ac      	bcc.n	8000dde <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	3301      	adds	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <KeyPad_Scan+0x12c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f4ff af7b 	bcc.w	8000d8c <KeyPad_Scan+0x10>
        }
      }			
    }		
  }
  return key;
 8000e96:	887b      	ldrh	r3, [r7, #2]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	08008174 	.word	0x08008174
 8000ea8:	2000005c 	.word	0x2000005c
 8000eac:	20000010 	.word	0x20000010
 8000eb0:	0800817c 	.word	0x0800817c

08000eb4 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{	
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000ebc:	e00e      	b.n	8000edc <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000ebe:	f7ff ff5d 	bl	8000d7c <KeyPad_Scan>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000ec6:	897b      	ldrh	r3, [r7, #10]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d004      	beq.n	8000ed6 <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000ecc:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <KeyPad_WaitForKey+0x74>)
 8000ece:	897b      	ldrh	r3, [r7, #10]
 8000ed0:	8053      	strh	r3, [r2, #2]
			return keyRead;	
 8000ed2:	897b      	ldrh	r3, [r7, #10]
 8000ed4:	e024      	b.n	8000f20 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);	
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f002 fe8e 	bl	8003bf8 <HAL_Delay>
  while(Timeout_ms==0)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0ed      	beq.n	8000ebe <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000ee2:	f002 fe7d 	bl	8003be0 <HAL_GetTick>
 8000ee6:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000ee8:	e00e      	b.n	8000f08 <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 8000eea:	f7ff ff47 	bl	8000d7c <KeyPad_Scan>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000ef2:	897b      	ldrh	r3, [r7, #10]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <KeyPad_WaitForKey+0x74>)
 8000efa:	897b      	ldrh	r3, [r7, #10]
 8000efc:	8053      	strh	r3, [r2, #2]
			return keyRead;	
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	e00e      	b.n	8000f20 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);	
 8000f02:	2014      	movs	r0, #20
 8000f04:	f002 fe78 	bl	8003bf8 <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000f08:	f002 fe6a 	bl	8003be0 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8e8      	bhi.n	8000eea <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <KeyPad_WaitForKey+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	805a      	strh	r2, [r3, #2]
	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000005c 	.word	0x2000005c

08000f2c <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffbd 	bl	8000eb4 <KeyPad_WaitForKey>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f640 0208 	movw	r2, #2056	; 0x808
 8000f40:	4293      	cmp	r3, r2
 8000f42:	f300 809f 	bgt.w	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f4a:	dc1a      	bgt.n	8000f82 <KeyPad_WaitForKeyGetChar+0x56>
 8000f4c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000f50:	f300 8098 	bgt.w	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f58:	dc2a      	bgt.n	8000fb0 <KeyPad_WaitForKeyGetChar+0x84>
 8000f5a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000f5e:	f300 8091 	bgt.w	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f66:	dc3b      	bgt.n	8000fe0 <KeyPad_WaitForKeyGetChar+0xb4>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d069      	beq.n	8001040 <KeyPad_WaitForKeyGetChar+0x114>
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f2c0 8089 	blt.w	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f72:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8000f76:	f300 8085 	bgt.w	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f7e:	dc47      	bgt.n	8001010 <KeyPad_WaitForKeyGetChar+0xe4>
 8000f80:	e080      	b.n	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f82:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8000f86:	2b07      	cmp	r3, #7
 8000f88:	d87c      	bhi.n	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <KeyPad_WaitForKeyGetChar+0x64>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08001051 	.word	0x08001051
 8000f94:	08001061 	.word	0x08001061
 8000f98:	08001085 	.word	0x08001085
 8000f9c:	08001071 	.word	0x08001071
 8000fa0:	08001085 	.word	0x08001085
 8000fa4:	08001085 	.word	0x08001085
 8000fa8:	08001085 	.word	0x08001085
 8000fac:	08001081 	.word	0x08001081
 8000fb0:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8000fb4:	2b07      	cmp	r3, #7
 8000fb6:	d865      	bhi.n	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000fb8:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <KeyPad_WaitForKeyGetChar+0x94>)
 8000fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbe:	bf00      	nop
 8000fc0:	0800104d 	.word	0x0800104d
 8000fc4:	0800105d 	.word	0x0800105d
 8000fc8:	08001085 	.word	0x08001085
 8000fcc:	0800106d 	.word	0x0800106d
 8000fd0:	08001085 	.word	0x08001085
 8000fd4:	08001085 	.word	0x08001085
 8000fd8:	08001085 	.word	0x08001085
 8000fdc:	0800107d 	.word	0x0800107d
 8000fe0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	d84d      	bhi.n	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8000fe8:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <KeyPad_WaitForKeyGetChar+0xc4>)
 8000fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fee:	bf00      	nop
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	08001059 	.word	0x08001059
 8000ff8:	08001085 	.word	0x08001085
 8000ffc:	08001069 	.word	0x08001069
 8001000:	08001085 	.word	0x08001085
 8001004:	08001085 	.word	0x08001085
 8001008:	08001085 	.word	0x08001085
 800100c:	08001079 	.word	0x08001079
 8001010:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001014:	2b07      	cmp	r3, #7
 8001016:	d835      	bhi.n	8001084 <KeyPad_WaitForKeyGetChar+0x158>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <KeyPad_WaitForKeyGetChar+0xf4>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001045 	.word	0x08001045
 8001024:	08001055 	.word	0x08001055
 8001028:	08001085 	.word	0x08001085
 800102c:	08001065 	.word	0x08001065
 8001030:	08001085 	.word	0x08001085
 8001034:	08001085 	.word	0x08001085
 8001038:	08001085 	.word	0x08001085
 800103c:	08001075 	.word	0x08001075
  {
    case 0x0000:
      return 0;
 8001040:	2300      	movs	r3, #0
 8001042:	e020      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 8001044:	2331      	movs	r3, #49	; 0x31
 8001046:	e01e      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 8001048:	2332      	movs	r3, #50	; 0x32
 800104a:	e01c      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 800104c:	2333      	movs	r3, #51	; 0x33
 800104e:	e01a      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 8001050:	2341      	movs	r3, #65	; 0x41
 8001052:	e018      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 8001054:	2334      	movs	r3, #52	; 0x34
 8001056:	e016      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 8001058:	2335      	movs	r3, #53	; 0x35
 800105a:	e014      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 800105c:	2336      	movs	r3, #54	; 0x36
 800105e:	e012      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 8001060:	2342      	movs	r3, #66	; 0x42
 8001062:	e010      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 8001064:	2337      	movs	r3, #55	; 0x37
 8001066:	e00e      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';		
 8001068:	2338      	movs	r3, #56	; 0x38
 800106a:	e00c      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 800106c:	2339      	movs	r3, #57	; 0x39
 800106e:	e00a      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 8001070:	2343      	movs	r3, #67	; 0x43
 8001072:	e008      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';				
 8001074:	232a      	movs	r3, #42	; 0x2a
 8001076:	e006      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';				
 8001078:	2330      	movs	r3, #48	; 0x30
 800107a:	e004      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 800107c:	2323      	movs	r3, #35	; 0x23
 800107e:	e002      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8001080:	2344      	movs	r3, #68	; 0x44
 8001082:	e000      	b.n	8001086 <KeyPad_WaitForKeyGetChar+0x15a>
		
		default:
			return 0;		
 8001084:	2300      	movs	r3, #0
	}	
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop

08001090 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af02      	add	r7, sp, #8
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f023 030f 	bic.w	r3, r3, #15
 80010a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f043 030c 	orr.w	r3, r3, #12
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f043 030c 	orr.w	r3, r3, #12
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2304      	movs	r3, #4
 80010da:	214e      	movs	r1, #78	; 0x4e
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <lcd_send_cmd+0x5c>)
 80010de:	f003 fa65 	bl	80045ac <HAL_I2C_Master_Transmit>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000060 	.word	0x20000060

080010f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f043 030d 	orr.w	r3, r3, #13
 800110e:	b2db      	uxtb	r3, r3
 8001110:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	f043 0309 	orr.w	r3, r3, #9
 8001118:	b2db      	uxtb	r3, r3
 800111a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	f043 030d 	orr.w	r3, r3, #13
 8001122:	b2db      	uxtb	r3, r3
 8001124:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	f043 0309 	orr.w	r3, r3, #9
 800112c:	b2db      	uxtb	r3, r3
 800112e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	2364      	movs	r3, #100	; 0x64
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2304      	movs	r3, #4
 800113a:	214e      	movs	r1, #78	; 0x4e
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <lcd_send_data+0x5c>)
 800113e:	f003 fa35 	bl	80045ac <HAL_I2C_Master_Transmit>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000060 	.word	0x20000060

08001150 <lcd_clear>:

void lcd_clear (void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001156:	2080      	movs	r0, #128	; 0x80
 8001158:	f7ff ff9a 	bl	8001090 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	e005      	b.n	800116e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001162:	2020      	movs	r0, #32
 8001164:	f7ff ffc4 	bl	80010f0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3301      	adds	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b45      	cmp	r3, #69	; 0x45
 8001172:	ddf6      	ble.n	8001162 <lcd_clear+0x12>
	}
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
    switch (row)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <lcd_put_cur+0x18>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <lcd_put_cur+0x22>
 8001194:	e009      	b.n	80011aa <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	603b      	str	r3, [r7, #0]
            break;
 800119e:	e004      	b.n	80011aa <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011a6:	603b      	str	r3, [r7, #0]
            break;
 80011a8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff6e 	bl	8001090 <lcd_send_cmd>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <lcd_init>:


void lcd_init (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	f002 fd19 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011c6:	2030      	movs	r0, #48	; 0x30
 80011c8:	f7ff ff62 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011cc:	2005      	movs	r0, #5
 80011ce:	f002 fd13 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011d2:	2030      	movs	r0, #48	; 0x30
 80011d4:	f7ff ff5c 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80011d8:	2001      	movs	r0, #1
 80011da:	f002 fd0d 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011de:	2030      	movs	r0, #48	; 0x30
 80011e0:	f7ff ff56 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(10);
 80011e4:	200a      	movs	r0, #10
 80011e6:	f002 fd07 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80011ea:	2020      	movs	r0, #32
 80011ec:	f7ff ff50 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f002 fd01 	bl	8003bf8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011f6:	2028      	movs	r0, #40	; 0x28
 80011f8:	f7ff ff4a 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f002 fcfb 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001202:	2008      	movs	r0, #8
 8001204:	f7ff ff44 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f002 fcf5 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff ff3e 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f002 fcef 	bl	8003bf8 <HAL_Delay>
	HAL_Delay(1);
 800121a:	2001      	movs	r0, #1
 800121c:	f002 fcec 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001220:	2006      	movs	r0, #6
 8001222:	f7ff ff35 	bl	8001090 <lcd_send_cmd>
	HAL_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f002 fce6 	bl	8003bf8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800122c:	200c      	movs	r0, #12
 800122e:	f7ff ff2f 	bl	8001090 <lcd_send_cmd>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}

08001236 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800123e:	e006      	b.n	800124e <lcd_send_string+0x18>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff51 	bl	80010f0 <lcd_send_data>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f4      	bne.n	8001240 <lcd_send_string+0xa>
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <set_display_configuration>:
int process_data(char c);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_display_configuration() {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	lcd_clear();
 8001264:	f7ff ff74 	bl	8001150 <lcd_clear>
	lcd_put_cur(0, 0);
 8001268:	2100      	movs	r1, #0
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff ff87 	bl	800117e <lcd_put_cur>
	lcd_send_string("C:1 L:2 P:3 A:4");
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <set_display_configuration+0x34>)
 8001272:	f7ff ffe0 	bl	8001236 <lcd_send_string>
	lcd_put_cur(1, 0);
 8001276:	2100      	movs	r1, #0
 8001278:	2001      	movs	r0, #1
 800127a:	f7ff ff80 	bl	800117e <lcd_put_cur>
	lcd_send_string("ESC:7");
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <set_display_configuration+0x38>)
 8001280:	f7ff ffd9 	bl	8001236 <lcd_send_string>
	HAL_GPIO_WritePin(LED_CONFIGURATION_GPIO_Port, LED_CONFIGURATION_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2104      	movs	r1, #4
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <set_display_configuration+0x3c>)
 800128a:	f003 f819 	bl	80042c0 <HAL_GPIO_WritePin>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	08008114 	.word	0x08008114
 8001298:	08008124 	.word	0x08008124
 800129c:	40020c00 	.word	0x40020c00

080012a0 <set_display_state>:

void set_display_state() {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	lcd_clear();
 80012a4:	f7ff ff54 	bl	8001150 <lcd_clear>
	lcd_put_cur(0, 0);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff67 	bl	800117e <lcd_put_cur>
	lcd_send_string("C:");
 80012b0:	4836      	ldr	r0, [pc, #216]	; (800138c <set_display_state+0xec>)
 80012b2:	f7ff ffc0 	bl	8001236 <lcd_send_string>
	switch(sliding_gate){
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <set_display_state+0xf0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d81a      	bhi.n	80012f4 <set_display_state+0x54>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <set_display_state+0x24>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	080012dd 	.word	0x080012dd
 80012cc:	080012e5 	.word	0x080012e5
 80012d0:	080012ed 	.word	0x080012ed
	case SPENTO:
		lcd_send_data('0');
 80012d4:	2030      	movs	r0, #48	; 0x30
 80012d6:	f7ff ff0b 	bl	80010f0 <lcd_send_data>
		break;
 80012da:	e00b      	b.n	80012f4 <set_display_state+0x54>
	case ACCESO:
		lcd_send_data('1');
 80012dc:	2031      	movs	r0, #49	; 0x31
 80012de:	f7ff ff07 	bl	80010f0 <lcd_send_data>
		break;
 80012e2:	e007      	b.n	80012f4 <set_display_state+0x54>
	case APERTO:
		lcd_send_data('2');
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f7ff ff03 	bl	80010f0 <lcd_send_data>
		break;
 80012ea:	e003      	b.n	80012f4 <set_display_state+0x54>
	case IN_CHIUSURA:
		lcd_send_data('3');
 80012ec:	2033      	movs	r0, #51	; 0x33
 80012ee:	f7ff feff 	bl	80010f0 <lcd_send_data>
		break;
 80012f2:	bf00      	nop
	}
	lcd_send_string(" P:");
 80012f4:	4827      	ldr	r0, [pc, #156]	; (8001394 <set_display_state+0xf4>)
 80012f6:	f7ff ff9e 	bl	8001236 <lcd_send_string>
	switch(door){
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <set_display_state+0xf8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d812      	bhi.n	8001328 <set_display_state+0x88>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <set_display_state+0x68>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001319 	.word	0x08001319
 800130c:	08001329 	.word	0x08001329
 8001310:	08001321 	.word	0x08001321
 8001314:	08001329 	.word	0x08001329
	case SERVO_CHIUSO:
		lcd_send_data('0');
 8001318:	2030      	movs	r0, #48	; 0x30
 800131a:	f7ff fee9 	bl	80010f0 <lcd_send_data>
		break;
 800131e:	e003      	b.n	8001328 <set_display_state+0x88>
	case SERVO_APERTO:
		lcd_send_data('1');
 8001320:	2031      	movs	r0, #49	; 0x31
 8001322:	f7ff fee5 	bl	80010f0 <lcd_send_data>
		break;
 8001326:	bf00      	nop
	case SERVO_APERTURA:
	case SERVO_CHIUSURA:
		break;
	}
	lcd_send_string(" A:");
 8001328:	481c      	ldr	r0, [pc, #112]	; (800139c <set_display_state+0xfc>)
 800132a:	f7ff ff84 	bl	8001236 <lcd_send_string>
	switch(alarm){
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <set_display_state+0x100>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d00e      	beq.n	8001354 <set_display_state+0xb4>
 8001336:	2b02      	cmp	r3, #2
 8001338:	dc10      	bgt.n	800135c <set_display_state+0xbc>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <set_display_state+0xa4>
 800133e:	2b01      	cmp	r3, #1
 8001340:	d004      	beq.n	800134c <set_display_state+0xac>
 8001342:	e00b      	b.n	800135c <set_display_state+0xbc>
	case ALARM_SPENTO:
		lcd_send_data('0');
 8001344:	2030      	movs	r0, #48	; 0x30
 8001346:	f7ff fed3 	bl	80010f0 <lcd_send_data>
		break;
 800134a:	e007      	b.n	800135c <set_display_state+0xbc>
	case ALARM_DISATTIVO:
		lcd_send_data('1');
 800134c:	2031      	movs	r0, #49	; 0x31
 800134e:	f7ff fecf 	bl	80010f0 <lcd_send_data>
		break;
 8001352:	e003      	b.n	800135c <set_display_state+0xbc>
	case ALARM_ATTIVO:
		lcd_send_data('2');
 8001354:	2032      	movs	r0, #50	; 0x32
 8001356:	f7ff fecb 	bl	80010f0 <lcd_send_data>
		break;
 800135a:	bf00      	nop
	}
	lcd_put_cur(1, 0);
 800135c:	2100      	movs	r1, #0
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff ff0d 	bl	800117e <lcd_put_cur>
	lcd_send_string("L:");
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <set_display_state+0x104>)
 8001366:	f7ff ff66 	bl	8001236 <lcd_send_string>
	switch(internal_light){
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <set_display_state+0x108>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <set_display_state+0xd8>
 8001372:	2b01      	cmp	r3, #1
 8001374:	d004      	beq.n	8001380 <set_display_state+0xe0>
		break;
	case ACCESO:
		lcd_send_data('1');
		break;
	}
}
 8001376:	e007      	b.n	8001388 <set_display_state+0xe8>
		lcd_send_data('0');
 8001378:	2030      	movs	r0, #48	; 0x30
 800137a:	f7ff feb9 	bl	80010f0 <lcd_send_data>
		break;
 800137e:	e003      	b.n	8001388 <set_display_state+0xe8>
		lcd_send_data('1');
 8001380:	2031      	movs	r0, #49	; 0x31
 8001382:	f7ff feb5 	bl	80010f0 <lcd_send_data>
		break;
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800812c 	.word	0x0800812c
 8001390:	20000340 	.word	0x20000340
 8001394:	08008130 	.word	0x08008130
 8001398:	2000033f 	.word	0x2000033f
 800139c:	08008134 	.word	0x08008134
 80013a0:	20000032 	.word	0x20000032
 80013a4:	08008138 	.word	0x08008138
 80013a8:	2000033e 	.word	0x2000033e

080013ac <read_keypad>:

void read_keypad() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	switch(numpad) {
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <read_keypad+0x54>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d821      	bhi.n	80013fc <read_keypad+0x50>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <read_keypad+0x14>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013fb 	.word	0x080013fb
 80013c4:	080013e3 	.word	0x080013e3
 80013c8:	080013dd 	.word	0x080013dd
 80013cc:	080013e9 	.word	0x080013e9
 80013d0:	080013ef 	.word	0x080013ef
 80013d4:	080013f5 	.word	0x080013f5
 80013d8:	080013fb 	.word	0x080013fb
	case ALLARME:
		keypad_alarm();
 80013dc:	f000 f812 	bl	8001404 <keypad_alarm>
		break;
 80013e0:	e00c      	b.n	80013fc <read_keypad+0x50>
	case CONFIGURAZIONE:
		keypad_configuration();
 80013e2:	f000 f887 	bl	80014f4 <keypad_configuration>
		break;
 80013e6:	e009      	b.n	80013fc <read_keypad+0x50>
	case CONFIGURAZIONE_CANCELLO:
		keypad_sliding_gate();
 80013e8:	f000 f8ee 	bl	80015c8 <keypad_sliding_gate>
		break;
 80013ec:	e006      	b.n	80013fc <read_keypad+0x50>
	case CONFIGURAZIONE_LUCE:
		keypad_internal_light();
 80013ee:	f000 f933 	bl	8001658 <keypad_internal_light>
		break;
 80013f2:	e003      	b.n	80013fc <read_keypad+0x50>
	case CONFIGURAZIONE_PORTA:
		keypad_door();
 80013f4:	f000 fa06 	bl	8001804 <keypad_door>
		break;
 80013f8:	e000      	b.n	80013fc <read_keypad+0x50>
	case INATTIVO:
	case END_CONFIGURAZIONE:
		break;
 80013fa:	bf00      	nop
	}
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000033d 	.word	0x2000033d

08001404 <keypad_alarm>:

void keypad_alarm() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
	lcd_clear();
 800140a:	f7ff fea1 	bl	8001150 <lcd_clear>
	lcd_put_cur(0, 0);
 800140e:	2100      	movs	r1, #0
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff feb4 	bl	800117e <lcd_put_cur>
	lcd_send_string("PIN: ");
 8001416:	4831      	ldr	r0, [pc, #196]	; (80014dc <keypad_alarm+0xd8>)
 8001418:	f7ff ff0d 	bl	8001236 <lcd_send_string>
	for (int i = 0; i < index_password_inserita; i++) {
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e005      	b.n	800142e <keypad_alarm+0x2a>
		lcd_send_data('*');
 8001422:	202a      	movs	r0, #42	; 0x2a
 8001424:	f7ff fe64 	bl	80010f0 <lcd_send_data>
	for (int i = 0; i < index_password_inserita; i++) {
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	3301      	adds	r3, #1
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <keypad_alarm+0xdc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf4      	blt.n	8001422 <keypad_alarm+0x1e>
	}
	char c = KeyPad_WaitForKeyGetChar(0);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff fd77 	bl	8000f2c <KeyPad_WaitForKeyGetChar>
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	if (c != 0) {
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d045      	beq.n	80014d4 <keypad_alarm+0xd0>
		if (numpad == ALLARME) {
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <keypad_alarm+0xe0>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d141      	bne.n	80014d4 <keypad_alarm+0xd0>
			lcd_send_data(c);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe4c 	bl	80010f0 <lcd_send_data>
			if (index_password_inserita < password_length) {
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <keypad_alarm+0xdc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	dc09      	bgt.n	8001474 <keypad_alarm+0x70>
				password_inserita[index_password_inserita] = c;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <keypad_alarm+0xdc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4920      	ldr	r1, [pc, #128]	; (80014e8 <keypad_alarm+0xe4>)
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	54ca      	strb	r2, [r1, r3]
				index_password_inserita++;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <keypad_alarm+0xdc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <keypad_alarm+0xdc>)
 8001472:	6013      	str	r3, [r2, #0]
			}
			if (index_password_inserita == password_length) {
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <keypad_alarm+0xdc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b04      	cmp	r3, #4
 800147a:	d12b      	bne.n	80014d4 <keypad_alarm+0xd0>
				if (strncmp(password, password_inserita, password_length) == 0) {
 800147c:	2204      	movs	r2, #4
 800147e:	491a      	ldr	r1, [pc, #104]	; (80014e8 <keypad_alarm+0xe4>)
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <keypad_alarm+0xe8>)
 8001482:	f006 fe27 	bl	80080d4 <strncmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d112      	bne.n	80014b2 <keypad_alarm+0xae>
					if (alarm == ALARM_ATTIVO || alarm == ALARM_DISATTIVO) {
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <keypad_alarm+0xec>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d003      	beq.n	800149c <keypad_alarm+0x98>
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <keypad_alarm+0xec>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d102      	bne.n	80014a2 <keypad_alarm+0x9e>
						alarm_off();
 800149c:	f000 fd52 	bl	8001f44 <alarm_off>
 80014a0:	e005      	b.n	80014ae <keypad_alarm+0xaa>
					} else {
						if (alarm == ALARM_SPENTO) {
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <keypad_alarm+0xec>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <keypad_alarm+0xaa>
							alarm_on();
 80014aa:	f000 fd37 	bl	8001f1c <alarm_on>
						}
					}
					switch_to_inattivo();
 80014ae:	f000 f9e5 	bl	800187c <switch_to_inattivo>
				}
				for (int i = 0; i < password_length; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	e007      	b.n	80014c8 <keypad_alarm+0xc4>
					password_inserita[i] = '\0';
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <keypad_alarm+0xe4>)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < password_length; i++) {
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	ddf4      	ble.n	80014b8 <keypad_alarm+0xb4>
				}
				index_password_inserita = 0;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <keypad_alarm+0xdc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	0800813c 	.word	0x0800813c
 80014e0:	200002f8 	.word	0x200002f8
 80014e4:	2000033d 	.word	0x2000033d
 80014e8:	200002f4 	.word	0x200002f4
 80014ec:	2000002c 	.word	0x2000002c
 80014f0:	20000032 	.word	0x20000032

080014f4 <keypad_configuration>:

void keypad_configuration() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	char c = KeyPad_WaitForKeyGetChar(0);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fd16 	bl	8000f2c <KeyPad_WaitForKeyGetChar>
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
	switch (c) {
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	3b31      	subs	r3, #49	; 0x31
 8001508:	2b04      	cmp	r3, #4
 800150a:	d850      	bhi.n	80015ae <keypad_configuration+0xba>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <keypad_configuration+0x20>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001529 	.word	0x08001529
 8001518:	0800154b 	.word	0x0800154b
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800158f 	.word	0x0800158f
 8001524:	080015a9 	.word	0x080015a9
	case '1':
		numpad = CONFIGURAZIONE_CANCELLO;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <keypad_configuration+0xc4>)
 800152a:	2203      	movs	r2, #3
 800152c:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800152e:	f7ff fe0f 	bl	8001150 <lcd_clear>
		lcd_put_cur(0, 0);
 8001532:	2100      	movs	r1, #0
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fe22 	bl	800117e <lcd_put_cur>
		lcd_send_string("1 - 6 s: ");
 800153a:	4820      	ldr	r0, [pc, #128]	; (80015bc <keypad_configuration+0xc8>)
 800153c:	f7ff fe7b 	bl	8001236 <lcd_send_string>
		lcd_put_cur(1, 0);
 8001540:	2100      	movs	r1, #0
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff fe1b 	bl	800117e <lcd_put_cur>
		break;
 8001548:	e031      	b.n	80015ae <keypad_configuration+0xba>
	case '2':
		numpad = CONFIGURAZIONE_LUCE;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <keypad_configuration+0xc4>)
 800154c:	2204      	movs	r2, #4
 800154e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001550:	f7ff fdfe 	bl	8001150 <lcd_clear>
		lcd_put_cur(0, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fe11 	bl	800117e <lcd_put_cur>
		lcd_send_string("10 - 60 s: ");
 800155c:	4818      	ldr	r0, [pc, #96]	; (80015c0 <keypad_configuration+0xcc>)
 800155e:	f7ff fe6a 	bl	8001236 <lcd_send_string>
		lcd_put_cur(1, 0);
 8001562:	2100      	movs	r1, #0
 8001564:	2001      	movs	r0, #1
 8001566:	f7ff fe0a 	bl	800117e <lcd_put_cur>
		break;
 800156a:	e020      	b.n	80015ae <keypad_configuration+0xba>
	case '3':
		numpad = CONFIGURAZIONE_PORTA;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <keypad_configuration+0xc4>)
 800156e:	2205      	movs	r2, #5
 8001570:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001572:	f7ff fded 	bl	8001150 <lcd_clear>
		lcd_put_cur(0, 0);
 8001576:	2100      	movs	r1, #0
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fe00 	bl	800117e <lcd_put_cur>
		lcd_send_string("1 - 6 s: ");
 800157e:	480f      	ldr	r0, [pc, #60]	; (80015bc <keypad_configuration+0xc8>)
 8001580:	f7ff fe59 	bl	8001236 <lcd_send_string>
		lcd_put_cur(1, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fdf9 	bl	800117e <lcd_put_cur>
		break;
 800158c:	e00f      	b.n	80015ae <keypad_configuration+0xba>
	case '4':
		numpad = ALLARME;
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <keypad_configuration+0xc4>)
 8001590:	2202      	movs	r2, #2
 8001592:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001594:	f7ff fddc 	bl	8001150 <lcd_clear>
		lcd_put_cur(0, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fdef 	bl	800117e <lcd_put_cur>
		lcd_send_string("PIN: ");
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <keypad_configuration+0xd0>)
 80015a2:	f7ff fe48 	bl	8001236 <lcd_send_string>
		break;
 80015a6:	e002      	b.n	80015ae <keypad_configuration+0xba>
	case '5':
		switch_to_inattivo();
 80015a8:	f000 f968 	bl	800187c <switch_to_inattivo>
	}
}
 80015ac:	e7ff      	b.n	80015ae <keypad_configuration+0xba>
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000033d 	.word	0x2000033d
 80015bc:	08008144 	.word	0x08008144
 80015c0:	08008150 	.word	0x08008150
 80015c4:	0800813c 	.word	0x0800813c

080015c8 <keypad_sliding_gate>:

void keypad_sliding_gate() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	char c = KeyPad_WaitForKeyGetChar(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fcac 	bl	8000f2c <KeyPad_WaitForKeyGetChar>
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
	if (c != 0) {
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02e      	beq.n	800163c <keypad_sliding_gate+0x74>
		if (c >= '1' && c <= '6') {
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b30      	cmp	r3, #48	; 0x30
 80015e2:	d929      	bls.n	8001638 <keypad_sliding_gate+0x70>
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b36      	cmp	r3, #54	; 0x36
 80015e8:	d826      	bhi.n	8001638 <keypad_sliding_gate+0x70>
			time_open_sliding_gate = c - '0';
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	3b30      	subs	r3, #48	; 0x30
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <keypad_sliding_gate+0x7c>)
 80015f0:	6013      	str	r3, [r2, #0]
			set_autoreload(&htim4, time_open_sliding_gate * FROM_SECOND_TO_DECIMILLISECOND);
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <keypad_sliding_gate+0x7c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	4811      	ldr	r0, [pc, #68]	; (8001648 <keypad_sliding_gate+0x80>)
 8001602:	f000 fd53 	bl	80020ac <set_autoreload>
			lcd_clear();
 8001606:	f7ff fda3 	bl	8001150 <lcd_clear>
			lcd_put_cur(0, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fdb6 	bl	800117e <lcd_put_cur>
			lcd_send_string("C_N: ");
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <keypad_sliding_gate+0x84>)
 8001614:	f7ff fe0f 	bl	8001236 <lcd_send_string>
			lcd_send_data(c);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fd68 	bl	80010f0 <lcd_send_data>
			numpad = END_CONFIGURAZIONE;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <keypad_sliding_gate+0x88>)
 8001622:	2206      	movs	r2, #6
 8001624:	701a      	strb	r2, [r3, #0]
			start_timer_display = HAL_GetTick();
 8001626:	f002 fadb 	bl	8003be0 <HAL_GetTick>
 800162a:	4603      	mov	r3, r0
 800162c:	4a09      	ldr	r2, [pc, #36]	; (8001654 <keypad_sliding_gate+0x8c>)
 800162e:	6013      	str	r3, [r2, #0]
			prepare_data_configuration_sliding_gate(set_parameter);
 8001630:	2064      	movs	r0, #100	; 0x64
 8001632:	f000 fe5d 	bl	80022f0 <prepare_data_configuration_sliding_gate>
		} else {
			switch_to_inattivo();
		}
	}
}
 8001636:	e001      	b.n	800163c <keypad_sliding_gate+0x74>
			switch_to_inattivo();
 8001638:	f000 f920 	bl	800187c <switch_to_inattivo>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000020 	.word	0x20000020
 8001648:	20000144 	.word	0x20000144
 800164c:	0800815c 	.word	0x0800815c
 8001650:	2000033d 	.word	0x2000033d
 8001654:	200002f0 	.word	0x200002f0

08001658 <keypad_internal_light>:

void keypad_internal_light() {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	char c = KeyPad_WaitForKeyGetChar(0);
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fc64 	bl	8000f2c <KeyPad_WaitForKeyGetChar>
 8001664:	4603      	mov	r3, r0
 8001666:	70fb      	strb	r3, [r7, #3]
	if (c != 0) {
 8001668:	78fb      	ldrb	r3, [r7, #3]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80b6 	beq.w	80017dc <keypad_internal_light+0x184>
		lcd_send_data(c);
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd3c 	bl	80010f0 <lcd_send_data>
		if (index_configurazione_inserita < data_lenght) {
 8001678:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <keypad_internal_light+0x18c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	dc09      	bgt.n	8001694 <keypad_internal_light+0x3c>
			configurazione_inserita[index_configurazione_inserita] = c;
 8001680:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <keypad_internal_light+0x18c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4958      	ldr	r1, [pc, #352]	; (80017e8 <keypad_internal_light+0x190>)
 8001686:	78fa      	ldrb	r2, [r7, #3]
 8001688:	54ca      	strb	r2, [r1, r3]
			index_configurazione_inserita++;
 800168a:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <keypad_internal_light+0x18c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a54      	ldr	r2, [pc, #336]	; (80017e4 <keypad_internal_light+0x18c>)
 8001692:	6013      	str	r3, [r2, #0]
		}
		if (index_configurazione_inserita == 2) {
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <keypad_internal_light+0x18c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	f040 809f 	bne.w	80017dc <keypad_internal_light+0x184>
			if (configurazione_inserita[0] >= '1' && configurazione_inserita[0] <= '5') {
 800169e:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <keypad_internal_light+0x190>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b30      	cmp	r3, #48	; 0x30
 80016a4:	d945      	bls.n	8001732 <keypad_internal_light+0xda>
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <keypad_internal_light+0x190>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b35      	cmp	r3, #53	; 0x35
 80016ac:	d841      	bhi.n	8001732 <keypad_internal_light+0xda>
				if (configurazione_inserita[1] >= '0' && configurazione_inserita[1] <= '9') {
 80016ae:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <keypad_internal_light+0x190>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	2b2f      	cmp	r3, #47	; 0x2f
 80016b4:	d93a      	bls.n	800172c <keypad_internal_light+0xd4>
 80016b6:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <keypad_internal_light+0x190>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	2b39      	cmp	r3, #57	; 0x39
 80016bc:	d836      	bhi.n	800172c <keypad_internal_light+0xd4>
					time_on_internal_light = (configurazione_inserita[0] - '0') * 10 + (configurazione_inserita[1] - '0');
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <keypad_internal_light+0x190>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <keypad_internal_light+0x190>)
 80016d2:	785b      	ldrb	r3, [r3, #1]
 80016d4:	3b30      	subs	r3, #48	; 0x30
 80016d6:	4413      	add	r3, r2
 80016d8:	4a44      	ldr	r2, [pc, #272]	; (80017ec <keypad_internal_light+0x194>)
 80016da:	6013      	str	r3, [r2, #0]
					set_autoreload(&htim5, time_on_internal_light * FROM_SECOND_TO_MICROSECOND);
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <keypad_internal_light+0x194>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <keypad_internal_light+0x198>)
 80016e2:	fb02 f303 	mul.w	r3, r2, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	4842      	ldr	r0, [pc, #264]	; (80017f4 <keypad_internal_light+0x19c>)
 80016ea:	f000 fcdf 	bl	80020ac <set_autoreload>
					lcd_clear();
 80016ee:	f7ff fd2f 	bl	8001150 <lcd_clear>
					lcd_put_cur(0, 0);
 80016f2:	2100      	movs	r1, #0
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fd42 	bl	800117e <lcd_put_cur>
					lcd_send_string("L_N: ");
 80016fa:	483f      	ldr	r0, [pc, #252]	; (80017f8 <keypad_internal_light+0x1a0>)
 80016fc:	f7ff fd9b 	bl	8001236 <lcd_send_string>
					lcd_send_data(configurazione_inserita[0]);
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <keypad_internal_light+0x190>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fcf3 	bl	80010f0 <lcd_send_data>
					lcd_send_data(configurazione_inserita[1]);
 800170a:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <keypad_internal_light+0x190>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fcee 	bl	80010f0 <lcd_send_data>
					numpad = END_CONFIGURAZIONE;
 8001714:	4b39      	ldr	r3, [pc, #228]	; (80017fc <keypad_internal_light+0x1a4>)
 8001716:	2206      	movs	r2, #6
 8001718:	701a      	strb	r2, [r3, #0]
					start_timer_display = HAL_GetTick();
 800171a:	f002 fa61 	bl	8003be0 <HAL_GetTick>
 800171e:	4603      	mov	r3, r0
 8001720:	4a37      	ldr	r2, [pc, #220]	; (8001800 <keypad_internal_light+0x1a8>)
 8001722:	6013      	str	r3, [r2, #0]
					prepare_data_configuration_internal_light(set_parameter);
 8001724:	2064      	movs	r0, #100	; 0x64
 8001726:	f000 fe0b 	bl	8002340 <prepare_data_configuration_internal_light>
				if (configurazione_inserita[1] >= '0' && configurazione_inserita[1] <= '9') {
 800172a:	e046      	b.n	80017ba <keypad_internal_light+0x162>
				} else {
					switch_to_inattivo();
 800172c:	f000 f8a6 	bl	800187c <switch_to_inattivo>
				if (configurazione_inserita[1] >= '0' && configurazione_inserita[1] <= '9') {
 8001730:	e043      	b.n	80017ba <keypad_internal_light+0x162>
				}
			} else {
				if (configurazione_inserita[0] == '6') {
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <keypad_internal_light+0x190>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b36      	cmp	r3, #54	; 0x36
 8001738:	d13d      	bne.n	80017b6 <keypad_internal_light+0x15e>
					if (configurazione_inserita[1] == '0') {
 800173a:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <keypad_internal_light+0x190>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	2b30      	cmp	r3, #48	; 0x30
 8001740:	d136      	bne.n	80017b0 <keypad_internal_light+0x158>
						time_on_internal_light = (configurazione_inserita[0] - '0') * 10 + (configurazione_inserita[1] - '0');
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <keypad_internal_light+0x190>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	461a      	mov	r2, r3
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <keypad_internal_light+0x190>)
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	3b30      	subs	r3, #48	; 0x30
 800175a:	4413      	add	r3, r2
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <keypad_internal_light+0x194>)
 800175e:	6013      	str	r3, [r2, #0]
						set_autoreload(&htim5, time_on_internal_light * FROM_SECOND_TO_MICROSECOND);
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <keypad_internal_light+0x194>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <keypad_internal_light+0x198>)
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4619      	mov	r1, r3
 800176c:	4821      	ldr	r0, [pc, #132]	; (80017f4 <keypad_internal_light+0x19c>)
 800176e:	f000 fc9d 	bl	80020ac <set_autoreload>
						lcd_clear();
 8001772:	f7ff fced 	bl	8001150 <lcd_clear>
						lcd_put_cur(0, 0);
 8001776:	2100      	movs	r1, #0
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fd00 	bl	800117e <lcd_put_cur>
						lcd_send_string("L_N: ");
 800177e:	481e      	ldr	r0, [pc, #120]	; (80017f8 <keypad_internal_light+0x1a0>)
 8001780:	f7ff fd59 	bl	8001236 <lcd_send_string>
						lcd_send_data(configurazione_inserita[0]);
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <keypad_internal_light+0x190>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fcb1 	bl	80010f0 <lcd_send_data>
						lcd_send_data(configurazione_inserita[1]);
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <keypad_internal_light+0x190>)
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fcac 	bl	80010f0 <lcd_send_data>
						numpad = END_CONFIGURAZIONE;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <keypad_internal_light+0x1a4>)
 800179a:	2206      	movs	r2, #6
 800179c:	701a      	strb	r2, [r3, #0]
						start_timer_display = HAL_GetTick();
 800179e:	f002 fa1f 	bl	8003be0 <HAL_GetTick>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <keypad_internal_light+0x1a8>)
 80017a6:	6013      	str	r3, [r2, #0]
						prepare_data_configuration_internal_light(set_parameter);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f000 fdc9 	bl	8002340 <prepare_data_configuration_internal_light>
 80017ae:	e004      	b.n	80017ba <keypad_internal_light+0x162>
					} else {
						switch_to_inattivo();
 80017b0:	f000 f864 	bl	800187c <switch_to_inattivo>
 80017b4:	e001      	b.n	80017ba <keypad_internal_light+0x162>
					}
				} else {
					switch_to_inattivo();
 80017b6:	f000 f861 	bl	800187c <switch_to_inattivo>
				}
			}
			for (int i = 0; i < data_lenght; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e007      	b.n	80017d0 <keypad_internal_light+0x178>
				configurazione_inserita[i] = '\0';
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <keypad_internal_light+0x190>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < data_lenght; i++) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	ddf4      	ble.n	80017c0 <keypad_internal_light+0x168>
			}
			index_configurazione_inserita = 0;
 80017d6:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <keypad_internal_light+0x18c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000300 	.word	0x20000300
 80017e8:	200002fc 	.word	0x200002fc
 80017ec:	20000028 	.word	0x20000028
 80017f0:	000f4240 	.word	0x000f4240
 80017f4:	2000018c 	.word	0x2000018c
 80017f8:	08008164 	.word	0x08008164
 80017fc:	2000033d 	.word	0x2000033d
 8001800:	200002f0 	.word	0x200002f0

08001804 <keypad_door>:

void keypad_door() {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
	char c = KeyPad_WaitForKeyGetChar(0);
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fb8e 	bl	8000f2c <KeyPad_WaitForKeyGetChar>
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
	if (c != 0) {
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d024      	beq.n	8001864 <keypad_door+0x60>
		if (c >= '1' && c <= '6') {
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b30      	cmp	r3, #48	; 0x30
 800181e:	d91f      	bls.n	8001860 <keypad_door+0x5c>
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b36      	cmp	r3, #54	; 0x36
 8001824:	d81c      	bhi.n	8001860 <keypad_door+0x5c>
			time_open_door = c - '0';
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	3b30      	subs	r3, #48	; 0x30
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <keypad_door+0x68>)
 800182c:	6013      	str	r3, [r2, #0]
			lcd_clear();
 800182e:	f7ff fc8f 	bl	8001150 <lcd_clear>
			lcd_put_cur(0, 0);
 8001832:	2100      	movs	r1, #0
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fca2 	bl	800117e <lcd_put_cur>
			lcd_send_string("P_N: ");
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <keypad_door+0x6c>)
 800183c:	f7ff fcfb 	bl	8001236 <lcd_send_string>
			lcd_send_data(c);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc54 	bl	80010f0 <lcd_send_data>
			numpad = END_CONFIGURAZIONE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <keypad_door+0x70>)
 800184a:	2206      	movs	r2, #6
 800184c:	701a      	strb	r2, [r3, #0]
			start_timer_display = HAL_GetTick();
 800184e:	f002 f9c7 	bl	8003be0 <HAL_GetTick>
 8001852:	4603      	mov	r3, r0
 8001854:	4a08      	ldr	r2, [pc, #32]	; (8001878 <keypad_door+0x74>)
 8001856:	6013      	str	r3, [r2, #0]
			prepare_data_configuration_door(set_parameter);
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	f000 fdb1 	bl	80023c0 <prepare_data_configuration_door>
		} else {
			switch_to_inattivo();
		}
	}
}
 800185e:	e001      	b.n	8001864 <keypad_door+0x60>
			switch_to_inattivo();
 8001860:	f000 f80c 	bl	800187c <switch_to_inattivo>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000024 	.word	0x20000024
 8001870:	0800816c 	.word	0x0800816c
 8001874:	2000033d 	.word	0x2000033d
 8001878:	200002f0 	.word	0x200002f0

0800187c <switch_to_inattivo>:

void switch_to_inattivo() {
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	numpad = INATTIVO;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <switch_to_inattivo+0x24>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 8001886:	f7ff fc63 	bl	8001150 <lcd_clear>
	lcd_put_cur(0, 0);
 800188a:	2100      	movs	r1, #0
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff fc76 	bl	800117e <lcd_put_cur>
	HAL_GPIO_WritePin(LED_CONFIGURATION_GPIO_Port, LED_CONFIGURATION_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2104      	movs	r1, #4
 8001896:	4803      	ldr	r0, [pc, #12]	; (80018a4 <switch_to_inattivo+0x28>)
 8001898:	f002 fd12 	bl	80042c0 <HAL_GPIO_WritePin>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000033d 	.word	0x2000033d
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <open_door>:

void open_door() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	if (door == SERVO_CHIUSO) {
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <open_door+0x38>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d113      	bne.n	80018dc <open_door+0x34>
		door = SERVO_APERTURA;
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <open_door+0x38>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
		start_timer(&htim3);
 80018ba:	480a      	ldr	r0, [pc, #40]	; (80018e4 <open_door+0x3c>)
 80018bc:	f000 fb5e 	bl	8001f7c <start_timer>
		set_pwm(&htim3, 0, 750);
 80018c0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80018c4:	2100      	movs	r1, #0
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <open_door+0x3c>)
 80018c8:	f000 fc14 	bl	80020f4 <set_pwm>
		set_autoreload(&htim10, AUTORELOAD_SERVO_MOTOR);
 80018cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <open_door+0x40>)
 80018d2:	f000 fbeb 	bl	80020ac <set_autoreload>
		start_timer(&htim10);
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <open_door+0x40>)
 80018d8:	f000 fb50 	bl	8001f7c <start_timer>
	}
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	2000033f 	.word	0x2000033f
 80018e4:	200000fc 	.word	0x200000fc
 80018e8:	2000021c 	.word	0x2000021c

080018ec <process_door>:

void process_door() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	if (door == SERVO_APERTURA) {
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <process_door+0xac>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d11d      	bne.n	8001934 <process_door+0x48>
		if (htim3.Instance->CCR2 == 1500) {
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <process_door+0xb0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001902:	4293      	cmp	r3, r2
 8001904:	d110      	bne.n	8001928 <process_door+0x3c>
			door = SERVO_APERTO;
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <process_door+0xac>)
 8001908:	2202      	movs	r2, #2
 800190a:	701a      	strb	r2, [r3, #0]
			change_autoreload_timer_start(&htim10, time_open_door * FROM_SECOND_TO_DECIMILLISECOND);
 800190c:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <process_door+0xb4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f242 7210 	movw	r2, #10000	; 0x2710
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	4619      	mov	r1, r3
 800191a:	4822      	ldr	r0, [pc, #136]	; (80019a4 <process_door+0xb8>)
 800191c:	f000 fbd8 	bl	80020d0 <change_autoreload_timer_start>
			prepare_data_door(send_value);
 8001920:	2063      	movs	r0, #99	; 0x63
 8001922:	f000 fc7d 	bl	8002220 <prepare_data_door>
					set_pwm(&htim3, 1, -250);
				}
			}
		}
	}
}
 8001926:	e035      	b.n	8001994 <process_door+0xa8>
			set_pwm(&htim3, 1, 250);
 8001928:	22fa      	movs	r2, #250	; 0xfa
 800192a:	2101      	movs	r1, #1
 800192c:	481b      	ldr	r0, [pc, #108]	; (800199c <process_door+0xb0>)
 800192e:	f000 fbe1 	bl	80020f4 <set_pwm>
}
 8001932:	e02f      	b.n	8001994 <process_door+0xa8>
		if (door == SERVO_APERTO) {
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <process_door+0xac>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d10e      	bne.n	800195a <process_door+0x6e>
			door = SERVO_CHIUSURA;
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <process_door+0xac>)
 800193e:	2203      	movs	r2, #3
 8001940:	701a      	strb	r2, [r3, #0]
			change_autoreload_timer_start(&htim10, AUTORELOAD_SERVO_MOTOR);
 8001942:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001946:	4817      	ldr	r0, [pc, #92]	; (80019a4 <process_door+0xb8>)
 8001948:	f000 fbc2 	bl	80020d0 <change_autoreload_timer_start>
			set_pwm(&htim3, 0, 1250);
 800194c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001950:	2100      	movs	r1, #0
 8001952:	4812      	ldr	r0, [pc, #72]	; (800199c <process_door+0xb0>)
 8001954:	f000 fbce 	bl	80020f4 <set_pwm>
}
 8001958:	e01c      	b.n	8001994 <process_door+0xa8>
			if (door == SERVO_CHIUSURA) {
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <process_door+0xac>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d118      	bne.n	8001994 <process_door+0xa8>
				if (htim3.Instance->CCR2 == 500) {
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <process_door+0xb0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800196c:	d10c      	bne.n	8001988 <process_door+0x9c>
					stop_timer(&htim3);
 800196e:	480b      	ldr	r0, [pc, #44]	; (800199c <process_door+0xb0>)
 8001970:	f000 fb4e 	bl	8002010 <stop_timer>
					stop_timer(&htim10);
 8001974:	480b      	ldr	r0, [pc, #44]	; (80019a4 <process_door+0xb8>)
 8001976:	f000 fb4b 	bl	8002010 <stop_timer>
					door = SERVO_CHIUSO;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <process_door+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
					prepare_data_door(send_value);
 8001980:	2063      	movs	r0, #99	; 0x63
 8001982:	f000 fc4d 	bl	8002220 <prepare_data_door>
}
 8001986:	e005      	b.n	8001994 <process_door+0xa8>
					set_pwm(&htim3, 1, -250);
 8001988:	f06f 02f9 	mvn.w	r2, #249	; 0xf9
 800198c:	2101      	movs	r1, #1
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <process_door+0xb0>)
 8001990:	f000 fbb0 	bl	80020f4 <set_pwm>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000033f 	.word	0x2000033f
 800199c:	200000fc 	.word	0x200000fc
 80019a0:	20000024 	.word	0x20000024
 80019a4:	2000021c 	.word	0x2000021c

080019a8 <stepper_half_drive>:

void stepper_half_drive (int actual_step) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	switch (actual_step){
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	f200 80d4 	bhi.w	8001b60 <stepper_half_drive+0x1b8>
 80019b8:	a201      	add	r2, pc, #4	; (adr r2, 80019c0 <stepper_half_drive+0x18>)
 80019ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019be:	bf00      	nop
 80019c0:	080019e1 	.word	0x080019e1
 80019c4:	08001a11 	.word	0x08001a11
 80019c8:	08001a41 	.word	0x08001a41
 80019cc:	08001a71 	.word	0x08001a71
 80019d0:	08001aa1 	.word	0x08001aa1
 80019d4:	08001ad1 	.word	0x08001ad1
 80019d8:	08001b01 	.word	0x08001b01
 80019dc:	08001b31 	.word	0x08001b31
	case 0:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_SET);   // IN1
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e6:	487e      	ldr	r0, [pc, #504]	; (8001be0 <stepper_half_drive+0x238>)
 80019e8:	f002 fc6a 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_RESET);   // IN2
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f2:	487b      	ldr	r0, [pc, #492]	; (8001be0 <stepper_half_drive+0x238>)
 80019f4:	f002 fc64 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_RESET);   // IN3
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fe:	4878      	ldr	r0, [pc, #480]	; (8001be0 <stepper_half_drive+0x238>)
 8001a00:	f002 fc5e 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001a04:	2200      	movs	r2, #0
 8001a06:	2102      	movs	r1, #2
 8001a08:	4875      	ldr	r0, [pc, #468]	; (8001be0 <stepper_half_drive+0x238>)
 8001a0a:	f002 fc59 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001a0e:	e0a7      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 1:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_SET);   // IN1
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a16:	4872      	ldr	r0, [pc, #456]	; (8001be0 <stepper_half_drive+0x238>)
 8001a18:	f002 fc52 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_SET);   // IN2
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a22:	486f      	ldr	r0, [pc, #444]	; (8001be0 <stepper_half_drive+0x238>)
 8001a24:	f002 fc4c 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a2e:	486c      	ldr	r0, [pc, #432]	; (8001be0 <stepper_half_drive+0x238>)
 8001a30:	f002 fc46 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001a34:	2200      	movs	r2, #0
 8001a36:	2102      	movs	r1, #2
 8001a38:	4869      	ldr	r0, [pc, #420]	; (8001be0 <stepper_half_drive+0x238>)
 8001a3a:	f002 fc41 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001a3e:	e08f      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 2:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a46:	4866      	ldr	r0, [pc, #408]	; (8001be0 <stepper_half_drive+0x238>)
 8001a48:	f002 fc3a 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_SET);   // IN2
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a52:	4863      	ldr	r0, [pc, #396]	; (8001be0 <stepper_half_drive+0x238>)
 8001a54:	f002 fc34 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	4860      	ldr	r0, [pc, #384]	; (8001be0 <stepper_half_drive+0x238>)
 8001a60:	f002 fc2e 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001a64:	2200      	movs	r2, #0
 8001a66:	2102      	movs	r1, #2
 8001a68:	485d      	ldr	r0, [pc, #372]	; (8001be0 <stepper_half_drive+0x238>)
 8001a6a:	f002 fc29 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001a6e:	e077      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 3:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	485a      	ldr	r0, [pc, #360]	; (8001be0 <stepper_half_drive+0x238>)
 8001a78:	f002 fc22 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_SET);   // IN2
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	4857      	ldr	r0, [pc, #348]	; (8001be0 <stepper_half_drive+0x238>)
 8001a84:	f002 fc1c 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_SET);   // IN3
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8e:	4854      	ldr	r0, [pc, #336]	; (8001be0 <stepper_half_drive+0x238>)
 8001a90:	f002 fc16 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001a94:	2200      	movs	r2, #0
 8001a96:	2102      	movs	r1, #2
 8001a98:	4851      	ldr	r0, [pc, #324]	; (8001be0 <stepper_half_drive+0x238>)
 8001a9a:	f002 fc11 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001a9e:	e05f      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 4:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa6:	484e      	ldr	r0, [pc, #312]	; (8001be0 <stepper_half_drive+0x238>)
 8001aa8:	f002 fc0a 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab2:	484b      	ldr	r0, [pc, #300]	; (8001be0 <stepper_half_drive+0x238>)
 8001ab4:	f002 fc04 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_SET);   // IN3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abe:	4848      	ldr	r0, [pc, #288]	; (8001be0 <stepper_half_drive+0x238>)
 8001ac0:	f002 fbfe 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_RESET);   // IN4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4845      	ldr	r0, [pc, #276]	; (8001be0 <stepper_half_drive+0x238>)
 8001aca:	f002 fbf9 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001ace:	e047      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 5:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	4842      	ldr	r0, [pc, #264]	; (8001be0 <stepper_half_drive+0x238>)
 8001ad8:	f002 fbf2 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae2:	483f      	ldr	r0, [pc, #252]	; (8001be0 <stepper_half_drive+0x238>)
 8001ae4:	f002 fbec 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_SET);   // IN3
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aee:	483c      	ldr	r0, [pc, #240]	; (8001be0 <stepper_half_drive+0x238>)
 8001af0:	f002 fbe6 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_SET);   // IN4
 8001af4:	2201      	movs	r2, #1
 8001af6:	2102      	movs	r1, #2
 8001af8:	4839      	ldr	r0, [pc, #228]	; (8001be0 <stepper_half_drive+0x238>)
 8001afa:	f002 fbe1 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001afe:	e02f      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 6:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_RESET);   // IN1
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b06:	4836      	ldr	r0, [pc, #216]	; (8001be0 <stepper_half_drive+0x238>)
 8001b08:	f002 fbda 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b12:	4833      	ldr	r0, [pc, #204]	; (8001be0 <stepper_half_drive+0x238>)
 8001b14:	f002 fbd4 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1e:	4830      	ldr	r0, [pc, #192]	; (8001be0 <stepper_half_drive+0x238>)
 8001b20:	f002 fbce 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_SET);   // IN4
 8001b24:	2201      	movs	r2, #1
 8001b26:	2102      	movs	r1, #2
 8001b28:	482d      	ldr	r0, [pc, #180]	; (8001be0 <stepper_half_drive+0x238>)
 8001b2a:	f002 fbc9 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001b2e:	e017      	b.n	8001b60 <stepper_half_drive+0x1b8>

	case 7:
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN1_GPIO_Port, STEPPER_MOTOR_IN1_Pin, GPIO_PIN_SET);   // IN1
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b36:	482a      	ldr	r0, [pc, #168]	; (8001be0 <stepper_half_drive+0x238>)
 8001b38:	f002 fbc2 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN2_GPIO_Port, STEPPER_MOTOR_IN2_Pin, GPIO_PIN_RESET);   // IN2
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b42:	4827      	ldr	r0, [pc, #156]	; (8001be0 <stepper_half_drive+0x238>)
 8001b44:	f002 fbbc 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN3_GPIO_Port, STEPPER_MOTOR_IN3_Pin, GPIO_PIN_RESET);   // IN3
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4e:	4824      	ldr	r0, [pc, #144]	; (8001be0 <stepper_half_drive+0x238>)
 8001b50:	f002 fbb6 	bl	80042c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_MOTOR_IN4_GPIO_Port, STEPPER_MOTOR_IN4_Pin, GPIO_PIN_SET);   // IN4
 8001b54:	2201      	movs	r2, #1
 8001b56:	2102      	movs	r1, #2
 8001b58:	4821      	ldr	r0, [pc, #132]	; (8001be0 <stepper_half_drive+0x238>)
 8001b5a:	f002 fbb1 	bl	80042c0 <HAL_GPIO_WritePin>
		break;
 8001b5e:	bf00      	nop
	}
	step += direction;
 8001b60:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <stepper_half_drive+0x23c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <stepper_half_drive+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a1e      	ldr	r2, [pc, #120]	; (8001be4 <stepper_half_drive+0x23c>)
 8001b6c:	6013      	str	r3, [r2, #0]
	if (direction == -1) {
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <stepper_half_drive+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b76:	d116      	bne.n	8001ba6 <stepper_half_drive+0x1fe>
		if (step == -1) {
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <stepper_half_drive+0x23c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d12a      	bne.n	8001bd8 <stepper_half_drive+0x230>
			step = 7;
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <stepper_half_drive+0x23c>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
			seq++;
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <stepper_half_drive+0x244>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <stepper_half_drive+0x244>)
 8001b90:	6013      	str	r3, [r2, #0]
			if (seq == numberofsequences) {
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <stepper_half_drive+0x244>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <stepper_half_drive+0x248>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d11c      	bne.n	8001bd8 <stepper_half_drive+0x230>
				seq = 0;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <stepper_half_drive+0x244>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
					seq = 0;
				}
			}
		}
	}
}
 8001ba4:	e018      	b.n	8001bd8 <stepper_half_drive+0x230>
		if (direction == 1) {
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <stepper_half_drive+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d114      	bne.n	8001bd8 <stepper_half_drive+0x230>
			if (step == 8) {
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <stepper_half_drive+0x23c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d110      	bne.n	8001bd8 <stepper_half_drive+0x230>
				step = 0;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <stepper_half_drive+0x23c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
				seq++;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <stepper_half_drive+0x244>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <stepper_half_drive+0x244>)
 8001bc4:	6013      	str	r3, [r2, #0]
				if (seq == numberofsequences) {
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <stepper_half_drive+0x244>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <stepper_half_drive+0x248>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d102      	bne.n	8001bd8 <stepper_half_drive+0x230>
					seq = 0;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <stepper_half_drive+0x244>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40020400 	.word	0x40020400
 8001be4:	20000320 	.word	0x20000320
 8001be8:	20000324 	.word	0x20000324
 8001bec:	2000031c 	.word	0x2000031c
 8001bf0:	20000318 	.word	0x20000318

08001bf4 <HCSR04_Read>:

void HCSR04_Read (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
	if (GPIOx == HC_SR04_CLOSE_POSITION_TRIGGER_GPIO_Port &&
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HCSR04_Read+0x58>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d10c      	bne.n	8001c22 <HCSR04_Read+0x2e>
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d109      	bne.n	8001c22 <HCSR04_Read+0x2e>
			GPIO_Pin == HC_SR04_CLOSE_POSITION_TRIGGER_Pin) {
		HAL_GPIO_WritePin(HC_SR04_CLOSE_POSITION_TRIGGER_GPIO_Port, HC_SR04_CLOSE_POSITION_TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2120      	movs	r1, #32
 8001c12:	480e      	ldr	r0, [pc, #56]	; (8001c4c <HCSR04_Read+0x58>)
 8001c14:	f002 fb54 	bl	80042c0 <HAL_GPIO_WritePin>
		change_autoreload_timer_start(&htim1, 10);
 8001c18:	210a      	movs	r1, #10
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <HCSR04_Read+0x5c>)
 8001c1c:	f000 fa58 	bl	80020d0 <change_autoreload_timer_start>
				GPIO_Pin == HC_SR04_OPEN_POSITION_TRIGGER_Pin) {
			HAL_GPIO_WritePin(HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port, HC_SR04_OPEN_POSITION_TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
			change_autoreload_timer_start(&htim1, 10);
		}
	}
}
 8001c20:	e00f      	b.n	8001c42 <HCSR04_Read+0x4e>
		if (GPIOx == HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HCSR04_Read+0x60>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10b      	bne.n	8001c42 <HCSR04_Read+0x4e>
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d108      	bne.n	8001c42 <HCSR04_Read+0x4e>
			HAL_GPIO_WritePin(HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port, HC_SR04_OPEN_POSITION_TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c30:	2201      	movs	r2, #1
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <HCSR04_Read+0x60>)
 8001c36:	f002 fb43 	bl	80042c0 <HAL_GPIO_WritePin>
			change_autoreload_timer_start(&htim1, 10);
 8001c3a:	210a      	movs	r1, #10
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <HCSR04_Read+0x5c>)
 8001c3e:	f000 fa47 	bl	80020d0 <change_autoreload_timer_start>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	200000b4 	.word	0x200000b4
 8001c54:	40020800 	.word	0x40020800

08001c58 <open_sliding_gate>:

void open_sliding_gate() {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	if (sliding_gate == CHIUSO) {
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <open_sliding_gate+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d123      	bne.n	8001cac <open_sliding_gate+0x54>
		sliding_gate = IN_APERTURA;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <open_sliding_gate+0x58>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
		prepare_data_sliding_gate(send_value);
 8001c6a:	2063      	movs	r0, #99	; 0x63
 8001c6c:	f000 fa68 	bl	8002140 <prepare_data_sliding_gate>
		HAL_GPIO_WritePin(LED_SLIDING_GATE_GPIO_Port, LED_SLIDING_GATE_Pin, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c76:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <open_sliding_gate+0x5c>)
 8001c78:	f002 fb22 	bl	80042c0 <HAL_GPIO_WritePin>
		step = 7;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <open_sliding_gate+0x60>)
 8001c7e:	2207      	movs	r2, #7
 8001c80:	601a      	str	r2, [r3, #0]
		seq = 0;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <open_sliding_gate+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
		direction = -1;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <open_sliding_gate+0x68>)
 8001c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8e:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim9, 0);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <open_sliding_gate+0x6c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim9);
 8001c98:	480a      	ldr	r0, [pc, #40]	; (8001cc4 <open_sliding_gate+0x6c>)
 8001c9a:	f003 fd65 	bl	8005768 <HAL_TIM_Base_Start_IT>
		start_timer(&htim1);
 8001c9e:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <open_sliding_gate+0x70>)
 8001ca0:	f000 f96c 	bl	8001f7c <start_timer>
		HCSR04_Read(HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port, HC_SR04_OPEN_POSITION_TRIGGER_Pin);
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <open_sliding_gate+0x5c>)
 8001ca8:	f7ff ffa4 	bl	8001bf4 <HCSR04_Read>
	}
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000340 	.word	0x20000340
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	20000320 	.word	0x20000320
 8001cbc:	2000031c 	.word	0x2000031c
 8001cc0:	20000324 	.word	0x20000324
 8001cc4:	200001d4 	.word	0x200001d4
 8001cc8:	200000b4 	.word	0x200000b4

08001ccc <close_sliding_gate>:

void close_sliding_gate() {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	sliding_gate = APERTO;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <close_sliding_gate+0x2c>)
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
	prepare_data_sliding_gate(send_value);
 8001cd6:	2063      	movs	r0, #99	; 0x63
 8001cd8:	f000 fa32 	bl	8002140 <prepare_data_sliding_gate>
	stop_timer(&htim9);
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <close_sliding_gate+0x30>)
 8001cde:	f000 f997 	bl	8002010 <stop_timer>
	stop_timer(&htim1);
 8001ce2:	4807      	ldr	r0, [pc, #28]	; (8001d00 <close_sliding_gate+0x34>)
 8001ce4:	f000 f994 	bl	8002010 <stop_timer>
	hc_sr04_open_position = DELAY;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <close_sliding_gate+0x38>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
	start_timer(&htim4);
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <close_sliding_gate+0x3c>)
 8001cf0:	f000 f944 	bl	8001f7c <start_timer>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000340 	.word	0x20000340
 8001cfc:	200001d4 	.word	0x200001d4
 8001d00:	200000b4 	.word	0x200000b4
 8001d04:	20000342 	.word	0x20000342
 8001d08:	20000144 	.word	0x20000144

08001d0c <stop_sliding_gate>:

void stop_sliding_gate() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	sliding_gate = CHIUSO;
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <stop_sliding_gate+0x34>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
	prepare_data_sliding_gate(send_value);
 8001d16:	2063      	movs	r0, #99	; 0x63
 8001d18:	f000 fa12 	bl	8002140 <prepare_data_sliding_gate>
	stop_timer(&htim9);
 8001d1c:	4809      	ldr	r0, [pc, #36]	; (8001d44 <stop_sliding_gate+0x38>)
 8001d1e:	f000 f977 	bl	8002010 <stop_timer>
	stop_timer(&htim11);
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <stop_sliding_gate+0x3c>)
 8001d24:	f000 f974 	bl	8002010 <stop_timer>
	hc_sr04_close_position = DELAY;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <stop_sliding_gate+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_SLIDING_GATE_GPIO_Port, LED_SLIDING_GATE_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d34:	4806      	ldr	r0, [pc, #24]	; (8001d50 <stop_sliding_gate+0x44>)
 8001d36:	f002 fac3 	bl	80042c0 <HAL_GPIO_WritePin>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000340 	.word	0x20000340
 8001d44:	200001d4 	.word	0x200001d4
 8001d48:	20000264 	.word	0x20000264
 8001d4c:	20000341 	.word	0x20000341
 8001d50:	40020800 	.word	0x40020800

08001d54 <start_closing_sliding_gate>:

void start_closing_sliding_gate() {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	sliding_gate = IN_CHIUSURA;
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <start_closing_sliding_gate+0x40>)
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	701a      	strb	r2, [r3, #0]
	prepare_data_sliding_gate(send_value);
 8001d5e:	2063      	movs	r0, #99	; 0x63
 8001d60:	f000 f9ee 	bl	8002140 <prepare_data_sliding_gate>
	stop_timer(&htim4);
 8001d64:	480c      	ldr	r0, [pc, #48]	; (8001d98 <start_closing_sliding_gate+0x44>)
 8001d66:	f000 f953 	bl	8002010 <stop_timer>
	step = 0;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <start_closing_sliding_gate+0x48>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
	seq = 0;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <start_closing_sliding_gate+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
	direction = 1;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <start_closing_sliding_gate+0x50>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
	start_timer(&htim9);
 8001d7c:	480a      	ldr	r0, [pc, #40]	; (8001da8 <start_closing_sliding_gate+0x54>)
 8001d7e:	f000 f8fd 	bl	8001f7c <start_timer>
	start_timer (&htim11);
 8001d82:	480a      	ldr	r0, [pc, #40]	; (8001dac <start_closing_sliding_gate+0x58>)
 8001d84:	f000 f8fa 	bl	8001f7c <start_timer>
	HCSR04_Read(HC_SR04_CLOSE_POSITION_TRIGGER_GPIO_Port, HC_SR04_CLOSE_POSITION_TRIGGER_Pin);
 8001d88:	2120      	movs	r1, #32
 8001d8a:	4809      	ldr	r0, [pc, #36]	; (8001db0 <start_closing_sliding_gate+0x5c>)
 8001d8c:	f7ff ff32 	bl	8001bf4 <HCSR04_Read>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000340 	.word	0x20000340
 8001d98:	20000144 	.word	0x20000144
 8001d9c:	20000320 	.word	0x20000320
 8001da0:	2000031c 	.word	0x2000031c
 8001da4:	20000324 	.word	0x20000324
 8001da8:	200001d4 	.word	0x200001d4
 8001dac:	20000264 	.word	0x20000264
 8001db0:	40020400 	.word	0x40020400

08001db4 <change_direction_sliding_gate>:

void change_direction_sliding_gate() {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	if (sliding_gate == IN_CHIUSURA) {
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <change_direction_sliding_gate+0x40>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d116      	bne.n	8001dee <change_direction_sliding_gate+0x3a>
		sliding_gate = IN_APERTURA;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <change_direction_sliding_gate+0x40>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
		prepare_data_sliding_gate(send_value);
 8001dc6:	2063      	movs	r0, #99	; 0x63
 8001dc8:	f000 f9ba 	bl	8002140 <prepare_data_sliding_gate>
		direction = -1;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <change_direction_sliding_gate+0x44>)
 8001dce:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd2:	601a      	str	r2, [r3, #0]
		stop_timer(&htim11);
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <change_direction_sliding_gate+0x48>)
 8001dd6:	f000 f91b 	bl	8002010 <stop_timer>
		hc_sr04_close_position = DELAY;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <change_direction_sliding_gate+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
		start_timer(&htim1);
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <change_direction_sliding_gate+0x50>)
 8001de2:	f000 f8cb 	bl	8001f7c <start_timer>
		HCSR04_Read(HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port, HC_SR04_OPEN_POSITION_TRIGGER_Pin);
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	4807      	ldr	r0, [pc, #28]	; (8001e08 <change_direction_sliding_gate+0x54>)
 8001dea:	f7ff ff03 	bl	8001bf4 <HCSR04_Read>
	}
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000340 	.word	0x20000340
 8001df8:	20000324 	.word	0x20000324
 8001dfc:	20000264 	.word	0x20000264
 8001e00:	20000341 	.word	0x20000341
 8001e04:	200000b4 	.word	0x200000b4
 8001e08:	40020800 	.word	0x40020800

08001e0c <start_sampling_hcsr04>:

void start_sampling_hcsr04(TIM_HandleTypeDef* htim) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <start_sampling_hcsr04+0x88>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d119      	bne.n	8001e50 <start_sampling_hcsr04+0x44>
		if (hc_sr04_open_position == DELAY) {
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <start_sampling_hcsr04+0x8c>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d132      	bne.n	8001e8a <start_sampling_hcsr04+0x7e>
			HAL_GPIO_WritePin(HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port, HC_SR04_OPEN_POSITION_TRIGGER_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	481c      	ldr	r0, [pc, #112]	; (8001e9c <start_sampling_hcsr04+0x90>)
 8001e2a:	f002 fa49 	bl	80042c0 <HAL_GPIO_WritePin>
			__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <start_sampling_hcsr04+0x88>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <start_sampling_hcsr04+0x88>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f042 0202 	orr.w	r2, r2, #2
 8001e3c:	60da      	str	r2, [r3, #12]
			change_autoreload_timer_start(&htim1, 0xffff-1);
 8001e3e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <start_sampling_hcsr04+0x88>)
 8001e44:	f000 f944 	bl	80020d0 <change_autoreload_timer_start>
			hc_sr04_open_position = MISURA;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <start_sampling_hcsr04+0x8c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
				change_autoreload_timer_start(&htim11, 0xffff-1);
				hc_sr04_close_position = MISURA;
			}
		}
	}
}
 8001e4e:	e01c      	b.n	8001e8a <start_sampling_hcsr04+0x7e>
		if (htim == &htim11) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <start_sampling_hcsr04+0x94>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d118      	bne.n	8001e8a <start_sampling_hcsr04+0x7e>
			if (hc_sr04_close_position == DELAY) {
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <start_sampling_hcsr04+0x98>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d114      	bne.n	8001e8a <start_sampling_hcsr04+0x7e>
				HAL_GPIO_WritePin(HC_SR04_CLOSE_POSITION_TRIGGER_GPIO_Port, HC_SR04_CLOSE_POSITION_TRIGGER_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2120      	movs	r1, #32
 8001e64:	4810      	ldr	r0, [pc, #64]	; (8001ea8 <start_sampling_hcsr04+0x9c>)
 8001e66:	f002 fa2b 	bl	80042c0 <HAL_GPIO_WritePin>
				__HAL_TIM_ENABLE_IT(&htim11, TIM_IT_CC1);
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <start_sampling_hcsr04+0x94>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <start_sampling_hcsr04+0x94>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0202 	orr.w	r2, r2, #2
 8001e78:	60da      	str	r2, [r3, #12]
				change_autoreload_timer_start(&htim11, 0xffff-1);
 8001e7a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001e7e:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <start_sampling_hcsr04+0x94>)
 8001e80:	f000 f926 	bl	80020d0 <change_autoreload_timer_start>
				hc_sr04_close_position = MISURA;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <start_sampling_hcsr04+0x98>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200000b4 	.word	0x200000b4
 8001e98:	20000342 	.word	0x20000342
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	20000264 	.word	0x20000264
 8001ea4:	20000341 	.word	0x20000341
 8001ea8:	40020400 	.word	0x40020400

08001eac <led_on>:

void led_on() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_INTERNAL_LIGHT_GPIO_Port, LED_INTERNAL_LIGHT_Pin, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <led_on+0x30>)
 8001eb8:	f002 fa02 	bl	80042c0 <HAL_GPIO_WritePin>
	if (internal_light == SPENTO) {
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <led_on+0x34>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d108      	bne.n	8001ed6 <led_on+0x2a>
		internal_light = ACCESO;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <led_on+0x34>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
		prepare_data_internal_light(send_value);
 8001eca:	2063      	movs	r0, #99	; 0x63
 8001ecc:	f000 f978 	bl	80021c0 <prepare_data_internal_light>
		start_timer(&htim5);
 8001ed0:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <led_on+0x38>)
 8001ed2:	f000 f853 	bl	8001f7c <start_timer>
	}
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	2000033e 	.word	0x2000033e
 8001ee4:	2000018c 	.word	0x2000018c

08001ee8 <led_off>:

void led_off() {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	stop_timer(&htim5);
 8001eec:	4808      	ldr	r0, [pc, #32]	; (8001f10 <led_off+0x28>)
 8001eee:	f000 f88f 	bl	8002010 <stop_timer>
	HAL_GPIO_WritePin(LED_INTERNAL_LIGHT_GPIO_Port, LED_INTERNAL_LIGHT_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef8:	4806      	ldr	r0, [pc, #24]	; (8001f14 <led_off+0x2c>)
 8001efa:	f002 f9e1 	bl	80042c0 <HAL_GPIO_WritePin>
	internal_light = SPENTO;
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <led_off+0x30>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
	prepare_data_internal_light(send_value);
 8001f04:	2063      	movs	r0, #99	; 0x63
 8001f06:	f000 f95b 	bl	80021c0 <prepare_data_internal_light>
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000018c 	.word	0x2000018c
 8001f14:	40020800 	.word	0x40020800
 8001f18:	2000033e 	.word	0x2000033e

08001f1c <alarm_on>:

void alarm_on() {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	alarm = ALARM_DISATTIVO;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <alarm_on+0x20>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
	prepare_data_alarm(send_value);
 8001f26:	2063      	movs	r0, #99	; 0x63
 8001f28:	f000 f9aa 	bl	8002280 <prepare_data_alarm>
	HAL_GPIO_WritePin(LED_ALARM_GPIO_Port, LED_ALARM_Pin, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f32:	4803      	ldr	r0, [pc, #12]	; (8001f40 <alarm_on+0x24>)
 8001f34:	f002 f9c4 	bl	80042c0 <HAL_GPIO_WritePin>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000032 	.word	0x20000032
 8001f40:	40020800 	.word	0x40020800

08001f44 <alarm_off>:

void alarm_off() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	alarm = SPENTO;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <alarm_off+0x2c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
	prepare_data_alarm(send_value);
 8001f4e:	2063      	movs	r0, #99	; 0x63
 8001f50:	f000 f996 	bl	8002280 <prepare_data_alarm>
	HAL_GPIO_WritePin(ACTIVE_BUZZER_GPIO_Port, ACTIVE_BUZZER_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2101      	movs	r1, #1
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <alarm_off+0x30>)
 8001f5a:	f002 f9b1 	bl	80042c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_ALARM_GPIO_Port, LED_ALARM_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <alarm_off+0x34>)
 8001f66:	f002 f9ab 	bl	80042c0 <HAL_GPIO_WritePin>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000032 	.word	0x20000032
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800

08001f7c <start_timer>:

void start_timer(TIM_HandleTypeDef* htim) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <start_timer+0x78>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d108      	bne.n	8001f9e <start_timer+0x22>
		__HAL_TIM_SET_COUNTER(htim, 0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001f94:	2104      	movs	r1, #4
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f003 fcc6 	bl	8005928 <HAL_TIM_PWM_Start>
				HAL_TIM_Base_Start_IT(htim);
				HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);
			}
		}
	}
}
 8001f9c:	e026      	b.n	8001fec <start_timer+0x70>
		if (htim == &htim10 || htim == &htim5 || htim == &htim9 || htim == &htim4) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <start_timer+0x7c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <start_timer+0x42>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <start_timer+0x80>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <start_timer+0x42>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a13      	ldr	r2, [pc, #76]	; (8002000 <start_timer+0x84>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <start_timer+0x42>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <start_timer+0x88>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d107      	bne.n	8001fce <start_timer+0x52>
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f003 fbce 	bl	8005768 <HAL_TIM_Base_Start_IT>
}
 8001fcc:	e00e      	b.n	8001fec <start_timer+0x70>
			if (htim == &htim1 || htim == &htim11) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <start_timer+0x8c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <start_timer+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <start_timer+0x90>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d106      	bne.n	8001fec <start_timer+0x70>
				HAL_TIM_Base_Start_IT(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f003 fbc2 	bl	8005768 <HAL_TIM_Base_Start_IT>
				HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f003 fe0c 	bl	8005c04 <HAL_TIM_IC_Start_IT>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	200000fc 	.word	0x200000fc
 8001ff8:	2000021c 	.word	0x2000021c
 8001ffc:	2000018c 	.word	0x2000018c
 8002000:	200001d4 	.word	0x200001d4
 8002004:	20000144 	.word	0x20000144
 8002008:	200000b4 	.word	0x200000b4
 800200c:	20000264 	.word	0x20000264

08002010 <stop_timer>:

void stop_timer(TIM_HandleTypeDef* htim) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <stop_timer+0x80>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d108      	bne.n	8002032 <stop_timer+0x22>
		HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_2);
 8002020:	2104      	movs	r1, #4
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f003 fd30 	bl	8005a88 <HAL_TIM_PWM_Stop>
		__HAL_TIM_SET_COUNTER(htim, 0);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
				__HAL_TIM_SET_COUNTER(htim, 0);
			}
		}
	}

}
 8002030:	e02a      	b.n	8002088 <stop_timer+0x78>
		if (htim == &htim10 || htim == &htim5 || htim == &htim9 || htim == &htim4) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a17      	ldr	r2, [pc, #92]	; (8002094 <stop_timer+0x84>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00b      	beq.n	8002052 <stop_timer+0x42>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a16      	ldr	r2, [pc, #88]	; (8002098 <stop_timer+0x88>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <stop_timer+0x42>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a15      	ldr	r2, [pc, #84]	; (800209c <stop_timer+0x8c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d003      	beq.n	8002052 <stop_timer+0x42>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <stop_timer+0x90>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d107      	bne.n	8002062 <stop_timer+0x52>
			HAL_TIM_Base_Stop_IT(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f003 fbea 	bl	800582c <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(htim, 0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002060:	e012      	b.n	8002088 <stop_timer+0x78>
			if (htim == &htim1 || htim == &htim11) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <stop_timer+0x94>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d003      	beq.n	8002072 <stop_timer+0x62>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <stop_timer+0x98>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10a      	bne.n	8002088 <stop_timer+0x78>
				HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f003 fedf 	bl	8005e38 <HAL_TIM_IC_Stop_IT>
				HAL_TIM_Base_Stop_IT(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f003 fbd6 	bl	800582c <HAL_TIM_Base_Stop_IT>
				__HAL_TIM_SET_COUNTER(htim, 0);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200000fc 	.word	0x200000fc
 8002094:	2000021c 	.word	0x2000021c
 8002098:	2000018c 	.word	0x2000018c
 800209c:	200001d4 	.word	0x200001d4
 80020a0:	20000144 	.word	0x20000144
 80020a4:	200000b4 	.word	0x200000b4
 80020a8:	20000264 	.word	0x20000264

080020ac <set_autoreload>:

void set_autoreload(TIM_HandleTypeDef* htim, uint32_t autoreload) {
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, autoreload);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	60da      	str	r2, [r3, #12]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <change_autoreload_timer_start>:

void change_autoreload_timer_start(TIM_HandleTypeDef* htim, uint32_t autoreload) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	set_autoreload(htim, autoreload);
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe5 	bl	80020ac <set_autoreload>
	__HAL_TIM_SET_COUNTER(htim, 0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <set_pwm>:

void set_pwm(TIM_HandleTypeDef* htim, int update, uint32_t pwm) {
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	if (htim == &htim3) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a0e      	ldr	r2, [pc, #56]	; (800213c <set_pwm+0x48>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d112      	bne.n	800212e <set_pwm+0x3a>
		if (update == 1) {
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d108      	bne.n	8002120 <set_pwm+0x2c>
			htim->Instance->CCR2 += pwm;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	440a      	add	r2, r1
 800211c:	639a      	str	r2, [r3, #56]	; 0x38
			if (update == 0) {
				htim->Instance->CCR2 = pwm;
			}
		}
	}
}
 800211e:	e006      	b.n	800212e <set_pwm+0x3a>
			if (update == 0) {
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <set_pwm+0x3a>
				htim->Instance->CCR2 = pwm;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200000fc 	.word	0x200000fc

08002140 <prepare_data_sliding_gate>:

void prepare_data_sliding_gate(char operazione) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 800214c:	2261      	movs	r2, #97	; 0x61
 800214e:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 8002150:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	7053      	strb	r3, [r2, #1]
	send_byte[2] = cancello;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 8002158:	2265      	movs	r2, #101	; 0x65
 800215a:	709a      	strb	r2, [r3, #2]
	if (sliding_gate == CHIUSO) {
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <prepare_data_sliding_gate+0x7c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <prepare_data_sliding_gate+0x2c>
		send_byte[3] = '0';
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 8002166:	2230      	movs	r2, #48	; 0x30
 8002168:	70da      	strb	r2, [r3, #3]
 800216a:	e016      	b.n	800219a <prepare_data_sliding_gate+0x5a>
	} else {
		if (sliding_gate == IN_APERTURA) {
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <prepare_data_sliding_gate+0x7c>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d103      	bne.n	800217c <prepare_data_sliding_gate+0x3c>
			send_byte[3] = '1';
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 8002176:	2231      	movs	r2, #49	; 0x31
 8002178:	70da      	strb	r2, [r3, #3]
 800217a:	e00e      	b.n	800219a <prepare_data_sliding_gate+0x5a>
		} else {
			if (sliding_gate == APERTO) {
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <prepare_data_sliding_gate+0x7c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d103      	bne.n	800218c <prepare_data_sliding_gate+0x4c>
				send_byte[3] = '2';
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 8002186:	2232      	movs	r2, #50	; 0x32
 8002188:	70da      	strb	r2, [r3, #3]
 800218a:	e006      	b.n	800219a <prepare_data_sliding_gate+0x5a>
			} else {
				if (sliding_gate == IN_CHIUSURA) {
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <prepare_data_sliding_gate+0x7c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d102      	bne.n	800219a <prepare_data_sliding_gate+0x5a>
					send_byte[3] = '3';
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 8002196:	2233      	movs	r2, #51	; 0x33
 8002198:	70da      	strb	r2, [r3, #3]
				}
			}
		}
	}
	send_byte[4] = padding;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 800219c:	2273      	movs	r2, #115	; 0x73
 800219e:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 80021a2:	2273      	movs	r2, #115	; 0x73
 80021a4:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <prepare_data_sliding_gate+0x78>)
 80021a8:	2272      	movs	r2, #114	; 0x72
 80021aa:	719a      	strb	r2, [r3, #6]

	send_data();
 80021ac:	f000 f930 	bl	8002410 <send_data>
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000034c 	.word	0x2000034c
 80021bc:	20000340 	.word	0x20000340

080021c0 <prepare_data_internal_light>:

void prepare_data_internal_light(char operazione) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <prepare_data_internal_light+0x58>)
 80021cc:	2261      	movs	r2, #97	; 0x61
 80021ce:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <prepare_data_internal_light+0x58>)
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	7053      	strb	r3, [r2, #1]
	send_byte[2] = luce_interna;
 80021d6:	4b10      	ldr	r3, [pc, #64]	; (8002218 <prepare_data_internal_light+0x58>)
 80021d8:	2267      	movs	r2, #103	; 0x67
 80021da:	709a      	strb	r2, [r3, #2]
	if (internal_light == SPENTO) {
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <prepare_data_internal_light+0x5c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <prepare_data_internal_light+0x2c>
		send_byte[3] = '0';
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <prepare_data_internal_light+0x58>)
 80021e6:	2230      	movs	r2, #48	; 0x30
 80021e8:	70da      	strb	r2, [r3, #3]
 80021ea:	e006      	b.n	80021fa <prepare_data_internal_light+0x3a>
	} else {
		if (internal_light == ACCESO) {
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <prepare_data_internal_light+0x5c>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d102      	bne.n	80021fa <prepare_data_internal_light+0x3a>
			send_byte[3] = '1';
 80021f4:	4b08      	ldr	r3, [pc, #32]	; (8002218 <prepare_data_internal_light+0x58>)
 80021f6:	2231      	movs	r2, #49	; 0x31
 80021f8:	70da      	strb	r2, [r3, #3]
		}
	}
	send_byte[4] = padding;
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <prepare_data_internal_light+0x58>)
 80021fc:	2273      	movs	r2, #115	; 0x73
 80021fe:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <prepare_data_internal_light+0x58>)
 8002202:	2273      	movs	r2, #115	; 0x73
 8002204:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <prepare_data_internal_light+0x58>)
 8002208:	2272      	movs	r2, #114	; 0x72
 800220a:	719a      	strb	r2, [r3, #6]

	send_data();
 800220c:	f000 f900 	bl	8002410 <send_data>
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000034c 	.word	0x2000034c
 800221c:	2000033e 	.word	0x2000033e

08002220 <prepare_data_door>:

void prepare_data_door(char operazione) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <prepare_data_door+0x58>)
 800222c:	2261      	movs	r2, #97	; 0x61
 800222e:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <prepare_data_door+0x58>)
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	7053      	strb	r3, [r2, #1]
	send_byte[2] = porta;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <prepare_data_door+0x58>)
 8002238:	2269      	movs	r2, #105	; 0x69
 800223a:	709a      	strb	r2, [r3, #2]
	if (door == SERVO_CHIUSO) {
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <prepare_data_door+0x5c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <prepare_data_door+0x2c>
		send_byte[3] = '0';
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <prepare_data_door+0x58>)
 8002246:	2230      	movs	r2, #48	; 0x30
 8002248:	70da      	strb	r2, [r3, #3]
 800224a:	e006      	b.n	800225a <prepare_data_door+0x3a>
	} else {
		if (door == SERVO_APERTO) {
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <prepare_data_door+0x5c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d102      	bne.n	800225a <prepare_data_door+0x3a>
			send_byte[3] = '1';
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <prepare_data_door+0x58>)
 8002256:	2231      	movs	r2, #49	; 0x31
 8002258:	70da      	strb	r2, [r3, #3]
		}
	}
	send_byte[4] = padding;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <prepare_data_door+0x58>)
 800225c:	2273      	movs	r2, #115	; 0x73
 800225e:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <prepare_data_door+0x58>)
 8002262:	2273      	movs	r2, #115	; 0x73
 8002264:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <prepare_data_door+0x58>)
 8002268:	2272      	movs	r2, #114	; 0x72
 800226a:	719a      	strb	r2, [r3, #6]

	send_data();
 800226c:	f000 f8d0 	bl	8002410 <send_data>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000034c 	.word	0x2000034c
 800227c:	2000033f 	.word	0x2000033f

08002280 <prepare_data_alarm>:

void prepare_data_alarm(char operazione) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <prepare_data_alarm+0x68>)
 800228c:	2261      	movs	r2, #97	; 0x61
 800228e:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <prepare_data_alarm+0x68>)
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	7053      	strb	r3, [r2, #1]
	send_byte[2] = allarme;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <prepare_data_alarm+0x68>)
 8002298:	226a      	movs	r2, #106	; 0x6a
 800229a:	709a      	strb	r2, [r3, #2]
	if (alarm == ALARM_SPENTO) {
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <prepare_data_alarm+0x6c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <prepare_data_alarm+0x2c>
		send_byte[3] = '0';
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <prepare_data_alarm+0x68>)
 80022a6:	2230      	movs	r2, #48	; 0x30
 80022a8:	70da      	strb	r2, [r3, #3]
 80022aa:	e00e      	b.n	80022ca <prepare_data_alarm+0x4a>
	} else {
		if (alarm == ALARM_DISATTIVO) {
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <prepare_data_alarm+0x6c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d103      	bne.n	80022bc <prepare_data_alarm+0x3c>
			send_byte[3] = '1';
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <prepare_data_alarm+0x68>)
 80022b6:	2231      	movs	r2, #49	; 0x31
 80022b8:	70da      	strb	r2, [r3, #3]
 80022ba:	e006      	b.n	80022ca <prepare_data_alarm+0x4a>
		} else {
			if (alarm == ALARM_ATTIVO) {
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <prepare_data_alarm+0x6c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d102      	bne.n	80022ca <prepare_data_alarm+0x4a>
				send_byte[3] = '2';
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <prepare_data_alarm+0x68>)
 80022c6:	2232      	movs	r2, #50	; 0x32
 80022c8:	70da      	strb	r2, [r3, #3]
			}
		}
	}
	send_byte[4] = padding;
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <prepare_data_alarm+0x68>)
 80022cc:	2273      	movs	r2, #115	; 0x73
 80022ce:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <prepare_data_alarm+0x68>)
 80022d2:	2273      	movs	r2, #115	; 0x73
 80022d4:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <prepare_data_alarm+0x68>)
 80022d8:	2272      	movs	r2, #114	; 0x72
 80022da:	719a      	strb	r2, [r3, #6]

	send_data();
 80022dc:	f000 f898 	bl	8002410 <send_data>
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2000034c 	.word	0x2000034c
 80022ec:	20000032 	.word	0x20000032

080022f0 <prepare_data_configuration_sliding_gate>:

void prepare_data_configuration_sliding_gate(char operazione) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 80022fc:	2261      	movs	r2, #97	; 0x61
 80022fe:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 8002300:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	7053      	strb	r3, [r2, #1]
	send_byte[2] = configurazione_cancello;
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 8002308:	226c      	movs	r2, #108	; 0x6c
 800230a:	709a      	strb	r2, [r3, #2]
	send_byte[3] = time_open_sliding_gate + '0';
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <prepare_data_configuration_sliding_gate+0x4c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3330      	adds	r3, #48	; 0x30
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 8002318:	70da      	strb	r2, [r3, #3]
	send_byte[4] = padding;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 800231c:	2273      	movs	r2, #115	; 0x73
 800231e:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 8002322:	2273      	movs	r2, #115	; 0x73
 8002324:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 8002326:	4b04      	ldr	r3, [pc, #16]	; (8002338 <prepare_data_configuration_sliding_gate+0x48>)
 8002328:	2272      	movs	r2, #114	; 0x72
 800232a:	719a      	strb	r2, [r3, #6]

	send_data();
 800232c:	f000 f870 	bl	8002410 <send_data>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000034c 	.word	0x2000034c
 800233c:	20000020 	.word	0x20000020

08002340 <prepare_data_configuration_internal_light>:

void prepare_data_configuration_internal_light(char operazione) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 800234c:	2261      	movs	r2, #97	; 0x61
 800234e:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	7053      	strb	r3, [r2, #1]
	send_byte[2] = configurazione_luce_interna;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 8002358:	226e      	movs	r2, #110	; 0x6e
 800235a:	709a      	strb	r2, [r3, #2]
	send_byte[3] = (time_on_internal_light / 10) + '0';
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <prepare_data_configuration_internal_light+0x78>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <prepare_data_configuration_internal_light+0x7c>)
 8002362:	fb82 1203 	smull	r1, r2, r2, r3
 8002366:	1092      	asrs	r2, r2, #2
 8002368:	17db      	asrs	r3, r3, #31
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3330      	adds	r3, #48	; 0x30
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 8002374:	70da      	strb	r2, [r3, #3]
	send_byte[4] = (time_on_internal_light - (time_on_internal_light / 10) * 10) + '0';
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <prepare_data_configuration_internal_light+0x78>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <prepare_data_configuration_internal_light+0x7c>)
 800237c:	fb83 1302 	smull	r1, r3, r3, r2
 8002380:	1099      	asrs	r1, r3, #2
 8002382:	17d3      	asrs	r3, r2, #31
 8002384:	1ac9      	subs	r1, r1, r3
 8002386:	460b      	mov	r3, r1
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	1ad1      	subs	r1, r2, r3
 8002390:	b2cb      	uxtb	r3, r1
 8002392:	3330      	adds	r3, #48	; 0x30
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 8002398:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 800239c:	2273      	movs	r2, #115	; 0x73
 800239e:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <prepare_data_configuration_internal_light+0x74>)
 80023a2:	2272      	movs	r2, #114	; 0x72
 80023a4:	719a      	strb	r2, [r3, #6]

	send_data();
 80023a6:	f000 f833 	bl	8002410 <send_data>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	2000034c 	.word	0x2000034c
 80023b8:	20000028 	.word	0x20000028
 80023bc:	66666667 	.word	0x66666667

080023c0 <prepare_data_configuration_door>:

void prepare_data_configuration_door(char operazione) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	send_byte[0] = sof;
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023cc:	2261      	movs	r2, #97	; 0x61
 80023ce:	701a      	strb	r2, [r3, #0]
	send_byte[1] = operazione;
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	7053      	strb	r3, [r2, #1]
	send_byte[2] = configurazione_porta;
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023d8:	226f      	movs	r2, #111	; 0x6f
 80023da:	709a      	strb	r2, [r3, #2]
	send_byte[3] = time_open_door + '0';
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <prepare_data_configuration_door+0x4c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3330      	adds	r3, #48	; 0x30
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023e8:	70da      	strb	r2, [r3, #3]
	send_byte[4] = padding;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023ec:	2273      	movs	r2, #115	; 0x73
 80023ee:	711a      	strb	r2, [r3, #4]
	send_byte[5] = padding;
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023f2:	2273      	movs	r2, #115	; 0x73
 80023f4:	715a      	strb	r2, [r3, #5]
	send_byte[6] = eof;
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <prepare_data_configuration_door+0x48>)
 80023f8:	2272      	movs	r2, #114	; 0x72
 80023fa:	719a      	strb	r2, [r3, #6]

	send_data();
 80023fc:	f000 f808 	bl	8002410 <send_data>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	2000034c 	.word	0x2000034c
 800240c:	20000024 	.word	0x20000024

08002410 <send_data>:

void send_data() {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, send_byte, num_byte, 1000);
 8002414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002418:	2207      	movs	r2, #7
 800241a:	4903      	ldr	r1, [pc, #12]	; (8002428 <send_data+0x18>)
 800241c:	4803      	ldr	r0, [pc, #12]	; (800242c <send_data+0x1c>)
 800241e:	f004 fe02 	bl	8007026 <HAL_UART_Transmit>
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000034c 	.word	0x2000034c
 800242c:	200002ac 	.word	0x200002ac

08002430 <process_data>:

int process_data(char c) {
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	int ok = false;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
	switch(uart) {
 800243e:	4b34      	ldr	r3, [pc, #208]	; (8002510 <process_data+0xe0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b06      	cmp	r3, #6
 8002444:	d85c      	bhi.n	8002500 <process_data+0xd0>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <process_data+0x1c>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	08002469 	.word	0x08002469
 8002450:	0800247b 	.word	0x0800247b
 8002454:	0800248d 	.word	0x0800248d
 8002458:	0800249f 	.word	0x0800249f
 800245c:	080024b1 	.word	0x080024b1
 8002460:	080024c3 	.word	0x080024c3
 8002464:	080024d5 	.word	0x080024d5
	case IN_ATTESA_SOF:
		if (c == sof) {
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b61      	cmp	r3, #97	; 0x61
 800246c:	d13b      	bne.n	80024e6 <process_data+0xb6>
			uart = IN_ATTESA_OPERAZIONE;
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <process_data+0xe0>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
			ok = true;
 8002474:	2301      	movs	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
		}
		break;
 8002478:	e035      	b.n	80024e6 <process_data+0xb6>
	case IN_ATTESA_OPERAZIONE:
		if (c == get_info) {
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2b62      	cmp	r3, #98	; 0x62
 800247e:	d134      	bne.n	80024ea <process_data+0xba>
			uart = IN_ATTESA_IDENTIFICATIVO;
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <process_data+0xe0>)
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
			ok = true;
 8002486:	2301      	movs	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
		}
		break;
 800248a:	e02e      	b.n	80024ea <process_data+0xba>
	case IN_ATTESA_IDENTIFICATIVO:
		if (c == padding) {
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	2b73      	cmp	r3, #115	; 0x73
 8002490:	d12d      	bne.n	80024ee <process_data+0xbe>
			ok = true;
 8002492:	2301      	movs	r3, #1
 8002494:	60fb      	str	r3, [r7, #12]
			uart = IN_ATTESA_VALORE_1;
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <process_data+0xe0>)
 8002498:	2203      	movs	r2, #3
 800249a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800249c:	e027      	b.n	80024ee <process_data+0xbe>
	case IN_ATTESA_VALORE_1:
		if (c == padding) {
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b73      	cmp	r3, #115	; 0x73
 80024a2:	d126      	bne.n	80024f2 <process_data+0xc2>
			ok = true;
 80024a4:	2301      	movs	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
			uart = IN_ATTESA_VALORE_2;
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <process_data+0xe0>)
 80024aa:	2204      	movs	r2, #4
 80024ac:	701a      	strb	r2, [r3, #0]
		}
		break;
 80024ae:	e020      	b.n	80024f2 <process_data+0xc2>
	case IN_ATTESA_VALORE_2:
		if (c == padding) {
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b73      	cmp	r3, #115	; 0x73
 80024b4:	d11f      	bne.n	80024f6 <process_data+0xc6>
			ok = true;
 80024b6:	2301      	movs	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
			uart = IN_ATTESA_VALORE_3;
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <process_data+0xe0>)
 80024bc:	2205      	movs	r2, #5
 80024be:	701a      	strb	r2, [r3, #0]
		}
		break;
 80024c0:	e019      	b.n	80024f6 <process_data+0xc6>
	case IN_ATTESA_VALORE_3:
		if (c == padding) {
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b73      	cmp	r3, #115	; 0x73
 80024c6:	d118      	bne.n	80024fa <process_data+0xca>
			ok = true;
 80024c8:	2301      	movs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
			uart = IN_ATTESA_EOF;
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <process_data+0xe0>)
 80024ce:	2206      	movs	r2, #6
 80024d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80024d2:	e012      	b.n	80024fa <process_data+0xca>
	case IN_ATTESA_EOF:
		if (c == eof) {
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	2b72      	cmp	r3, #114	; 0x72
 80024d8:	d111      	bne.n	80024fe <process_data+0xce>
			uart = IN_ATTESA_SOF;
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <process_data+0xe0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
			ok = true;
 80024e0:	2301      	movs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
		}
		break;
 80024e4:	e00b      	b.n	80024fe <process_data+0xce>
		break;
 80024e6:	bf00      	nop
 80024e8:	e00a      	b.n	8002500 <process_data+0xd0>
		break;
 80024ea:	bf00      	nop
 80024ec:	e008      	b.n	8002500 <process_data+0xd0>
		break;
 80024ee:	bf00      	nop
 80024f0:	e006      	b.n	8002500 <process_data+0xd0>
		break;
 80024f2:	bf00      	nop
 80024f4:	e004      	b.n	8002500 <process_data+0xd0>
		break;
 80024f6:	bf00      	nop
 80024f8:	e002      	b.n	8002500 <process_data+0xd0>
		break;
 80024fa:	bf00      	nop
 80024fc:	e000      	b.n	8002500 <process_data+0xd0>
		break;
 80024fe:	bf00      	nop
	}
	return ok;
 8002500:	68fb      	ldr	r3, [r7, #12]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000349 	.word	0x20000349

08002514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800251a:	f001 fafb 	bl	8003b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800251e:	f000 f89b 	bl	8002658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002522:	f000 fb6f 	bl	8002c04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002526:	f000 fb43 	bl	8002bb0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800252a:	f000 f903 	bl	8002734 <MX_I2C1_Init>
  MX_TIM1_Init();
 800252e:	f000 f92f 	bl	8002790 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002532:	f000 f9a1 	bl	8002878 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002536:	f000 f9f9 	bl	800292c <MX_TIM4_Init>
  MX_TIM5_Init();
 800253a:	f000 fa45 	bl	80029c8 <MX_TIM5_Init>
  MX_TIM9_Init();
 800253e:	f000 fa91 	bl	8002a64 <MX_TIM9_Init>
  MX_TIM10_Init();
 8002542:	f000 fac9 	bl	8002ad8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002546:	f000 faeb 	bl	8002b20 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	init_peripherals();
 800254a:	f000 fc97 	bl	8002e7c <init_peripherals>
	HAL_GPIO_WritePin(LED_ALARM_GPIO_Port, LED_ALARM_Pin, GPIO_PIN_SET);
 800254e:	2201      	movs	r2, #1
 8002550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002554:	4835      	ldr	r0, [pc, #212]	; (800262c <main+0x118>)
 8002556:	f001 feb3 	bl	80042c0 <HAL_GPIO_WritePin>
	set_display_state();
 800255a:	f7fe fea1 	bl	80012a0 <set_display_state>
	HAL_UART_Receive_IT(&huart2, &data_received, 1);
 800255e:	2201      	movs	r2, #1
 8002560:	4933      	ldr	r1, [pc, #204]	; (8002630 <main+0x11c>)
 8002562:	4834      	ldr	r0, [pc, #208]	; (8002634 <main+0x120>)
 8002564:	f004 fdf1 	bl	800714a <HAL_UART_Receive_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		read_keypad();
 8002568:	f7fe ff20 	bl	80013ac <read_keypad>
		if (HAL_GPIO_ReadPin(PIR_INTERNAL_LIGHT_GPIO_Port, PIR_INTERNAL_LIGHT_Pin) == GPIO_PIN_SET) {
 800256c:	2102      	movs	r1, #2
 800256e:	4832      	ldr	r0, [pc, #200]	; (8002638 <main+0x124>)
 8002570:	f001 fe8e 	bl	8004290 <HAL_GPIO_ReadPin>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d12e      	bne.n	80025d8 <main+0xc4>
			led_on();
 800257a:	f7ff fc97 	bl	8001eac <led_on>
			if (alarm == ALARM_DISATTIVO) {
 800257e:	4b2f      	ldr	r3, [pc, #188]	; (800263c <main+0x128>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d128      	bne.n	80025d8 <main+0xc4>
				alarm = ALARM_ATTIVO;
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <main+0x128>)
 8002588:	2202      	movs	r2, #2
 800258a:	701a      	strb	r2, [r3, #0]
				prepare_data_alarm(send_value);
 800258c:	2063      	movs	r0, #99	; 0x63
 800258e:	f7ff fe77 	bl	8002280 <prepare_data_alarm>
				HAL_GPIO_WritePin(ACTIVE_BUZZER_GPIO_Port, ACTIVE_BUZZER_Pin, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2101      	movs	r1, #1
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <main+0x12c>)
 8002598:	f001 fe92 	bl	80042c0 <HAL_GPIO_WritePin>
				if (numpad != INATTIVO) {
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <main+0x130>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d016      	beq.n	80025d2 <main+0xbe>
					index_configurazione_inserita = 0;
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <main+0x134>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < data_lenght; i++) {
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	e007      	b.n	80025c0 <main+0xac>
						configurazione_inserita[i] = '\0';
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <main+0x138>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < data_lenght; i++) {
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3301      	adds	r3, #1
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	ddf4      	ble.n	80025b0 <main+0x9c>
					}
					HAL_GPIO_WritePin(LED_CONFIGURATION_GPIO_Port, LED_CONFIGURATION_Pin, GPIO_PIN_RESET);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2104      	movs	r1, #4
 80025ca:	4821      	ldr	r0, [pc, #132]	; (8002650 <main+0x13c>)
 80025cc:	f001 fe78 	bl	80042c0 <HAL_GPIO_WritePin>
 80025d0:	e002      	b.n	80025d8 <main+0xc4>
				} else {
					numpad = ALLARME;
 80025d2:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <main+0x130>)
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (numpad == INATTIVO) {
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <main+0x130>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d110      	bne.n	8002602 <main+0xee>
			if (HAL_GetTick() - start_timer_display >= PERIOD_DISPLAY_INATTIVO) {
 80025e0:	f001 fafe 	bl	8003be0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <main+0x140>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025f0:	d3ba      	bcc.n	8002568 <main+0x54>
				start_timer_display = HAL_GetTick();
 80025f2:	f001 faf5 	bl	8003be0 <HAL_GetTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4a16      	ldr	r2, [pc, #88]	; (8002654 <main+0x140>)
 80025fa:	6013      	str	r3, [r2, #0]
				set_display_state();
 80025fc:	f7fe fe50 	bl	80012a0 <set_display_state>
 8002600:	e7b2      	b.n	8002568 <main+0x54>
			}
		} else {
			if (numpad == END_CONFIGURAZIONE) {
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <main+0x130>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b06      	cmp	r3, #6
 8002608:	d1ae      	bne.n	8002568 <main+0x54>
				if (HAL_GetTick() - start_timer_display >= PERIOD_DISPLAY_CONFIGURAZIONE) {
 800260a:	f001 fae9 	bl	8003be0 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <main+0x140>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800261a:	d3a5      	bcc.n	8002568 <main+0x54>
					start_timer_display = HAL_GetTick();
 800261c:	f001 fae0 	bl	8003be0 <HAL_GetTick>
 8002620:	4603      	mov	r3, r0
 8002622:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <main+0x140>)
 8002624:	6013      	str	r3, [r2, #0]
					switch_to_inattivo();
 8002626:	f7ff f929 	bl	800187c <switch_to_inattivo>
		read_keypad();
 800262a:	e79d      	b.n	8002568 <main+0x54>
 800262c:	40020800 	.word	0x40020800
 8002630:	20000360 	.word	0x20000360
 8002634:	200002ac 	.word	0x200002ac
 8002638:	40020000 	.word	0x40020000
 800263c:	20000032 	.word	0x20000032
 8002640:	40020400 	.word	0x40020400
 8002644:	2000033d 	.word	0x2000033d
 8002648:	20000300 	.word	0x20000300
 800264c:	200002fc 	.word	0x200002fc
 8002650:	40020c00 	.word	0x40020c00
 8002654:	200002f0 	.word	0x200002f0

08002658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b094      	sub	sp, #80	; 0x50
 800265c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	2230      	movs	r2, #48	; 0x30
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f005 fd2c 	bl	80080c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	4b2a      	ldr	r3, [pc, #168]	; (800272c <SystemClock_Config+0xd4>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	4a29      	ldr	r2, [pc, #164]	; (800272c <SystemClock_Config+0xd4>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268a:	6413      	str	r3, [r2, #64]	; 0x40
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <SystemClock_Config+0xd4>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <SystemClock_Config+0xd8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <SystemClock_Config+0xd8>)
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b20      	ldr	r3, [pc, #128]	; (8002730 <SystemClock_Config+0xd8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80026b8:	2303      	movs	r3, #3
 80026ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c2:	2301      	movs	r3, #1
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026c6:	2310      	movs	r3, #16
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ca:	2302      	movs	r3, #2
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026ce:	2300      	movs	r3, #0
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026d2:	2310      	movs	r3, #16
 80026d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026d6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80026dc:	2304      	movs	r3, #4
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026e0:	2307      	movs	r3, #7
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e4:	f107 0320 	add.w	r3, r7, #32
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 fa67 	bl	8004bbc <HAL_RCC_OscConfig>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80026f4:	f000 fec2 	bl	800347c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026f8:	230f      	movs	r3, #15
 80026fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026fc:	2302      	movs	r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	2102      	movs	r1, #2
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fcc9 	bl	80050ac <HAL_RCC_ClockConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002720:	f000 feac 	bl	800347c <Error_Handler>
  }
}
 8002724:	bf00      	nop
 8002726:	3750      	adds	r7, #80	; 0x50
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000

08002734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <MX_I2C1_Init+0x50>)
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <MX_I2C1_Init+0x54>)
 800273c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_I2C1_Init+0x50>)
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <MX_I2C1_Init+0x58>)
 8002742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <MX_I2C1_Init+0x50>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_I2C1_Init+0x50>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_I2C1_Init+0x50>)
 8002752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <MX_I2C1_Init+0x50>)
 800275a:	2200      	movs	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_I2C1_Init+0x50>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <MX_I2C1_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_I2C1_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <MX_I2C1_Init+0x50>)
 8002772:	f001 fdd7 	bl	8004324 <HAL_I2C_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800277c:	f000 fe7e 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000060 	.word	0x20000060
 8002788:	40005400 	.word	0x40005400
 800278c:	000186a0 	.word	0x000186a0

08002790 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002796:	f107 0318 	add.w	r3, r7, #24
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]
 80027a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027ae:	463b      	mov	r3, r7
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ba:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027bc:	4a2d      	ldr	r2, [pc, #180]	; (8002874 <MX_TIM1_Init+0xe4>)
 80027be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80027c0:	4b2b      	ldr	r3, [pc, #172]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027c2:	2253      	movs	r2, #83	; 0x53
 80027c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027da:	4b25      	ldr	r3, [pc, #148]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027e6:	4822      	ldr	r0, [pc, #136]	; (8002870 <MX_TIM1_Init+0xe0>)
 80027e8:	f002 ff6e 	bl	80056c8 <HAL_TIM_Base_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80027f2:	f000 fe43 	bl	800347c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027fc:	f107 0318 	add.w	r3, r7, #24
 8002800:	4619      	mov	r1, r3
 8002802:	481b      	ldr	r0, [pc, #108]	; (8002870 <MX_TIM1_Init+0xe0>)
 8002804:	f003 fe2c 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800280e:	f000 fe35 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002812:	4817      	ldr	r0, [pc, #92]	; (8002870 <MX_TIM1_Init+0xe0>)
 8002814:	f003 f99c 	bl	8005b50 <HAL_TIM_IC_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800281e:	f000 fe2d 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	4619      	mov	r1, r3
 8002830:	480f      	ldr	r0, [pc, #60]	; (8002870 <MX_TIM1_Init+0xe0>)
 8002832:	f004 fb29 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800283c:	f000 fe1e 	bl	800347c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002844:	2301      	movs	r3, #1
 8002846:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002850:	463b      	mov	r3, r7
 8002852:	2200      	movs	r2, #0
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <MX_TIM1_Init+0xe0>)
 8002858:	f003 fca4 	bl	80061a4 <HAL_TIM_IC_ConfigChannel>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002862:	f000 fe0b 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200000b4 	.word	0x200000b4
 8002874:	40010000 	.word	0x40010000

08002878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287e:	f107 0320 	add.w	r3, r7, #32
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]
 8002892:	60da      	str	r2, [r3, #12]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	615a      	str	r2, [r3, #20]
 8002898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <MX_TIM3_Init+0xac>)
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <MX_TIM3_Init+0xb0>)
 800289e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <MX_TIM3_Init+0xac>)
 80028a2:	2253      	movs	r2, #83	; 0x53
 80028a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_TIM3_Init+0xac>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_TIM3_Init+0xac>)
 80028ae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80028b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <MX_TIM3_Init+0xac>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <MX_TIM3_Init+0xac>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028c0:	4818      	ldr	r0, [pc, #96]	; (8002924 <MX_TIM3_Init+0xac>)
 80028c2:	f002 ffe2 	bl	800588a <HAL_TIM_PWM_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80028cc:	f000 fdd6 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028d8:	f107 0320 	add.w	r3, r7, #32
 80028dc:	4619      	mov	r1, r3
 80028de:	4811      	ldr	r0, [pc, #68]	; (8002924 <MX_TIM3_Init+0xac>)
 80028e0:	f004 fad2 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80028ea:	f000 fdc7 	bl	800347c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ee:	2360      	movs	r3, #96	; 0x60
 80028f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2204      	movs	r2, #4
 8002902:	4619      	mov	r1, r3
 8002904:	4807      	ldr	r0, [pc, #28]	; (8002924 <MX_TIM3_Init+0xac>)
 8002906:	f003 fce9 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002910:	f000 fdb4 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002914:	4803      	ldr	r0, [pc, #12]	; (8002924 <MX_TIM3_Init+0xac>)
 8002916:	f000 ff85 	bl	8003824 <HAL_TIM_MspPostInit>

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	200000fc 	.word	0x200000fc
 8002928:	40000400 	.word	0x40000400

0800292c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0308 	add.w	r3, r7, #8
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	463b      	mov	r3, r7
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002948:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <MX_TIM4_Init+0x94>)
 800294a:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <MX_TIM4_Init+0x98>)
 800294c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002950:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002954:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <MX_TIM4_Init+0x94>)
 800295e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002962:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <MX_TIM4_Init+0x94>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002970:	4813      	ldr	r0, [pc, #76]	; (80029c0 <MX_TIM4_Init+0x94>)
 8002972:	f002 fea9 	bl	80056c8 <HAL_TIM_Base_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800297c:	f000 fd7e 	bl	800347c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002986:	f107 0308 	add.w	r3, r7, #8
 800298a:	4619      	mov	r1, r3
 800298c:	480c      	ldr	r0, [pc, #48]	; (80029c0 <MX_TIM4_Init+0x94>)
 800298e:	f003 fd67 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002998:	f000 fd70 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_TIM4_Init+0x94>)
 80029aa:	f004 fa6d 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80029b4:	f000 fd62 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029b8:	bf00      	nop
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000144 	.word	0x20000144
 80029c4:	40000800 	.word	0x40000800

080029c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	463b      	mov	r3, r7
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80029e4:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <MX_TIM5_Init+0x90>)
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <MX_TIM5_Init+0x94>)
 80029e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80029ea:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_TIM5_Init+0x90>)
 80029ec:	2253      	movs	r2, #83	; 0x53
 80029ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <MX_TIM5_Init+0x90>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000000-1;
 80029f6:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <MX_TIM5_Init+0x90>)
 80029f8:	4a19      	ldr	r2, [pc, #100]	; (8002a60 <MX_TIM5_Init+0x98>)
 80029fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <MX_TIM5_Init+0x90>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <MX_TIM5_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002a08:	4813      	ldr	r0, [pc, #76]	; (8002a58 <MX_TIM5_Init+0x90>)
 8002a0a:	f002 fe5d 	bl	80056c8 <HAL_TIM_Base_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8002a14:	f000 fd32 	bl	800347c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	4619      	mov	r1, r3
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <MX_TIM5_Init+0x90>)
 8002a26:	f003 fd1b 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8002a30:	f000 fd24 	bl	800347c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a3c:	463b      	mov	r3, r7
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_TIM5_Init+0x90>)
 8002a42:	f004 fa21 	bl	8006e88 <HAL_TIMEx_MasterConfigSynchronization>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002a4c:	f000 fd16 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000018c 	.word	0x2000018c
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	0098967f 	.word	0x0098967f

08002a64 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a78:	4a16      	ldr	r2, [pc, #88]	; (8002ad4 <MX_TIM9_Init+0x70>)
 8002a7a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a7e:	2253      	movs	r2, #83	; 0x53
 8002a80:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1220-1;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a8a:	f240 42c3 	movw	r2, #1219	; 0x4c3
 8002a8e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002a9c:	480c      	ldr	r0, [pc, #48]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002a9e:	f002 fe13 	bl	80056c8 <HAL_TIM_Base_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002aa8:	f000 fce8 	bl	800347c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <MX_TIM9_Init+0x6c>)
 8002ab8:	f003 fcd2 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002ac2:	f000 fcdb 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	200001d4 	.word	0x200001d4
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <MX_TIM10_Init+0x44>)
 8002ae0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8400-1;
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002ae4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002ae8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 60000-1;
 8002af0:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002af2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002af6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_TIM10_Init+0x40>)
 8002b06:	f002 fddf 	bl	80056c8 <HAL_TIM_Base_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002b10:	f000 fcb4 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2000021c 	.word	0x2000021c
 8002b1c:	40014400 	.word	0x40014400

08002b20 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b26:	463b      	mov	r3, r7
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b34:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <MX_TIM11_Init+0x8c>)
 8002b36:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b3a:	2253      	movs	r2, #83	; 0x53
 8002b3c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b5a:	f002 fdb5 	bl	80056c8 <HAL_TIM_Base_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8002b64:	f000 fc8a 	bl	800347c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8002b68:	480f      	ldr	r0, [pc, #60]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b6a:	f002 fff1 	bl	8005b50 <HAL_TIM_IC_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8002b74:	f000 fc82 	bl	800347c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b88:	463b      	mov	r3, r7
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <MX_TIM11_Init+0x88>)
 8002b90:	f003 fb08 	bl	80061a4 <HAL_TIM_IC_ConfigChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8002b9a:	f000 fc6f 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000264 	.word	0x20000264
 8002bac:	40014800 	.word	0x40014800

08002bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <MX_USART2_UART_Init+0x50>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002be6:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MX_USART2_UART_Init+0x4c>)
 8002be8:	f004 f9d0 	bl	8006f8c <HAL_UART_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bf2:	f000 fc43 	bl	800347c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200002ac 	.word	0x200002ac
 8002c00:	40004400 	.word	0x40004400

08002c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b92      	ldr	r3, [pc, #584]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a91      	ldr	r2, [pc, #580]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b8f      	ldr	r3, [pc, #572]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b8b      	ldr	r3, [pc, #556]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a8a      	ldr	r2, [pc, #552]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b88      	ldr	r3, [pc, #544]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4b84      	ldr	r3, [pc, #528]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a83      	ldr	r2, [pc, #524]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	4b7d      	ldr	r3, [pc, #500]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a7c      	ldr	r2, [pc, #496]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b7a      	ldr	r3, [pc, #488]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4b76      	ldr	r3, [pc, #472]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	4a75      	ldr	r2, [pc, #468]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9a:	4b73      	ldr	r3, [pc, #460]	; (8002e68 <MX_GPIO_Init+0x264>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NUMPAD_R2_Pin|NUMPAD_R3_Pin|HC_SR04_OPEN_POSITION_TRIGGER_Pin|LED_INTERNAL_LIGHT_Pin
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 51e7 	mov.w	r1, #7392	; 0x1ce0
 8002cac:	486f      	ldr	r0, [pc, #444]	; (8002e6c <MX_GPIO_Init+0x268>)
 8002cae:	f001 fb07 	bl	80042c0 <HAL_GPIO_WritePin>
                          |LED_ALARM_Pin|LED_SLIDING_GATE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACTIVE_BUZZER_Pin|STEPPER_MOTOR_IN4_Pin|STEPPER_MOTOR_IN1_Pin|STEPPER_MOTOR_IN2_Pin
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f24e 0123 	movw	r1, #57379	; 0xe023
 8002cb8:	486d      	ldr	r0, [pc, #436]	; (8002e70 <MX_GPIO_Init+0x26c>)
 8002cba:	f001 fb01 	bl	80042c0 <HAL_GPIO_WritePin>
                          |STEPPER_MOTOR_IN3_Pin|HC_SR04_CLOSE_POSITION_TRIGGER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NUMPAD_R0_Pin|NUMPAD_R1_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002cc4:	486b      	ldr	r0, [pc, #428]	; (8002e74 <MX_GPIO_Init+0x270>)
 8002cc6:	f001 fafb 	bl	80042c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CONFIGURATION_GPIO_Port, LED_CONFIGURATION_Pin, GPIO_PIN_RESET);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2104      	movs	r1, #4
 8002cce:	486a      	ldr	r0, [pc, #424]	; (8002e78 <MX_GPIO_Init+0x274>)
 8002cd0:	f001 faf6 	bl	80042c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_CONFIGURATION_Pin BUTTON_SLIDING_GATE_FRONT_Pin BUTTON_SLIDING_GATE_RETRO_Pin BUTTON_DOOR_FRONT_Pin */
  GPIO_InitStruct.Pin = BUTTON_CONFIGURATION_Pin|BUTTON_SLIDING_GATE_FRONT_Pin|BUTTON_SLIDING_GATE_RETRO_Pin|BUTTON_DOOR_FRONT_Pin;
 8002cd4:	230f      	movs	r3, #15
 8002cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4860      	ldr	r0, [pc, #384]	; (8002e6c <MX_GPIO_Init+0x268>)
 8002cea:	f001 f94d 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIR_INTERNAL_LIGHT_Pin */
  GPIO_InitStruct.Pin = PIR_INTERNAL_LIGHT_Pin;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIR_INTERNAL_LIGHT_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	485c      	ldr	r0, [pc, #368]	; (8002e74 <MX_GPIO_Init+0x270>)
 8002d02:	f001 f941 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_DOOR_RETRO_Pin */
  GPIO_InitStruct.Pin = BUTTON_DOOR_RETRO_Pin;
 8002d06:	2310      	movs	r3, #16
 8002d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d10:	2302      	movs	r3, #2
 8002d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_DOOR_RETRO_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4856      	ldr	r0, [pc, #344]	; (8002e74 <MX_GPIO_Init+0x270>)
 8002d1c:	f001 f934 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : NUMPAD_C3_Pin */
  GPIO_InitStruct.Pin = NUMPAD_C3_Pin;
 8002d20:	2340      	movs	r3, #64	; 0x40
 8002d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUMPAD_C3_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	4850      	ldr	r0, [pc, #320]	; (8002e74 <MX_GPIO_Init+0x270>)
 8002d34:	f001 f928 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUMPAD_R2_Pin NUMPAD_R3_Pin HC_SR04_OPEN_POSITION_TRIGGER_Pin LED_INTERNAL_LIGHT_Pin
                           LED_ALARM_Pin LED_SLIDING_GATE_Pin */
  GPIO_InitStruct.Pin = NUMPAD_R2_Pin|NUMPAD_R3_Pin|HC_SR04_OPEN_POSITION_TRIGGER_Pin|LED_INTERNAL_LIGHT_Pin
 8002d38:	f44f 53e7 	mov.w	r3, #7392	; 0x1ce0
 8002d3c:	617b      	str	r3, [r7, #20]
                          |LED_ALARM_Pin|LED_SLIDING_GATE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4846      	ldr	r0, [pc, #280]	; (8002e6c <MX_GPIO_Init+0x268>)
 8002d52:	f001 f919 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTIVE_BUZZER_Pin STEPPER_MOTOR_IN4_Pin STEPPER_MOTOR_IN1_Pin STEPPER_MOTOR_IN2_Pin
                           STEPPER_MOTOR_IN3_Pin HC_SR04_CLOSE_POSITION_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ACTIVE_BUZZER_Pin|STEPPER_MOTOR_IN4_Pin|STEPPER_MOTOR_IN1_Pin|STEPPER_MOTOR_IN2_Pin
 8002d56:	f24e 0323 	movw	r3, #57379	; 0xe023
 8002d5a:	617b      	str	r3, [r7, #20]
                          |STEPPER_MOTOR_IN3_Pin|HC_SR04_CLOSE_POSITION_TRIGGER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4840      	ldr	r0, [pc, #256]	; (8002e70 <MX_GPIO_Init+0x26c>)
 8002d70:	f001 f90a 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_INTERRUPTER_Pin */
  GPIO_InitStruct.Pin = PHOTO_INTERRUPTER_Pin;
 8002d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_INTERRUPTER_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4839      	ldr	r0, [pc, #228]	; (8002e70 <MX_GPIO_Init+0x26c>)
 8002d8c:	f001 f8fc 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUMPAD_C0_Pin NUMPAD_C1_Pin */
  GPIO_InitStruct.Pin = NUMPAD_C0_Pin|NUMPAD_C1_Pin;
 8002d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4831      	ldr	r0, [pc, #196]	; (8002e6c <MX_GPIO_Init+0x268>)
 8002da6:	f001 f8ef 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUMPAD_R0_Pin NUMPAD_R1_Pin */
  GPIO_InitStruct.Pin = NUMPAD_R0_Pin|NUMPAD_R1_Pin;
 8002daa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2300      	movs	r3, #0
 8002dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	482c      	ldr	r0, [pc, #176]	; (8002e74 <MX_GPIO_Init+0x270>)
 8002dc4:	f001 f8e0 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CONFIGURATION_Pin */
  GPIO_InitStruct.Pin = LED_CONFIGURATION_Pin;
 8002dc8:	2304      	movs	r3, #4
 8002dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_CONFIGURATION_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4826      	ldr	r0, [pc, #152]	; (8002e78 <MX_GPIO_Init+0x274>)
 8002de0:	f001 f8d2 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : NUMPAD_C2_Pin */
  GPIO_InitStruct.Pin = NUMPAD_C2_Pin;
 8002de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NUMPAD_C2_GPIO_Port, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	481d      	ldr	r0, [pc, #116]	; (8002e70 <MX_GPIO_Init+0x26c>)
 8002dfa:	f001 f8c5 	bl	8003f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	2006      	movs	r0, #6
 8002e04:	f000 fff7 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e08:	2006      	movs	r0, #6
 8002e0a:	f001 f810 	bl	8003e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	2007      	movs	r0, #7
 8002e14:	f000 ffef 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e18:	2007      	movs	r0, #7
 8002e1a:	f001 f808 	bl	8003e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	2008      	movs	r0, #8
 8002e24:	f000 ffe7 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002e28:	2008      	movs	r0, #8
 8002e2a:	f001 f800 	bl	8003e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2009      	movs	r0, #9
 8002e34:	f000 ffdf 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002e38:	2009      	movs	r0, #9
 8002e3a:	f000 fff8 	bl	8003e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	200a      	movs	r0, #10
 8002e44:	f000 ffd7 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002e48:	200a      	movs	r0, #10
 8002e4a:	f000 fff0 	bl	8003e2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	2028      	movs	r0, #40	; 0x28
 8002e54:	f000 ffcf 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e58:	2028      	movs	r0, #40	; 0x28
 8002e5a:	f000 ffe8 	bl	8003e2e <HAL_NVIC_EnableIRQ>

}
 8002e5e:	bf00      	nop
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020400 	.word	0x40020400
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020c00 	.word	0x40020c00

08002e7c <init_peripherals>:

/* USER CODE BEGIN 4 */
void init_peripherals() {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	init_lcd();
 8002e80:	f000 f806 	bl	8002e90 <init_lcd>
	init_keypad();
 8002e84:	f000 f810 	bl	8002ea8 <init_keypad>
	init_step_motor();
 8002e88:	f000 f814 	bl	8002eb4 <init_step_motor>
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <init_lcd>:

void init_lcd() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	lcd_init();
 8002e94:	f7fe f992 	bl	80011bc <lcd_init>
	lcd_clear();
 8002e98:	f7fe f95a 	bl	8001150 <lcd_clear>
	lcd_put_cur(0, 0);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fe f96d 	bl	800117e <lcd_put_cur>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <init_keypad>:

void init_keypad() {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	KeyPad_Init();
 8002eac:	f7fd ff04 	bl	8000cb8 <KeyPad_Init>
}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <init_step_motor>:

void init_step_motor() {
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	stepsperrev = 4096;
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <init_step_motor+0x68>)
 8002eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ebe:	601a      	str	r2, [r3, #0]
	rpm = 12;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <init_step_motor+0x6c>)
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	601a      	str	r2, [r3, #0]
	angle = 22.5;
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <init_step_motor+0x70>)
 8002ec8:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <init_step_motor+0x74>)
 8002eca:	601a      	str	r2, [r3, #0]
	numofsequence = 512;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <init_step_motor+0x78>)
 8002ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
	angleperseq = 360.0 / (float)numofsequence;
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <init_step_motor+0x78>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	ee07 3a90 	vmov	s15, r3
 8002edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002f30 <init_step_motor+0x7c>
 8002ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <init_step_motor+0x80>)
 8002eea:	edc3 7a00 	vstr	s15, [r3]
	numberofsequences = angle / angleperseq;
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <init_step_motor+0x70>)
 8002ef0:	edd3 6a00 	vldr	s13, [r3]
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <init_step_motor+0x80>)
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f02:	ee17 2a90 	vmov	r2, s15
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <init_step_motor+0x84>)
 8002f08:	601a      	str	r2, [r3, #0]
	sliding_gate = CHIUSO;
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <init_step_motor+0x88>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000304 	.word	0x20000304
 8002f20:	20000314 	.word	0x20000314
 8002f24:	20000310 	.word	0x20000310
 8002f28:	41b40000 	.word	0x41b40000
 8002f2c:	20000308 	.word	0x20000308
 8002f30:	43b40000 	.word	0x43b40000
 8002f34:	2000030c 	.word	0x2000030c
 8002f38:	20000318 	.word	0x20000318
 8002f3c:	20000340 	.word	0x20000340

08002f40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BUTTON_DOOR_FRONT_Pin ||
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d002      	beq.n	8002f56 <HAL_GPIO_EXTI_Callback+0x16>
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d102      	bne.n	8002f5c <HAL_GPIO_EXTI_Callback+0x1c>
			GPIO_Pin == BUTTON_DOOR_RETRO_Pin) {
		open_door();
 8002f56:	f7fe fca7 	bl	80018a8 <open_door>
 8002f5a:	e02a      	b.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
	} else {
		if (GPIO_Pin == BUTTON_SLIDING_GATE_FRONT_Pin ||
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d002      	beq.n	8002f68 <HAL_GPIO_EXTI_Callback+0x28>
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d106      	bne.n	8002f76 <HAL_GPIO_EXTI_Callback+0x36>
				GPIO_Pin == BUTTON_SLIDING_GATE_RETRO_Pin) {
			if (sliding_gate == CHIUSO) {
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <HAL_GPIO_EXTI_Callback+0x7c>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d120      	bne.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
				open_sliding_gate();
 8002f70:	f7fe fe72 	bl	8001c58 <open_sliding_gate>
			if (sliding_gate == CHIUSO) {
 8002f74:	e01d      	b.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
			}
		} else {
			if (GPIO_Pin == BUTTON_CONFIGURATION_Pin) {
 8002f76:	88fb      	ldrh	r3, [r7, #6]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d113      	bne.n	8002fa4 <HAL_GPIO_EXTI_Callback+0x64>
				if (numpad == INATTIVO) {
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
					numpad = CONFIGURAZIONE;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
					start_timer_display = HAL_GetTick();
 8002f8a:	f000 fe29 	bl	8003be0 <HAL_GetTick>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002f92:	6013      	str	r3, [r2, #0]
					set_display_configuration();
 8002f94:	f7fe f964 	bl	8001260 <set_display_configuration>
					HAL_GPIO_WritePin(LED_CONFIGURATION_GPIO_Port, LED_CONFIGURATION_Pin, GPIO_PIN_SET);
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2104      	movs	r1, #4
 8002f9c:	480a      	ldr	r0, [pc, #40]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0x88>)
 8002f9e:	f001 f98f 	bl	80042c0 <HAL_GPIO_WritePin>
				}
			}

		}
	}
}
 8002fa2:	e006      	b.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
				if (GPIO_Pin == PHOTO_INTERRUPTER_Pin) {
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002faa:	d102      	bne.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
					change_direction_sliding_gate();
 8002fac:	f7fe ff02 	bl	8001db4 <change_direction_sliding_gate>
}
 8002fb0:	e7ff      	b.n	8002fb2 <HAL_GPIO_EXTI_Callback+0x72>
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000340 	.word	0x20000340
 8002fc0:	2000033d 	.word	0x2000033d
 8002fc4:	200002f0 	.word	0x200002f0
 8002fc8:	40020c00 	.word	0x40020c00

08002fcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d113      	bne.n	8003004 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (timer_1 == SETUP) {
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d103      	bne.n	8002fec <HAL_TIM_PeriodElapsedCallback+0x20>
			timer_1 = TIMER;
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8002fea:	e071      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
			if (timer_1 == TIMER) {
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d16d      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
				if (hc_sr04_open_position == DELAY) {
 8002ff4:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d169      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
					start_sampling_hcsr04(&htim1);
 8002ffc:	4836      	ldr	r0, [pc, #216]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002ffe:	f7fe ff05 	bl	8001e0c <start_sampling_hcsr04>
}
 8003002:	e065      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
		if (htim == &htim4) {
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10e      	bne.n	800302a <HAL_TIM_PeriodElapsedCallback+0x5e>
			if (timer_4 == SETUP) {
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <HAL_TIM_PeriodElapsedCallback+0x50>
				timer_4 = TIMER;
 8003014:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
}
 800301a:	e059      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
				if (timer_4 == TIMER) {
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d155      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
					start_closing_sliding_gate();
 8003024:	f7fe fe96 	bl	8001d54 <start_closing_sliding_gate>
}
 8003028:	e052      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
			if (htim == &htim5) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a2f      	ldr	r2, [pc, #188]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x120>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_PeriodElapsedCallback+0x84>
				if (timer_5 == SETUP) {
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_TIM_PeriodElapsedCallback+0x76>
					timer_5 = TIMER;
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
}
 8003040:	e046      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
					if (timer_5 == TIMER) {
 8003042:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d142      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
						led_off();
 800304a:	f7fe ff4d 	bl	8001ee8 <led_off>
}
 800304e:	e03f      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
				if (htim == &htim9) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d111      	bne.n	800307c <HAL_TIM_PeriodElapsedCallback+0xb0>
					if (timer_9 ==  SETUP) {
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <HAL_TIM_PeriodElapsedCallback+0x9c>
						timer_9 = TIMER;
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8003062:	2201      	movs	r2, #1
 8003064:	701a      	strb	r2, [r3, #0]
}
 8003066:	e033      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
						if (timer_9 == TIMER) {
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d12f      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
							stepper_half_drive(step);
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fc97 	bl	80019a8 <stepper_half_drive>
}
 800307a:	e029      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
					if (htim == &htim10) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a20      	ldr	r2, [pc, #128]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10e      	bne.n	80030a2 <HAL_TIM_PeriodElapsedCallback+0xd6>
						if (timer_10 == SETUP) {
 8003084:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <HAL_TIM_PeriodElapsedCallback+0xc8>
							timer_10 = TIMER;
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
}
 8003092:	e01d      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
							if (timer_10 == TIMER) {
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d119      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
								process_door();
 800309c:	f7fe fc26 	bl	80018ec <process_door>
}
 80030a0:	e016      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
						if (htim == &htim11) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d112      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
							if (timer_11 == SETUP) {
 80030aa:	4b18      	ldr	r3, [pc, #96]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d103      	bne.n	80030ba <HAL_TIM_PeriodElapsedCallback+0xee>
								timer_11 = TIMER;
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
}
 80030b8:	e00a      	b.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
								if (timer_11 == TIMER) {
 80030ba:	4b14      	ldr	r3, [pc, #80]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d106      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
									if (hc_sr04_close_position == DELAY) {
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_TIM_PeriodElapsedCallback+0x104>
										start_sampling_hcsr04(&htim11);
 80030ca:	480f      	ldr	r0, [pc, #60]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80030cc:	f7fe fe9e 	bl	8001e0c <start_sampling_hcsr04>
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200000b4 	.word	0x200000b4
 80030dc:	20000343 	.word	0x20000343
 80030e0:	20000342 	.word	0x20000342
 80030e4:	20000144 	.word	0x20000144
 80030e8:	20000344 	.word	0x20000344
 80030ec:	2000018c 	.word	0x2000018c
 80030f0:	20000345 	.word	0x20000345
 80030f4:	200001d4 	.word	0x200001d4
 80030f8:	20000346 	.word	0x20000346
 80030fc:	20000320 	.word	0x20000320
 8003100:	2000021c 	.word	0x2000021c
 8003104:	20000347 	.word	0x20000347
 8003108:	20000264 	.word	0x20000264
 800310c:	20000348 	.word	0x20000348
 8003110:	20000341 	.word	0x20000341
 8003114:	00000000 	.word	0x00000000

08003118 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a9f      	ldr	r2, [pc, #636]	; (80033a0 <HAL_TIM_IC_CaptureCallback+0x288>)
 8003124:	4293      	cmp	r3, r2
 8003126:	f040 8098 	bne.w	800325a <HAL_TIM_IC_CaptureCallback+0x142>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7f1b      	ldrb	r3, [r3, #28]
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 812e 	bne.w	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
			if (is_first_captured_close_position == 0) {
 8003134:	4b9b      	ldr	r3, [pc, #620]	; (80033a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11a      	bne.n	8003172 <HAL_TIM_IC_CaptureCallback+0x5a>
				ic_val1_close_position = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800313c:	2100      	movs	r1, #0
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f003 fa56 	bl	80065f0 <HAL_TIM_ReadCapturedValue>
 8003144:	4603      	mov	r3, r0
 8003146:	4a98      	ldr	r2, [pc, #608]	; (80033a8 <HAL_TIM_IC_CaptureCallback+0x290>)
 8003148:	6013      	str	r3, [r2, #0]
				is_first_captured_close_position = 1;
 800314a:	4b96      	ldr	r3, [pc, #600]	; (80033a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 020a 	bic.w	r2, r2, #10
 800315e:	621a      	str	r2, [r3, #32]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0202 	orr.w	r2, r2, #2
 800316e:	621a      	str	r2, [r3, #32]
					}
				}
			}
		}
	}
}
 8003170:	e10e      	b.n	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
				if (is_first_captured_close_position == 1) {
 8003172:	4b8c      	ldr	r3, [pc, #560]	; (80033a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 810a 	bne.w	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
					uint32_t difference = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]
					ic_val2_close_position = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003180:	2100      	movs	r1, #0
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f003 fa34 	bl	80065f0 <HAL_TIM_ReadCapturedValue>
 8003188:	4603      	mov	r3, r0
 800318a:	4a88      	ldr	r2, [pc, #544]	; (80033ac <HAL_TIM_IC_CaptureCallback+0x294>)
 800318c:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
					if (ic_val2_close_position > ic_val1_close_position) {
 8003196:	4b85      	ldr	r3, [pc, #532]	; (80033ac <HAL_TIM_IC_CaptureCallback+0x294>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_TIM_IC_CaptureCallback+0x290>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d906      	bls.n	80031b0 <HAL_TIM_IC_CaptureCallback+0x98>
						difference = ic_val2_close_position - ic_val1_close_position;
 80031a2:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_TIM_IC_CaptureCallback+0x294>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b80      	ldr	r3, [pc, #512]	; (80033a8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	e00e      	b.n	80031ce <HAL_TIM_IC_CaptureCallback+0xb6>
						if (ic_val1_close_position > ic_val2_close_position) {
 80031b0:	4b7d      	ldr	r3, [pc, #500]	; (80033a8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <HAL_TIM_IC_CaptureCallback+0x294>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d908      	bls.n	80031ce <HAL_TIM_IC_CaptureCallback+0xb6>
							difference = (0xffff - ic_val1_close_position) + ic_val2_close_position;
 80031bc:	4b7b      	ldr	r3, [pc, #492]	; (80033ac <HAL_TIM_IC_CaptureCallback+0x294>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <HAL_TIM_IC_CaptureCallback+0x290>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80031ca:	33ff      	adds	r3, #255	; 0xff
 80031cc:	617b      	str	r3, [r7, #20]
					uint32_t distance = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
					distance = difference * .034/2;
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7fd f942 	bl	800045c <__aeabi_ui2d>
 80031d8:	a36f      	add	r3, pc, #444	; (adr r3, 8003398 <HAL_TIM_IC_CaptureCallback+0x280>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd f9b7 	bl	8000550 <__aeabi_dmul>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f2:	f7fd fad7 	bl	80007a4 <__aeabi_ddiv>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	f7fd fbb9 	bl	8000974 <__aeabi_d2uiz>
 8003202:	4603      	mov	r3, r0
 8003204:	60bb      	str	r3, [r7, #8]
					is_first_captured_close_position = 0;
 8003206:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 020a 	bic.w	r2, r2, #10
 800321a:	621a      	str	r2, [r3, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a12      	ldr	r2, [r2, #32]
 8003226:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0202 	bic.w	r2, r2, #2
 8003236:	60da      	str	r2, [r3, #12]
					if (distance < distance_close_position) {
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_TIM_IC_CaptureCallback+0x298>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4293      	cmp	r3, r2
 8003242:	d202      	bcs.n	800324a <HAL_TIM_IC_CaptureCallback+0x132>
						stop_sliding_gate();
 8003244:	f7fe fd62 	bl	8001d0c <stop_sliding_gate>
}
 8003248:	e0a2      	b.n	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
						hc_sr04_close_position = DELAY;
 800324a:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_TIM_IC_CaptureCallback+0x29c>)
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
						HCSR04_Read(HC_SR04_CLOSE_POSITION_TRIGGER_GPIO_Port, HC_SR04_CLOSE_POSITION_TRIGGER_Pin);
 8003250:	2120      	movs	r1, #32
 8003252:	4859      	ldr	r0, [pc, #356]	; (80033b8 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8003254:	f7fe fcce 	bl	8001bf4 <HCSR04_Read>
}
 8003258:	e09a      	b.n	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
		if (htim == &htim1) {
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a57      	ldr	r2, [pc, #348]	; (80033bc <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f040 8096 	bne.w	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7f1b      	ldrb	r3, [r3, #28]
 8003268:	2b01      	cmp	r3, #1
 800326a:	f040 8091 	bne.w	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
				if (is_first_captured_open_position == 0) {
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d11a      	bne.n	80032ac <HAL_TIM_IC_CaptureCallback+0x194>
					ic_val1_open_position = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003276:	2100      	movs	r1, #0
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f003 f9b9 	bl	80065f0 <HAL_TIM_ReadCapturedValue>
 800327e:	4603      	mov	r3, r0
 8003280:	4a50      	ldr	r2, [pc, #320]	; (80033c4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8003282:	6013      	str	r3, [r2, #0]
					is_first_captured_open_position = 1;
 8003284:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 020a 	bic.w	r2, r2, #10
 8003298:	621a      	str	r2, [r3, #32]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0202 	orr.w	r2, r2, #2
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	e071      	b.n	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
					if (is_first_captured_open_position == 1) {
 80032ac:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d16d      	bne.n	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
						uint32_t difference = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]
						ic_val2_open_position = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80032b8:	2100      	movs	r1, #0
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f003 f998 	bl	80065f0 <HAL_TIM_ReadCapturedValue>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80032c4:	6013      	str	r3, [r2, #0]
						__HAL_TIM_SET_COUNTER(htim, 0);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2200      	movs	r2, #0
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
						if (ic_val2_open_position > ic_val1_open_position) {
 80032ce:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b3c      	ldr	r3, [pc, #240]	; (80033c4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d906      	bls.n	80032e8 <HAL_TIM_IC_CaptureCallback+0x1d0>
							difference = ic_val2_open_position - ic_val1_open_position;
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	e00e      	b.n	8003306 <HAL_TIM_IC_CaptureCallback+0x1ee>
							if (ic_val1_open_position > ic_val2_open_position) {
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d908      	bls.n	8003306 <HAL_TIM_IC_CaptureCallback+0x1ee>
								difference = (0xffff - ic_val1_open_position) + ic_val2_open_position;
 80032f4:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003302:	33ff      	adds	r3, #255	; 0xff
 8003304:	613b      	str	r3, [r7, #16]
						uint32_t distance = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
						distance = difference * .034/2;
 800330a:	6938      	ldr	r0, [r7, #16]
 800330c:	f7fd f8a6 	bl	800045c <__aeabi_ui2d>
 8003310:	a321      	add	r3, pc, #132	; (adr r3, 8003398 <HAL_TIM_IC_CaptureCallback+0x280>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f91b 	bl	8000550 <__aeabi_dmul>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800332a:	f7fd fa3b 	bl	80007a4 <__aeabi_ddiv>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fb1d 	bl	8000974 <__aeabi_d2uiz>
 800333a:	4603      	mov	r3, r0
 800333c:	60fb      	str	r3, [r7, #12]
						is_first_captured_open_position = 0;
 800333e:	4b20      	ldr	r3, [pc, #128]	; (80033c0 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a1a      	ldr	r2, [r3, #32]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 020a 	bic.w	r2, r2, #10
 8003352:	621a      	str	r2, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a12      	ldr	r2, [r2, #32]
 800335e:	621a      	str	r2, [r3, #32]
						__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0202 	bic.w	r2, r2, #2
 800336e:	60da      	str	r2, [r3, #12]
						if (distance < distance_open_position) {
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4293      	cmp	r3, r2
 800337a:	d202      	bcs.n	8003382 <HAL_TIM_IC_CaptureCallback+0x26a>
							close_sliding_gate();
 800337c:	f7fe fca6 	bl	8001ccc <close_sliding_gate>
}
 8003380:	e006      	b.n	8003390 <HAL_TIM_IC_CaptureCallback+0x278>
							hc_sr04_open_position = DELAY;
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
							HCSR04_Read(HC_SR04_OPEN_POSITION_TRIGGER_GPIO_Port, HC_SR04_OPEN_POSITION_TRIGGER_Pin);
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	4812      	ldr	r0, [pc, #72]	; (80033d4 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800338c:	f7fe fc32 	bl	8001bf4 <HCSR04_Read>
}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	b020c49c 	.word	0xb020c49c
 800339c:	3fa16872 	.word	0x3fa16872
 80033a0:	20000264 	.word	0x20000264
 80033a4:	20000330 	.word	0x20000330
 80033a8:	20000328 	.word	0x20000328
 80033ac:	2000032c 	.word	0x2000032c
 80033b0:	20000030 	.word	0x20000030
 80033b4:	20000341 	.word	0x20000341
 80033b8:	40020400 	.word	0x40020400
 80033bc:	200000b4 	.word	0x200000b4
 80033c0:	2000033c 	.word	0x2000033c
 80033c4:	20000334 	.word	0x20000334
 80033c8:	20000338 	.word	0x20000338
 80033cc:	20000031 	.word	0x20000031
 80033d0:	20000342 	.word	0x20000342
 80033d4:	40020800 	.word	0x40020800

080033d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a21      	ldr	r2, [pc, #132]	; (8003468 <HAL_UART_RxCpltCallback+0x90>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d13a      	bne.n	800345e <HAL_UART_RxCpltCallback+0x86>
		if (process_data(data_received)) {
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_UART_RxCpltCallback+0x94>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f81f 	bl	8002430 <process_data>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d027      	beq.n	8003448 <HAL_UART_RxCpltCallback+0x70>
			receive_byte[index_byte] = data_received;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_UART_RxCpltCallback+0x98>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_UART_RxCpltCallback+0x94>)
 80033fe:	7811      	ldrb	r1, [r2, #0]
 8003400:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <HAL_UART_RxCpltCallback+0x9c>)
 8003402:	54d1      	strb	r1, [r2, r3]
			index_byte++;
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_UART_RxCpltCallback+0x98>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3301      	adds	r3, #1
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_UART_RxCpltCallback+0x98>)
 800340c:	6013      	str	r3, [r2, #0]
			if (index_byte == num_byte) {
 800340e:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_UART_RxCpltCallback+0x98>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b07      	cmp	r3, #7
 8003414:	d11e      	bne.n	8003454 <HAL_UART_RxCpltCallback+0x7c>
				index_byte = 0;
 8003416:	4b16      	ldr	r3, [pc, #88]	; (8003470 <HAL_UART_RxCpltCallback+0x98>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
				prepare_data_sliding_gate(get_info);
 800341c:	2062      	movs	r0, #98	; 0x62
 800341e:	f7fe fe8f 	bl	8002140 <prepare_data_sliding_gate>
				prepare_data_internal_light(get_info);
 8003422:	2062      	movs	r0, #98	; 0x62
 8003424:	f7fe fecc 	bl	80021c0 <prepare_data_internal_light>
				prepare_data_door(get_info);
 8003428:	2062      	movs	r0, #98	; 0x62
 800342a:	f7fe fef9 	bl	8002220 <prepare_data_door>
				prepare_data_alarm(get_info);
 800342e:	2062      	movs	r0, #98	; 0x62
 8003430:	f7fe ff26 	bl	8002280 <prepare_data_alarm>
				prepare_data_configuration_sliding_gate(get_info);
 8003434:	2062      	movs	r0, #98	; 0x62
 8003436:	f7fe ff5b 	bl	80022f0 <prepare_data_configuration_sliding_gate>
				prepare_data_configuration_internal_light(get_info);
 800343a:	2062      	movs	r0, #98	; 0x62
 800343c:	f7fe ff80 	bl	8002340 <prepare_data_configuration_internal_light>
				prepare_data_configuration_door(get_info);
 8003440:	2062      	movs	r0, #98	; 0x62
 8003442:	f7fe ffbd 	bl	80023c0 <prepare_data_configuration_door>
 8003446:	e005      	b.n	8003454 <HAL_UART_RxCpltCallback+0x7c>
			}
		} else {
			uart = IN_ATTESA_SOF;
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_UART_RxCpltCallback+0xa0>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
			index_byte = 0;
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <HAL_UART_RxCpltCallback+0x98>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &data_received, 1);
 8003454:	2201      	movs	r2, #1
 8003456:	4905      	ldr	r1, [pc, #20]	; (800346c <HAL_UART_RxCpltCallback+0x94>)
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <HAL_UART_RxCpltCallback+0x90>)
 800345a:	f003 fe76 	bl	800714a <HAL_UART_Receive_IT>
	}
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200002ac 	.word	0x200002ac
 800346c:	20000360 	.word	0x20000360
 8003470:	2000035c 	.word	0x2000035c
 8003474:	20000354 	.word	0x20000354
 8003478:	20000349 	.word	0x20000349

0800347c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003480:	b672      	cpsid	i
}
 8003482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003484:	e7fe      	b.n	8003484 <Error_Handler+0x8>
	...

08003488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_MspInit+0x4c>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_MspInit+0x4c>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_MspInit+0x4c>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_MspInit+0x4c>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a08      	ldr	r2, [pc, #32]	; (80034d4 <HAL_MspInit+0x4c>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_MspInit+0x4c>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034c6:	2007      	movs	r0, #7
 80034c8:	f000 fc8a 	bl	8003de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_I2C_MspInit+0x84>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d12b      	bne.n	8003552 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_I2C_MspInit+0x88>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a17      	ldr	r2, [pc, #92]	; (8003560 <HAL_I2C_MspInit+0x88>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_I2C_MspInit+0x88>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003516:	23c0      	movs	r3, #192	; 0xc0
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351a:	2312      	movs	r3, #18
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003526:	2304      	movs	r3, #4
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	480c      	ldr	r0, [pc, #48]	; (8003564 <HAL_I2C_MspInit+0x8c>)
 8003532:	f000 fd29 	bl	8003f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_I2C_MspInit+0x88>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_I2C_MspInit+0x88>)
 8003540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_I2C_MspInit+0x88>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003552:	bf00      	nop
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40005400 	.word	0x40005400
 8003560:	40023800 	.word	0x40023800
 8003564:	40020400 	.word	0x40020400

08003568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b094      	sub	sp, #80	; 0x50
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a86      	ldr	r2, [pc, #536]	; (80037b0 <HAL_TIM_Base_MspInit+0x248>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d14d      	bne.n	8003636 <HAL_TIM_Base_MspInit+0xce>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	4b85      	ldr	r3, [pc, #532]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a84      	ldr	r2, [pc, #528]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b82      	ldr	r3, [pc, #520]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	623b      	str	r3, [r7, #32]
 80035ba:	4b7e      	ldr	r3, [pc, #504]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a7d      	ldr	r2, [pc, #500]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HC_SR04_OPEN_POSITION_ECO_Pin;
 80035d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e0:	2300      	movs	r3, #0
 80035e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(HC_SR04_OPEN_POSITION_ECO_GPIO_Port, &GPIO_InitStruct);
 80035e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ec:	4619      	mov	r1, r3
 80035ee:	4872      	ldr	r0, [pc, #456]	; (80037b8 <HAL_TIM_Base_MspInit+0x250>)
 80035f0:	f000 fcca 	bl	8003f88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80035f4:	2200      	movs	r2, #0
 80035f6:	2100      	movs	r1, #0
 80035f8:	2018      	movs	r0, #24
 80035fa:	f000 fbfc 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80035fe:	2018      	movs	r0, #24
 8003600:	f000 fc15 	bl	8003e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	2100      	movs	r1, #0
 8003608:	2019      	movs	r0, #25
 800360a:	f000 fbf4 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800360e:	2019      	movs	r0, #25
 8003610:	f000 fc0d 	bl	8003e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003614:	2200      	movs	r2, #0
 8003616:	2100      	movs	r1, #0
 8003618:	201a      	movs	r0, #26
 800361a:	f000 fbec 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800361e:	201a      	movs	r0, #26
 8003620:	f000 fc05 	bl	8003e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	201b      	movs	r0, #27
 800362a:	f000 fbe4 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800362e:	201b      	movs	r0, #27
 8003630:	f000 fbfd 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8003634:	e0b8      	b.n	80037a8 <HAL_TIM_Base_MspInit+0x240>
  else if(htim_base->Instance==TIM4)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a60      	ldr	r2, [pc, #384]	; (80037bc <HAL_TIM_Base_MspInit+0x254>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d116      	bne.n	800366e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003640:	2300      	movs	r3, #0
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	4b5b      	ldr	r3, [pc, #364]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6413      	str	r3, [r2, #64]	; 0x40
 8003650:	4b58      	ldr	r3, [pc, #352]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800365c:	2200      	movs	r2, #0
 800365e:	2100      	movs	r1, #0
 8003660:	201e      	movs	r0, #30
 8003662:	f000 fbc8 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003666:	201e      	movs	r0, #30
 8003668:	f000 fbe1 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 800366c:	e09c      	b.n	80037a8 <HAL_TIM_Base_MspInit+0x240>
  else if(htim_base->Instance==TIM5)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_TIM_Base_MspInit+0x258>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d116      	bne.n	80036a6 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]
 800367c:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4a4c      	ldr	r2, [pc, #304]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003682:	f043 0308 	orr.w	r3, r3, #8
 8003686:	6413      	str	r3, [r2, #64]	; 0x40
 8003688:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	2100      	movs	r1, #0
 8003698:	2032      	movs	r0, #50	; 0x32
 800369a:	f000 fbac 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800369e:	2032      	movs	r0, #50	; 0x32
 80036a0:	f000 fbc5 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 80036a4:	e080      	b.n	80037a8 <HAL_TIM_Base_MspInit+0x240>
  else if(htim_base->Instance==TIM9)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a46      	ldr	r2, [pc, #280]	; (80037c4 <HAL_TIM_Base_MspInit+0x25c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d116      	bne.n	80036de <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	4b3f      	ldr	r3, [pc, #252]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6453      	str	r3, [r2, #68]	; 0x44
 80036c0:	4b3c      	ldr	r3, [pc, #240]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	2018      	movs	r0, #24
 80036d2:	f000 fb90 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80036d6:	2018      	movs	r0, #24
 80036d8:	f000 fba9 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 80036dc:	e064      	b.n	80037a8 <HAL_TIM_Base_MspInit+0x240>
  else if(htim_base->Instance==TIM10)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_TIM_Base_MspInit+0x260>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d116      	bne.n	8003716 <HAL_TIM_Base_MspInit+0x1ae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	4a30      	ldr	r2, [pc, #192]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	6453      	str	r3, [r2, #68]	; 0x44
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	2100      	movs	r1, #0
 8003708:	2019      	movs	r0, #25
 800370a:	f000 fb74 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800370e:	2019      	movs	r0, #25
 8003710:	f000 fb8d 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 8003714:	e048      	b.n	80037a8 <HAL_TIM_Base_MspInit+0x240>
  else if(htim_base->Instance==TIM11)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2c      	ldr	r2, [pc, #176]	; (80037cc <HAL_TIM_Base_MspInit+0x264>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d143      	bne.n	80037a8 <HAL_TIM_Base_MspInit+0x240>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003720:	2302      	movs	r3, #2
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800372a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fedc 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_TIM_Base_MspInit+0x1d6>
      Error_Handler();
 800373a:	f7ff fe9f 	bl	800347c <Error_Handler>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6453      	str	r3, [r2, #68]	; 0x44
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b15      	ldr	r3, [pc, #84]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_TIM_Base_MspInit+0x24c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HC_SR04_CLOSE_POSITION_ECO_Pin;
 8003776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377c:	2302      	movs	r3, #2
 800377e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003784:	2300      	movs	r3, #0
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003788:	2303      	movs	r3, #3
 800378a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(HC_SR04_CLOSE_POSITION_ECO_GPIO_Port, &GPIO_InitStruct);
 800378c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003790:	4619      	mov	r1, r3
 8003792:	480f      	ldr	r0, [pc, #60]	; (80037d0 <HAL_TIM_Base_MspInit+0x268>)
 8003794:	f000 fbf8 	bl	8003f88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	201a      	movs	r0, #26
 800379e:	f000 fb2a 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80037a2:	201a      	movs	r0, #26
 80037a4:	f000 fb43 	bl	8003e2e <HAL_NVIC_EnableIRQ>
}
 80037a8:	bf00      	nop
 80037aa:	3750      	adds	r7, #80	; 0x50
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40020000 	.word	0x40020000
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	40020400 	.word	0x40020400

080037d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0e      	ldr	r2, [pc, #56]	; (800381c <HAL_TIM_PWM_MspInit+0x48>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d115      	bne.n	8003812 <HAL_TIM_PWM_MspInit+0x3e>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_TIM_PWM_MspInit+0x4c>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <HAL_TIM_PWM_MspInit+0x4c>)
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <HAL_TIM_PWM_MspInit+0x4c>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	201d      	movs	r0, #29
 8003808:	f000 faf5 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800380c:	201d      	movs	r0, #29
 800380e:	f000 fb0e 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40000400 	.word	0x40000400
 8003820:	40023800 	.word	0x40023800

08003824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b088      	sub	sp, #32
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_TIM_MspPostInit+0x68>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d11d      	bne.n	8003882 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <HAL_TIM_MspPostInit+0x6c>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a10      	ldr	r2, [pc, #64]	; (8003890 <HAL_TIM_MspPostInit+0x6c>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_TIM_MspPostInit+0x6c>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SG90_Pin;
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003872:	2302      	movs	r3, #2
 8003874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SG90_GPIO_Port, &GPIO_InitStruct);
 8003876:	f107 030c 	add.w	r3, r7, #12
 800387a:	4619      	mov	r1, r3
 800387c:	4805      	ldr	r0, [pc, #20]	; (8003894 <HAL_TIM_MspPostInit+0x70>)
 800387e:	f000 fb83 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40000400 	.word	0x40000400
 8003890:	40023800 	.word	0x40023800
 8003894:	40020000 	.word	0x40020000

08003898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038a0:	f107 0314 	add.w	r3, r7, #20
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <HAL_UART_MspInit+0x94>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d133      	bne.n	8003922 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_UART_MspInit+0x98>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_UART_MspInit+0x98>)
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_UART_MspInit+0x98>)
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_UART_MspInit+0x98>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_UART_MspInit+0x98>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_UART_MspInit+0x98>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038f2:	230c      	movs	r3, #12
 80038f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003902:	2307      	movs	r3, #7
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003906:	f107 0314 	add.w	r3, r7, #20
 800390a:	4619      	mov	r1, r3
 800390c:	4809      	ldr	r0, [pc, #36]	; (8003934 <HAL_UART_MspInit+0x9c>)
 800390e:	f000 fb3b 	bl	8003f88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	2026      	movs	r0, #38	; 0x26
 8003918:	f000 fa6d 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800391c:	2026      	movs	r0, #38	; 0x26
 800391e:	f000 fa86 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3728      	adds	r7, #40	; 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40004400 	.word	0x40004400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020000 	.word	0x40020000

08003938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800393c:	e7fe      	b.n	800393c <NMI_Handler+0x4>

0800393e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003942:	e7fe      	b.n	8003942 <HardFault_Handler+0x4>

08003944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003948:	e7fe      	b.n	8003948 <MemManage_Handler+0x4>

0800394a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394e:	e7fe      	b.n	800394e <BusFault_Handler+0x4>

08003950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003954:	e7fe      	b.n	8003954 <UsageFault_Handler+0x4>

08003956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003956:	b480      	push	{r7}
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003984:	f000 f918 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003988:	bf00      	nop
 800398a:	bd80      	pop	{r7, pc}

0800398c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_CONFIGURATION_Pin);
 8003990:	2001      	movs	r0, #1
 8003992:	f000 fcaf 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}

0800399a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SLIDING_GATE_FRONT_Pin);
 800399e:	2002      	movs	r0, #2
 80039a0:	f000 fca8 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SLIDING_GATE_RETRO_Pin);
 80039ac:	2004      	movs	r0, #4
 80039ae:	f000 fca1 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOOR_FRONT_Pin);
 80039ba:	2008      	movs	r0, #8
 80039bc:	f000 fc9a 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOOR_RETRO_Pin);
 80039c8:	2010      	movs	r0, #16
 80039ca:	f000 fc93 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80039da:	f002 fadb 	bl	8005f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80039de:	4803      	ldr	r0, [pc, #12]	; (80039ec <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80039e0:	f002 fad8 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200000b4 	.word	0x200000b4
 80039ec:	200001d4 	.word	0x200001d4

080039f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80039f6:	f002 facd 	bl	8005f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80039fa:	4803      	ldr	r0, [pc, #12]	; (8003a08 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80039fc:	f002 faca 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200000b4 	.word	0x200000b4
 8003a08:	2000021c 	.word	0x2000021c

08003a0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003a12:	f002 fabf 	bl	8005f94 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003a16:	4803      	ldr	r0, [pc, #12]	; (8003a24 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003a18:	f002 fabc 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	200000b4 	.word	0x200000b4
 8003a24:	20000264 	.word	0x20000264

08003a28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <TIM1_CC_IRQHandler+0x10>)
 8003a2e:	f002 fab1 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200000b4 	.word	0x200000b4

08003a3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM3_IRQHandler+0x10>)
 8003a42:	f002 faa7 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	200000fc 	.word	0x200000fc

08003a50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <TIM4_IRQHandler+0x10>)
 8003a56:	f002 fa9d 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000144 	.word	0x20000144

08003a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <USART2_IRQHandler+0x10>)
 8003a6a:	f003 fb9f 	bl	80071ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200002ac 	.word	0x200002ac

08003a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO_INTERRUPTER_Pin);
 8003a7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a80:	f000 fc38 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <TIM5_IRQHandler+0x10>)
 8003a8e:	f002 fa81 	bl	8005f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000018c 	.word	0x2000018c

08003a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x20>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	4a05      	ldr	r2, [pc, #20]	; (8003abc <SystemInit+0x20>)
 8003aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ac4:	480d      	ldr	r0, [pc, #52]	; (8003afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ac6:	490e      	ldr	r1, [pc, #56]	; (8003b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ac8:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003acc:	e002      	b.n	8003ad4 <LoopCopyDataInit>

08003ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad2:	3304      	adds	r3, #4

08003ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad8:	d3f9      	bcc.n	8003ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003adc:	4c0b      	ldr	r4, [pc, #44]	; (8003b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae0:	e001      	b.n	8003ae6 <LoopFillZerobss>

08003ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae4:	3204      	adds	r2, #4

08003ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae8:	d3fb      	bcc.n	8003ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aea:	f7ff ffd7 	bl	8003a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aee:	f004 fac5 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fe fd0f 	bl	8002514 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003af8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8003b04:	080081ac 	.word	0x080081ac
  ldr r2, =_sbss
 8003b08:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8003b0c:	20000368 	.word	0x20000368

08003b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_Init+0x40>)
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_Init+0x40>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_Init+0x40>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f000 f94f 	bl	8003de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 f808 	bl	8003b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fc9e 	bl	8003488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_InitTick+0x54>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_InitTick+0x58>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f967 	bl	8003e4a <HAL_SYSTICK_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00e      	b.n	8003ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d80a      	bhi.n	8003ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 f92f 	bl	8003df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b98:	4a06      	ldr	r2, [pc, #24]	; (8003bb4 <HAL_InitTick+0x5c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000034 	.word	0x20000034
 8003bb0:	2000003c 	.word	0x2000003c
 8003bb4:	20000038 	.word	0x20000038

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	2000003c 	.word	0x2000003c
 8003bdc:	20000364 	.word	0x20000364

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000364 	.word	0x20000364

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff ffee 	bl	8003be0 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_Delay+0x44>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000003c 	.word	0x2000003c

08003c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <__NVIC_SetPriorityGrouping+0x44>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c72:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <__NVIC_SetPriorityGrouping+0x44>)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	60d3      	str	r3, [r2, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 0307 	and.w	r3, r3, #7
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	db0b      	blt.n	8003cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	4907      	ldr	r1, [pc, #28]	; (8003cdc <__NVIC_EnableIRQ+0x38>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000e100 	.word	0xe000e100

08003ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	db0a      	blt.n	8003d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	490c      	ldr	r1, [pc, #48]	; (8003d2c <__NVIC_SetPriority+0x4c>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	0112      	lsls	r2, r2, #4
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	440b      	add	r3, r1
 8003d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d08:	e00a      	b.n	8003d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4908      	ldr	r1, [pc, #32]	; (8003d30 <__NVIC_SetPriority+0x50>)
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	3b04      	subs	r3, #4
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	761a      	strb	r2, [r3, #24]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000e100 	.word	0xe000e100
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f1c3 0307 	rsb	r3, r3, #7
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	bf28      	it	cs
 8003d52:	2304      	movcs	r3, #4
 8003d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d902      	bls.n	8003d64 <NVIC_EncodePriority+0x30>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3b03      	subs	r3, #3
 8003d62:	e000      	b.n	8003d66 <NVIC_EncodePriority+0x32>
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	401a      	ands	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	4313      	orrs	r3, r2
         );
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dac:	d301      	bcc.n	8003db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00f      	b.n	8003dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <SysTick_Config+0x40>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dba:	210f      	movs	r1, #15
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	f7ff ff8e 	bl	8003ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <SysTick_Config+0x40>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <SysTick_Config+0x40>)
 8003dcc:	2207      	movs	r2, #7
 8003dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000e010 	.word	0xe000e010

08003de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff29 	bl	8003c40 <__NVIC_SetPriorityGrouping>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e08:	f7ff ff3e 	bl	8003c88 <__NVIC_GetPriorityGrouping>
 8003e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff8e 	bl	8003d34 <NVIC_EncodePriority>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5d 	bl	8003ce0 <__NVIC_SetPriority>
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff31 	bl	8003ca4 <__NVIC_EnableIRQ>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ffa2 	bl	8003d9c <SysTick_Config>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff feb6 	bl	8003be0 <HAL_GetTick>
 8003e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d008      	beq.n	8003e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e052      	b.n	8003f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0216 	bic.w	r2, r2, #22
 8003ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_DMA_Abort+0x62>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d007      	beq.n	8003ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0208 	bic.w	r2, r2, #8
 8003ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ee4:	e013      	b.n	8003f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ee6:	f7ff fe7b 	bl	8003be0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d90c      	bls.n	8003f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2203      	movs	r2, #3
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e015      	b.n	8003f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e4      	bne.n	8003ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	223f      	movs	r2, #63	; 0x3f
 8003f22:	409a      	lsls	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d004      	beq.n	8003f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2280      	movs	r2, #128	; 0x80
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e00c      	b.n	8003f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2205      	movs	r2, #5
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e159      	b.n	8004258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	f040 8148 	bne.w	8004252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d005      	beq.n	8003fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d130      	bne.n	800403c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 0201 	and.w	r2, r3, #1
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b03      	cmp	r3, #3
 8004046:	d017      	beq.n	8004078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d123      	bne.n	80040cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	08da      	lsrs	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3208      	adds	r2, #8
 800408c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	220f      	movs	r2, #15
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	08da      	lsrs	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3208      	adds	r2, #8
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	2203      	movs	r2, #3
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0203 	and.w	r2, r3, #3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a2 	beq.w	8004252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	4b57      	ldr	r3, [pc, #348]	; (8004270 <HAL_GPIO_Init+0x2e8>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4a56      	ldr	r2, [pc, #344]	; (8004270 <HAL_GPIO_Init+0x2e8>)
 8004118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411c:	6453      	str	r3, [r2, #68]	; 0x44
 800411e:	4b54      	ldr	r3, [pc, #336]	; (8004270 <HAL_GPIO_Init+0x2e8>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412a:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_GPIO_Init+0x2ec>)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3302      	adds	r3, #2
 8004132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a49      	ldr	r2, [pc, #292]	; (8004278 <HAL_GPIO_Init+0x2f0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d019      	beq.n	800418a <HAL_GPIO_Init+0x202>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a48      	ldr	r2, [pc, #288]	; (800427c <HAL_GPIO_Init+0x2f4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_GPIO_Init+0x1fe>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a47      	ldr	r2, [pc, #284]	; (8004280 <HAL_GPIO_Init+0x2f8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00d      	beq.n	8004182 <HAL_GPIO_Init+0x1fa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a46      	ldr	r2, [pc, #280]	; (8004284 <HAL_GPIO_Init+0x2fc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <HAL_GPIO_Init+0x1f6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a45      	ldr	r2, [pc, #276]	; (8004288 <HAL_GPIO_Init+0x300>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_GPIO_Init+0x1f2>
 8004176:	2304      	movs	r3, #4
 8004178:	e008      	b.n	800418c <HAL_GPIO_Init+0x204>
 800417a:	2307      	movs	r3, #7
 800417c:	e006      	b.n	800418c <HAL_GPIO_Init+0x204>
 800417e:	2303      	movs	r3, #3
 8004180:	e004      	b.n	800418c <HAL_GPIO_Init+0x204>
 8004182:	2302      	movs	r3, #2
 8004184:	e002      	b.n	800418c <HAL_GPIO_Init+0x204>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_GPIO_Init+0x204>
 800418a:	2300      	movs	r3, #0
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	f002 0203 	and.w	r2, r2, #3
 8004192:	0092      	lsls	r2, r2, #2
 8004194:	4093      	lsls	r3, r2
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800419c:	4935      	ldr	r1, [pc, #212]	; (8004274 <HAL_GPIO_Init+0x2ec>)
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3302      	adds	r3, #2
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041aa:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_GPIO_Init+0x304>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ce:	4a2f      	ldr	r2, [pc, #188]	; (800428c <HAL_GPIO_Init+0x304>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041d4:	4b2d      	ldr	r3, [pc, #180]	; (800428c <HAL_GPIO_Init+0x304>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041f8:	4a24      	ldr	r2, [pc, #144]	; (800428c <HAL_GPIO_Init+0x304>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <HAL_GPIO_Init+0x304>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_GPIO_Init+0x304>)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_GPIO_Init+0x304>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <HAL_GPIO_Init+0x304>)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3301      	adds	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b0f      	cmp	r3, #15
 800425c:	f67f aea2 	bls.w	8003fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3724      	adds	r7, #36	; 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800
 8004274:	40013800 	.word	0x40013800
 8004278:	40020000 	.word	0x40020000
 800427c:	40020400 	.word	0x40020400
 8004280:	40020800 	.word	0x40020800
 8004284:	40020c00 	.word	0x40020c00
 8004288:	40021000 	.word	0x40021000
 800428c:	40013c00 	.word	0x40013c00

08004290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e001      	b.n	80042b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
 80042cc:	4613      	mov	r3, r2
 80042ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d0:	787b      	ldrb	r3, [r7, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042dc:	e003      	b.n	80042e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	041a      	lsls	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	619a      	str	r2, [r3, #24]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800430a:	4a05      	ldr	r2, [pc, #20]	; (8004320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fe14 	bl	8002f40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40013c00 	.word	0x40013c00

08004324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e12b      	b.n	800458e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff f8c4 	bl	80034d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	; 0x24
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004388:	f001 f888 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 800438c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4a81      	ldr	r2, [pc, #516]	; (8004598 <HAL_I2C_Init+0x274>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d807      	bhi.n	80043a8 <HAL_I2C_Init+0x84>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4a80      	ldr	r2, [pc, #512]	; (800459c <HAL_I2C_Init+0x278>)
 800439c:	4293      	cmp	r3, r2
 800439e:	bf94      	ite	ls
 80043a0:	2301      	movls	r3, #1
 80043a2:	2300      	movhi	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e006      	b.n	80043b6 <HAL_I2C_Init+0x92>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a7d      	ldr	r2, [pc, #500]	; (80045a0 <HAL_I2C_Init+0x27c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	bf94      	ite	ls
 80043b0:	2301      	movls	r3, #1
 80043b2:	2300      	movhi	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0e7      	b.n	800458e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a78      	ldr	r2, [pc, #480]	; (80045a4 <HAL_I2C_Init+0x280>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0c9b      	lsrs	r3, r3, #18
 80043c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	4a6a      	ldr	r2, [pc, #424]	; (8004598 <HAL_I2C_Init+0x274>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d802      	bhi.n	80043f8 <HAL_I2C_Init+0xd4>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3301      	adds	r3, #1
 80043f6:	e009      	b.n	800440c <HAL_I2C_Init+0xe8>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	4a69      	ldr	r2, [pc, #420]	; (80045a8 <HAL_I2C_Init+0x284>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	3301      	adds	r3, #1
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	430b      	orrs	r3, r1
 8004412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800441e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	495c      	ldr	r1, [pc, #368]	; (8004598 <HAL_I2C_Init+0x274>)
 8004428:	428b      	cmp	r3, r1
 800442a:	d819      	bhi.n	8004460 <HAL_I2C_Init+0x13c>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e59      	subs	r1, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	fbb1 f3f3 	udiv	r3, r1, r3
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004440:	400b      	ands	r3, r1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_I2C_Init+0x138>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1e59      	subs	r1, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fbb1 f3f3 	udiv	r3, r1, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	e051      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 800445c:	2304      	movs	r3, #4
 800445e:	e04f      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d111      	bne.n	800448c <HAL_I2C_Init+0x168>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1e58      	subs	r0, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6859      	ldr	r1, [r3, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	440b      	add	r3, r1
 8004476:	fbb0 f3f3 	udiv	r3, r0, r3
 800447a:	3301      	adds	r3, #1
 800447c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e012      	b.n	80044b2 <HAL_I2C_Init+0x18e>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	0099      	lsls	r1, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Init+0x196>
 80044b6:	2301      	movs	r3, #1
 80044b8:	e022      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10e      	bne.n	80044e0 <HAL_I2C_Init+0x1bc>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e58      	subs	r0, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	440b      	add	r3, r1
 80044d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d4:	3301      	adds	r3, #1
 80044d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044de:	e00f      	b.n	8004500 <HAL_I2C_Init+0x1dc>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	0099      	lsls	r1, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f6:	3301      	adds	r3, #1
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	6809      	ldr	r1, [r1, #0]
 8004504:	4313      	orrs	r3, r2
 8004506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800452e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6911      	ldr	r1, [r2, #16]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68d2      	ldr	r2, [r2, #12]
 800453a:	4311      	orrs	r1, r2
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	000186a0 	.word	0x000186a0
 800459c:	001e847f 	.word	0x001e847f
 80045a0:	003d08ff 	.word	0x003d08ff
 80045a4:	431bde83 	.word	0x431bde83
 80045a8:	10624dd3 	.word	0x10624dd3

080045ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	461a      	mov	r2, r3
 80045b8:	460b      	mov	r3, r1
 80045ba:	817b      	strh	r3, [r7, #10]
 80045bc:	4613      	mov	r3, r2
 80045be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045c0:	f7ff fb0e 	bl	8003be0 <HAL_GetTick>
 80045c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	f040 80e0 	bne.w	8004794 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2319      	movs	r3, #25
 80045da:	2201      	movs	r2, #1
 80045dc:	4970      	ldr	r1, [pc, #448]	; (80047a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f964 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0d3      	b.n	8004796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_I2C_Master_Transmit+0x50>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e0cc      	b.n	8004796 <HAL_I2C_Master_Transmit+0x1ea>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d007      	beq.n	8004622 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0201 	orr.w	r2, r2, #1
 8004620:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004630:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2221      	movs	r2, #33	; 0x21
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2210      	movs	r2, #16
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	893a      	ldrh	r2, [r7, #8]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4a50      	ldr	r2, [pc, #320]	; (80047a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004664:	8979      	ldrh	r1, [r7, #10]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6a3a      	ldr	r2, [r7, #32]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f89c 	bl	80047a8 <I2C_MasterRequestWrite>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e08d      	b.n	8004796 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004690:	e066      	b.n	8004760 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	6a39      	ldr	r1, [r7, #32]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f9de 	bl	8004a58 <I2C_WaitOnTXEFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00d      	beq.n	80046be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d107      	bne.n	80046ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e06b      	b.n	8004796 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d11b      	bne.n	8004734 <HAL_I2C_Master_Transmit+0x188>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	6a39      	ldr	r1, [r7, #32]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f9ce 	bl	8004ada <I2C_WaitOnBTFFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	2b04      	cmp	r3, #4
 800474a:	d107      	bne.n	800475c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e01a      	b.n	8004796 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d194      	bne.n	8004692 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e000      	b.n	8004796 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004794:	2302      	movs	r3, #2
  }
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	00100002 	.word	0x00100002
 80047a4:	ffff0000 	.word	0xffff0000

080047a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	460b      	mov	r3, r1
 80047b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d006      	beq.n	80047d2 <I2C_MasterRequestWrite+0x2a>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d003      	beq.n	80047d2 <I2C_MasterRequestWrite+0x2a>
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d0:	d108      	bne.n	80047e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e00b      	b.n	80047fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	2b12      	cmp	r3, #18
 80047ea:	d107      	bne.n	80047fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f84f 	bl	80048ac <I2C_WaitOnFlagUntilTimeout>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00d      	beq.n	8004830 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d103      	bne.n	800482c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e035      	b.n	800489c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004838:	d108      	bne.n	800484c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483a:	897b      	ldrh	r3, [r7, #10]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004848:	611a      	str	r2, [r3, #16]
 800484a:	e01b      	b.n	8004884 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800484c:	897b      	ldrh	r3, [r7, #10]
 800484e:	11db      	asrs	r3, r3, #7
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f003 0306 	and.w	r3, r3, #6
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f063 030f 	orn	r3, r3, #15
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	490e      	ldr	r1, [pc, #56]	; (80048a4 <I2C_MasterRequestWrite+0xfc>)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f875 	bl	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e010      	b.n	800489c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4907      	ldr	r1, [pc, #28]	; (80048a8 <I2C_MasterRequestWrite+0x100>)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f865 	bl	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	00010008 	.word	0x00010008
 80048a8:	00010002 	.word	0x00010002

080048ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	4613      	mov	r3, r2
 80048ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048bc:	e025      	b.n	800490a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d021      	beq.n	800490a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7ff f98b 	bl	8003be0 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e023      	b.n	8004952 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10d      	bne.n	8004930 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4013      	ands	r3, r2
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	e00c      	b.n	800494a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	43da      	mvns	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	429a      	cmp	r2, r3
 800494e:	d0b6      	beq.n	80048be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004968:	e051      	b.n	8004a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d123      	bne.n	80049c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004988:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004992:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f043 0204 	orr.w	r2, r3, #4
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e046      	b.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d021      	beq.n	8004a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ca:	f7ff f909 	bl	8003be0 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e020      	b.n	8004a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d10c      	bne.n	8004a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e00b      	b.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d18d      	bne.n	800496a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a64:	e02d      	b.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f878 	bl	8004b5c <I2C_IsAcknowledgeFailed>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e02d      	b.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d021      	beq.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7e:	f7ff f8af 	bl	8003be0 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d302      	bcc.n	8004a94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d116      	bne.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f043 0220 	orr.w	r2, r3, #32
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e007      	b.n	8004ad2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d1ca      	bne.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae6:	e02d      	b.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f837 	bl	8004b5c <I2C_IsAcknowledgeFailed>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e02d      	b.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d021      	beq.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b00:	f7ff f86e 	bl	8003be0 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d302      	bcc.n	8004b16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f043 0220 	orr.w	r2, r3, #32
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e007      	b.n	8004b54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d1ca      	bne.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b72:	d11b      	bne.n	8004bac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f043 0204 	orr.w	r2, r3, #4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e267      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d075      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bda:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d00c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d112      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b82      	ldr	r3, [pc, #520]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	4b7e      	ldr	r3, [pc, #504]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05b      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x108>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d157      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e242      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x74>
 8004c22:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a75      	ldr	r2, [pc, #468]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e01d      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x98>
 8004c3a:	4b70      	ldr	r3, [pc, #448]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6f      	ldr	r2, [pc, #444]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6d      	ldr	r3, [pc, #436]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6c      	ldr	r2, [pc, #432]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c54:	4b69      	ldr	r3, [pc, #420]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a68      	ldr	r2, [pc, #416]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b66      	ldr	r3, [pc, #408]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a65      	ldr	r2, [pc, #404]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe ffb4 	bl	8003be0 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe ffb0 	bl	8003be0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e207      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xc0>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe ffa0 	bl	8003be0 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe ff9c 	bl	8003be0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1f3      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	4b51      	ldr	r3, [pc, #324]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xe8>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b47      	ldr	r3, [pc, #284]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cea:	4b44      	ldr	r3, [pc, #272]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d116      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e1c7      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4937      	ldr	r1, [pc, #220]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	e03a      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d2c:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe ff55 	bl	8003be0 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fe ff51 	bl	8003be0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e1a8      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4925      	ldr	r1, [pc, #148]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe ff34 	bl	8003be0 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fe ff30 	bl	8003be0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e187      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fe ff14 	bl	8003be0 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fe ff10 	bl	8003be0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e167      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x200>
 8004dda:	e01b      	b.n	8004e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fe fefd 	bl	8003be0 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	e00e      	b.n	8004e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fe fef9 	bl	8003be0 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d907      	bls.n	8004e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e150      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	42470000 	.word	0x42470000
 8004e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	4b88      	ldr	r3, [pc, #544]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ea      	bne.n	8004dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8097 	beq.w	8004f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e26:	4b81      	ldr	r3, [pc, #516]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	4b7d      	ldr	r3, [pc, #500]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b7a      	ldr	r3, [pc, #488]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b77      	ldr	r3, [pc, #476]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5e:	4b74      	ldr	r3, [pc, #464]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a73      	ldr	r2, [pc, #460]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe feb9 	bl	8003be0 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fe feb5 	bl	8003be0 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e10c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x2ea>
 8004e98:	4b64      	ldr	r3, [pc, #400]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a63      	ldr	r2, [pc, #396]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	e01c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x30c>
 8004eae:	4b5f      	ldr	r3, [pc, #380]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a5e      	ldr	r2, [pc, #376]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	4b5c      	ldr	r3, [pc, #368]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a5b      	ldr	r2, [pc, #364]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ec8:	4b58      	ldr	r3, [pc, #352]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a57      	ldr	r2, [pc, #348]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed4:	4b55      	ldr	r3, [pc, #340]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a54      	ldr	r2, [pc, #336]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eda:	f023 0304 	bic.w	r3, r3, #4
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fe fe7a 	bl	8003be0 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fe fe76 	bl	8003be0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0cb      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ee      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x334>
 8004f12:	e014      	b.n	8004f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f14:	f7fe fe64 	bl	8003be0 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fe fe60 	bl	8003be0 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0b5      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ee      	bne.n	8004f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f44:	4b39      	ldr	r3, [pc, #228]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	4a38      	ldr	r2, [pc, #224]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a1 	beq.w	800509c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d05c      	beq.n	8005020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d141      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <HAL_RCC_OscConfig+0x478>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fe fe34 	bl	8003be0 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fe fe30 	bl	8003be0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e087      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8e:	4b27      	ldr	r3, [pc, #156]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	491b      	ldr	r1, [pc, #108]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_RCC_OscConfig+0x478>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fe fe09 	bl	8003be0 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd2:	f7fe fe05 	bl	8003be0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e05c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x416>
 8004ff0:	e054      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_RCC_OscConfig+0x478>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fdf2 	bl	8003be0 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005000:	f7fe fdee 	bl	8003be0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e045      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x444>
 800501e:	e03d      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e038      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 800502c:	40023800 	.word	0x40023800
 8005030:	40007000 	.word	0x40007000
 8005034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x4ec>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d028      	beq.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d121      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d11a      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800506e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	3b01      	subs	r3, #1
 8005082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0cc      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b68      	ldr	r3, [pc, #416]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d90c      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b65      	ldr	r3, [pc, #404]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b63      	ldr	r3, [pc, #396]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b8      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005100:	4b59      	ldr	r3, [pc, #356]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a58      	ldr	r2, [pc, #352]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800510a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005118:	4b53      	ldr	r3, [pc, #332]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a52      	ldr	r2, [pc, #328]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	4b50      	ldr	r3, [pc, #320]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	494d      	ldr	r1, [pc, #308]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d044      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d119      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e07f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	2b03      	cmp	r3, #3
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e067      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4b37      	ldr	r3, [pc, #220]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4934      	ldr	r1, [pc, #208]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7fe fd20 	bl	8003be0 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fe fd1c 	bl	8003be0 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e04f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b25      	ldr	r3, [pc, #148]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d20c      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e032      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4916      	ldr	r1, [pc, #88]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	490e      	ldr	r1, [pc, #56]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005232:	f000 f821 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	490a      	ldr	r1, [pc, #40]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	5ccb      	ldrb	r3, [r1, r3]
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fc80 	bl	8003b58 <HAL_InitTick>

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023c00 	.word	0x40023c00
 8005268:	40023800 	.word	0x40023800
 800526c:	08008184 	.word	0x08008184
 8005270:	20000034 	.word	0x20000034
 8005274:	20000038 	.word	0x20000038

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800527c:	b094      	sub	sp, #80	; 0x50
 800527e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	647b      	str	r3, [r7, #68]	; 0x44
 8005284:	2300      	movs	r3, #0
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	2300      	movs	r3, #0
 800528a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005290:	4b79      	ldr	r3, [pc, #484]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b08      	cmp	r3, #8
 800529a:	d00d      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x40>
 800529c:	2b08      	cmp	r3, #8
 800529e:	f200 80e1 	bhi.w	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x34>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052aa:	e0db      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b73      	ldr	r3, [pc, #460]	; (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052b0:	e0db      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052b2:	4b73      	ldr	r3, [pc, #460]	; (8005480 <HAL_RCC_GetSysClockFreq+0x208>)
 80052b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052b6:	e0d8      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b8:	4b6f      	ldr	r3, [pc, #444]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c2:	4b6d      	ldr	r3, [pc, #436]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d063      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b6a      	ldr	r3, [pc, #424]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	2200      	movs	r2, #0
 80052d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052ea:	4622      	mov	r2, r4
 80052ec:	462b      	mov	r3, r5
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	0159      	lsls	r1, r3, #5
 80052f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fc:	0150      	lsls	r0, r2, #5
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4621      	mov	r1, r4
 8005304:	1a51      	subs	r1, r2, r1
 8005306:	6139      	str	r1, [r7, #16]
 8005308:	4629      	mov	r1, r5
 800530a:	eb63 0301 	sbc.w	r3, r3, r1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800531c:	4659      	mov	r1, fp
 800531e:	018b      	lsls	r3, r1, #6
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005326:	4651      	mov	r1, sl
 8005328:	018a      	lsls	r2, r1, #6
 800532a:	4651      	mov	r1, sl
 800532c:	ebb2 0801 	subs.w	r8, r2, r1
 8005330:	4659      	mov	r1, fp
 8005332:	eb63 0901 	sbc.w	r9, r3, r1
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800534a:	4690      	mov	r8, r2
 800534c:	4699      	mov	r9, r3
 800534e:	4623      	mov	r3, r4
 8005350:	eb18 0303 	adds.w	r3, r8, r3
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	462b      	mov	r3, r5
 8005358:	eb49 0303 	adc.w	r3, r9, r3
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800536a:	4629      	mov	r1, r5
 800536c:	024b      	lsls	r3, r1, #9
 800536e:	4621      	mov	r1, r4
 8005370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005374:	4621      	mov	r1, r4
 8005376:	024a      	lsls	r2, r1, #9
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537e:	2200      	movs	r2, #0
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
 8005382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005388:	f7fb fb14 	bl	80009b4 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005394:	e058      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	4b38      	ldr	r3, [pc, #224]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	099b      	lsrs	r3, r3, #6
 800539c:	2200      	movs	r2, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	4611      	mov	r1, r2
 80053a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c2:	0150      	lsls	r0, r2, #5
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4641      	mov	r1, r8
 80053ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e8:	ebb2 040a 	subs.w	r4, r2, sl
 80053ec:	eb63 050b 	sbc.w	r5, r3, fp
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	00eb      	lsls	r3, r5, #3
 80053fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fe:	00e2      	lsls	r2, r4, #3
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4643      	mov	r3, r8
 8005406:	18e3      	adds	r3, r4, r3
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	464b      	mov	r3, r9
 800540c:	eb45 0303 	adc.w	r3, r5, r3
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541e:	4629      	mov	r1, r5
 8005420:	028b      	lsls	r3, r1, #10
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005428:	4621      	mov	r1, r4
 800542a:	028a      	lsls	r2, r1, #10
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005432:	2200      	movs	r2, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	61fa      	str	r2, [r7, #28]
 8005438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543c:	f7fb faba 	bl	80009b4 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4613      	mov	r3, r2
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800545a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005462:	e002      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 8005466:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800546c:	4618      	mov	r0, r3
 800546e:	3750      	adds	r7, #80	; 0x50
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	00f42400 	.word	0x00f42400
 8005480:	007a1200 	.word	0x007a1200

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000034 	.word	0x20000034

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a9b      	lsrs	r3, r3, #10
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023800 	.word	0x40023800
 80054c0:	08008194 	.word	0x08008194

080054c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054c8:	f7ff ffdc 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	0b5b      	lsrs	r3, r3, #13
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4903      	ldr	r1, [pc, #12]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054da:	5ccb      	ldrb	r3, [r1, r3]
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023800 	.word	0x40023800
 80054e8:	08008194 	.word	0x08008194

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005510:	2b00      	cmp	r3, #0
 8005512:	d035      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005514:	4b67      	ldr	r3, [pc, #412]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800551a:	f7fe fb61 	bl	8003be0 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005522:	f7fe fb5d 	bl	8003be0 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e0ba      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005534:	4b60      	ldr	r3, [pc, #384]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	019a      	lsls	r2, r3, #6
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	071b      	lsls	r3, r3, #28
 800554c:	495a      	ldr	r1, [pc, #360]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005554:	4b57      	ldr	r3, [pc, #348]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800555a:	f7fe fb41 	bl	8003be0 <HAL_GetTick>
 800555e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005562:	f7fe fb3d 	bl	8003be0 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e09a      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005574:	4b50      	ldr	r3, [pc, #320]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8083 	beq.w	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	4b49      	ldr	r3, [pc, #292]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	4a48      	ldr	r2, [pc, #288]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559c:	6413      	str	r3, [r2, #64]	; 0x40
 800559e:	4b46      	ldr	r3, [pc, #280]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055aa:	4b44      	ldr	r3, [pc, #272]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a43      	ldr	r2, [pc, #268]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055b6:	f7fe fb13 	bl	8003be0 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055be:	f7fe fb0f 	bl	8003be0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e06c      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055d0:	4b3a      	ldr	r3, [pc, #232]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d02f      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d028      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055fa:	4b2f      	ldr	r3, [pc, #188]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005602:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005604:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800560a:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005610:	4a29      	ldr	r2, [pc, #164]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d114      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005622:	f7fe fadd 	bl	8003be0 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fe fad9 	bl	8003be0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e034      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005658:	d10d      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800566a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566e:	4912      	ldr	r1, [pc, #72]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005670:	4313      	orrs	r3, r2
 8005672:	608b      	str	r3, [r1, #8]
 8005674:	e005      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	4a0f      	ldr	r2, [pc, #60]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800567c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005680:	6093      	str	r3, [r2, #8]
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568e:	490a      	ldr	r1, [pc, #40]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005690:	4313      	orrs	r3, r2
 8005692:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7c1a      	ldrb	r2, [r3, #16]
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056a6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	42470068 	.word	0x42470068
 80056b8:	40023800 	.word	0x40023800
 80056bc:	40007000 	.word	0x40007000
 80056c0:	42470e40 	.word	0x42470e40
 80056c4:	424711e0 	.word	0x424711e0

080056c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e041      	b.n	800575e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fd ff3a 	bl	8003568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f000 ffd4 	bl	80066b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e044      	b.n	800580a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <HAL_TIM_Base_Start_IT+0xb0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d013      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1a      	ldr	r2, [pc, #104]	; (800581c <HAL_TIM_Base_Start_IT+0xb4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a19      	ldr	r2, [pc, #100]	; (8005820 <HAL_TIM_Base_Start_IT+0xb8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <HAL_TIM_Base_Start_IT+0xbc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x6c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_TIM_Base_Start_IT+0xc0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d111      	bne.n	80057f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b06      	cmp	r3, #6
 80057e4:	d010      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f6:	e007      	b.n	8005808 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40014000 	.word	0x40014000

0800582c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	f241 1311 	movw	r3, #4369	; 0x1111
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10f      	bne.n	8005874 <HAL_TIM_Base_Stop_IT+0x48>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a1a      	ldr	r2, [r3, #32]
 800585a:	f240 4344 	movw	r3, #1092	; 0x444
 800585e:	4013      	ands	r3, r2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <HAL_TIM_Base_Stop_IT+0x48>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0201 	bic.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e041      	b.n	8005920 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fd ff8f 	bl	80037d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f000 fef3 	bl	80066b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_TIM_PWM_Start+0x24>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e022      	b.n	8005992 <HAL_TIM_PWM_Start+0x6a>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d109      	bne.n	8005966 <HAL_TIM_PWM_Start+0x3e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e015      	b.n	8005992 <HAL_TIM_PWM_Start+0x6a>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b08      	cmp	r3, #8
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start+0x58>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e008      	b.n	8005992 <HAL_TIM_PWM_Start+0x6a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e068      	b.n	8005a6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_Start+0x82>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a8:	e013      	b.n	80059d2 <HAL_TIM_PWM_Start+0xaa>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0x92>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b8:	e00b      	b.n	80059d2 <HAL_TIM_PWM_Start+0xaa>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0xa2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c8:	e003      	b.n	80059d2 <HAL_TIM_PWM_Start+0xaa>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fa2e 	bl	8006e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a23      	ldr	r2, [pc, #140]	; (8005a74 <HAL_TIM_PWM_Start+0x14c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d107      	bne.n	80059fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1d      	ldr	r2, [pc, #116]	; (8005a74 <HAL_TIM_PWM_Start+0x14c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d018      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x10e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0c:	d013      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x10e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a19      	ldr	r2, [pc, #100]	; (8005a78 <HAL_TIM_PWM_Start+0x150>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00e      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x10e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <HAL_TIM_PWM_Start+0x154>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d009      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x10e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a16      	ldr	r2, [pc, #88]	; (8005a80 <HAL_TIM_PWM_Start+0x158>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d004      	beq.n	8005a36 <HAL_TIM_PWM_Start+0x10e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a14      	ldr	r2, [pc, #80]	; (8005a84 <HAL_TIM_PWM_Start+0x15c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d111      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b06      	cmp	r3, #6
 8005a46:	d010      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a58:	e007      	b.n	8005a6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40000400 	.word	0x40000400
 8005a7c:	40000800 	.word	0x40000800
 8005a80:	40000c00 	.word	0x40000c00
 8005a84:	40014000 	.word	0x40014000

08005a88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 f9ce 	bl	8006e3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <HAL_TIM_PWM_Stop+0xc4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d117      	bne.n	8005ada <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6a1a      	ldr	r2, [r3, #32]
 8005ab0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <HAL_TIM_PWM_Stop+0x52>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_PWM_Stop+0x52>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ad8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1a      	ldr	r2, [r3, #32]
 8005ae0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10f      	bne.n	8005b0a <HAL_TIM_PWM_Stop+0x82>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a1a      	ldr	r2, [r3, #32]
 8005af0:	f240 4344 	movw	r3, #1092	; 0x444
 8005af4:	4013      	ands	r3, r2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_TIM_PWM_Stop+0x82>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_PWM_Stop+0x92>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b18:	e013      	b.n	8005b42 <HAL_TIM_PWM_Stop+0xba>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_PWM_Stop+0xa2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b28:	e00b      	b.n	8005b42 <HAL_TIM_PWM_Stop+0xba>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_PWM_Stop+0xb2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b38:	e003      	b.n	8005b42 <HAL_TIM_PWM_Stop+0xba>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40010000 	.word	0x40010000

08005b50 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e041      	b.n	8005be6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f839 	bl	8005bee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fd90 	bl	80066b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_IC_Start_IT+0x1e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	e013      	b.n	8005c4a <HAL_TIM_IC_Start_IT+0x46>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_IC_Start_IT+0x2e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	e00b      	b.n	8005c4a <HAL_TIM_IC_Start_IT+0x46>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_IC_Start_IT+0x3e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e003      	b.n	8005c4a <HAL_TIM_IC_Start_IT+0x46>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_TIM_IC_Start_IT+0x58>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e013      	b.n	8005c84 <HAL_TIM_IC_Start_IT+0x80>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d104      	bne.n	8005c6c <HAL_TIM_IC_Start_IT+0x68>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e00b      	b.n	8005c84 <HAL_TIM_IC_Start_IT+0x80>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b08      	cmp	r3, #8
 8005c70:	d104      	bne.n	8005c7c <HAL_TIM_IC_Start_IT+0x78>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e003      	b.n	8005c84 <HAL_TIM_IC_Start_IT+0x80>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c86:	7bbb      	ldrb	r3, [r7, #14]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d102      	bne.n	8005c92 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c8c:	7b7b      	ldrb	r3, [r7, #13]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d001      	beq.n	8005c96 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0c2      	b.n	8005e1c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_IC_Start_IT+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca4:	e013      	b.n	8005cce <HAL_TIM_IC_Start_IT+0xca>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_IC_Start_IT+0xb2>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	e00b      	b.n	8005cce <HAL_TIM_IC_Start_IT+0xca>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_IC_Start_IT+0xc2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	e003      	b.n	8005cce <HAL_TIM_IC_Start_IT+0xca>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_IC_Start_IT+0xda>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cdc:	e013      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x102>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_IC_Start_IT+0xea>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cec:	e00b      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x102>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_IC_Start_IT+0xfa>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfc:	e003      	b.n	8005d06 <HAL_TIM_IC_Start_IT+0x102>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	d841      	bhi.n	8005d90 <HAL_TIM_IC_Start_IT+0x18c>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_TIM_IC_Start_IT+0x110>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005d91 	.word	0x08005d91
 8005d1c:	08005d91 	.word	0x08005d91
 8005d20:	08005d91 	.word	0x08005d91
 8005d24:	08005d5b 	.word	0x08005d5b
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005d91 	.word	0x08005d91
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005d91 	.word	0x08005d91
 8005d44:	08005d7f 	.word	0x08005d7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0202 	orr.w	r2, r2, #2
 8005d56:	60da      	str	r2, [r3, #12]
      break;
 8005d58:	e01d      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0204 	orr.w	r2, r2, #4
 8005d68:	60da      	str	r2, [r3, #12]
      break;
 8005d6a:	e014      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0208 	orr.w	r2, r2, #8
 8005d7a:	60da      	str	r2, [r3, #12]
      break;
 8005d7c:	e00b      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0210 	orr.w	r2, r2, #16
 8005d8c:	60da      	str	r2, [r3, #12]
      break;
 8005d8e:	e002      	b.n	8005d96 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d13e      	bne.n	8005e1a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2201      	movs	r2, #1
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f001 f849 	bl	8006e3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <HAL_TIM_IC_Start_IT+0x220>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <HAL_TIM_IC_Start_IT+0x224>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <HAL_TIM_IC_Start_IT+0x228>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <HAL_TIM_IC_Start_IT+0x22c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIM_IC_Start_IT+0x1e2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a14      	ldr	r2, [pc, #80]	; (8005e34 <HAL_TIM_IC_Start_IT+0x230>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d111      	bne.n	8005e0a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b06      	cmp	r3, #6
 8005df6:	d010      	beq.n	8005e1a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e08:	e007      	b.n	8005e1a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f042 0201 	orr.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40014000 	.word	0x40014000

08005e38 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b0c      	cmp	r3, #12
 8005e4a:	d841      	bhi.n	8005ed0 <HAL_TIM_IC_Stop_IT+0x98>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_TIM_IC_Stop_IT+0x1c>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005ed1 	.word	0x08005ed1
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005ed1 	.word	0x08005ed1
 8005e70:	08005ed1 	.word	0x08005ed1
 8005e74:	08005ead 	.word	0x08005ead
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	08005ebf 	.word	0x08005ebf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0202 	bic.w	r2, r2, #2
 8005e96:	60da      	str	r2, [r3, #12]
      break;
 8005e98:	e01d      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0204 	bic.w	r2, r2, #4
 8005ea8:	60da      	str	r2, [r3, #12]
      break;
 8005eaa:	e014      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0208 	bic.w	r2, r2, #8
 8005eba:	60da      	str	r2, [r3, #12]
      break;
 8005ebc:	e00b      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0210 	bic.w	r2, r2, #16
 8005ecc:	60da      	str	r2, [r3, #12]
      break;
 8005ece:	e002      	b.n	8005ed6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d156      	bne.n	8005f8a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 ffa9 	bl	8006e3c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <HAL_TIM_IC_Stop_IT+0xe2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	f240 4344 	movw	r3, #1092	; 0x444
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <HAL_TIM_IC_Stop_IT+0xe2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <HAL_TIM_IC_Stop_IT+0xf2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f28:	e013      	b.n	8005f52 <HAL_TIM_IC_Stop_IT+0x11a>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d104      	bne.n	8005f3a <HAL_TIM_IC_Stop_IT+0x102>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f38:	e00b      	b.n	8005f52 <HAL_TIM_IC_Stop_IT+0x11a>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_IC_Stop_IT+0x112>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	e003      	b.n	8005f52 <HAL_TIM_IC_Stop_IT+0x11a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_IC_Stop_IT+0x12a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f60:	e013      	b.n	8005f8a <HAL_TIM_IC_Stop_IT+0x152>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_IC_Stop_IT+0x13a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f70:	e00b      	b.n	8005f8a <HAL_TIM_IC_Stop_IT+0x152>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d104      	bne.n	8005f82 <HAL_TIM_IC_Stop_IT+0x14a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f80:	e003      	b.n	8005f8a <HAL_TIM_IC_Stop_IT+0x152>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0202 	mvn.w	r2, #2
 8005fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fd f89e 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fb4a 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fb51 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d122      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0204 	mvn.w	r2, #4
 8006014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fd f874 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8006030:	e005      	b.n	800603e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb20 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb27 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	f003 0308 	and.w	r3, r3, #8
 800604e:	2b08      	cmp	r3, #8
 8006050:	d122      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0308 	and.w	r3, r3, #8
 800605c:	2b08      	cmp	r3, #8
 800605e:	d11b      	bne.n	8006098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f06f 0208 	mvn.w	r2, #8
 8006068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2204      	movs	r2, #4
 800606e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fd f84a 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 8006084:	e005      	b.n	8006092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 faf6 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fafd 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d122      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d11b      	bne.n	80060ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fd f820 	bl	8003118 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 facc 	bl	8006678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fad3 	bl	800668c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0201 	mvn.w	r2, #1
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc ff5a 	bl	8002fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d10e      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b80      	cmp	r3, #128	; 0x80
 8006132:	d107      	bne.n	8006144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 ff1a 	bl	8006f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d10e      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d107      	bne.n	8006170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa98 	bl	80066a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b20      	cmp	r3, #32
 800617c:	d10e      	bne.n	800619c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b20      	cmp	r3, #32
 800618a:	d107      	bne.n	800619c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0220 	mvn.w	r2, #32
 8006194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fee4 	bl	8006f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619c:	bf00      	nop
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80061be:	2302      	movs	r3, #2
 80061c0:	e088      	b.n	80062d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6819      	ldr	r1, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f000 fc74 	bl	8006acc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 020c 	bic.w	r2, r2, #12
 80061f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6999      	ldr	r1, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	619a      	str	r2, [r3, #24]
 8006206:	e060      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b04      	cmp	r3, #4
 800620c:	d11c      	bne.n	8006248 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f000 fcec 	bl	8006bfa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006230:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6999      	ldr	r1, [r3, #24]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	021a      	lsls	r2, r3, #8
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	619a      	str	r2, [r3, #24]
 8006246:	e040      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d11b      	bne.n	8006286 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6819      	ldr	r1, [r3, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f000 fd39 	bl	8006cd4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 020c 	bic.w	r2, r2, #12
 8006270:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69d9      	ldr	r1, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	61da      	str	r2, [r3, #28]
 8006284:	e021      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d11c      	bne.n	80062c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f000 fd56 	bl	8006d4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69d9      	ldr	r1, [r3, #28]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	61da      	str	r2, [r3, #28]
 80062c4:	e001      	b.n	80062ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0ae      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	f200 809f 	bhi.w	8006448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006345 	.word	0x08006345
 8006314:	08006449 	.word	0x08006449
 8006318:	08006449 	.word	0x08006449
 800631c:	08006449 	.word	0x08006449
 8006320:	08006385 	.word	0x08006385
 8006324:	08006449 	.word	0x08006449
 8006328:	08006449 	.word	0x08006449
 800632c:	08006449 	.word	0x08006449
 8006330:	080063c7 	.word	0x080063c7
 8006334:	08006449 	.word	0x08006449
 8006338:	08006449 	.word	0x08006449
 800633c:	08006449 	.word	0x08006449
 8006340:	08006407 	.word	0x08006407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fa32 	bl	80067b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0208 	orr.w	r2, r2, #8
 800635e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0204 	bic.w	r2, r2, #4
 800636e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6999      	ldr	r1, [r3, #24]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	619a      	str	r2, [r3, #24]
      break;
 8006382:	e064      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa78 	bl	8006880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	619a      	str	r2, [r3, #24]
      break;
 80063c4:	e043      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fac3 	bl	8006958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0208 	orr.w	r2, r2, #8
 80063e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0204 	bic.w	r2, r2, #4
 80063f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69d9      	ldr	r1, [r3, #28]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	61da      	str	r2, [r3, #28]
      break;
 8006404:	e023      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fb0d 	bl	8006a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	61da      	str	r2, [r3, #28]
      break;
 8006446:	e002      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIM_ConfigClockSource+0x1c>
 8006478:	2302      	movs	r3, #2
 800647a:	e0b4      	b.n	80065e6 <HAL_TIM_ConfigClockSource+0x186>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b4:	d03e      	beq.n	8006534 <HAL_TIM_ConfigClockSource+0xd4>
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ba:	f200 8087 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	f000 8086 	beq.w	80065d2 <HAL_TIM_ConfigClockSource+0x172>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d87f      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b70      	cmp	r3, #112	; 0x70
 80064ce:	d01a      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0xa6>
 80064d0:	2b70      	cmp	r3, #112	; 0x70
 80064d2:	d87b      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b60      	cmp	r3, #96	; 0x60
 80064d6:	d050      	beq.n	800657a <HAL_TIM_ConfigClockSource+0x11a>
 80064d8:	2b60      	cmp	r3, #96	; 0x60
 80064da:	d877      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b50      	cmp	r3, #80	; 0x50
 80064de:	d03c      	beq.n	800655a <HAL_TIM_ConfigClockSource+0xfa>
 80064e0:	2b50      	cmp	r3, #80	; 0x50
 80064e2:	d873      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d058      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x13a>
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	d86f      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b30      	cmp	r3, #48	; 0x30
 80064ee:	d064      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 80064f0:	2b30      	cmp	r3, #48	; 0x30
 80064f2:	d86b      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d060      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d867      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05c      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b10      	cmp	r3, #16
 8006502:	d05a      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 8006504:	e062      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f000 fc71 	bl	8006dfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	609a      	str	r2, [r3, #8]
      break;
 8006532:	e04f      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6899      	ldr	r1, [r3, #8]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f000 fc5a 	bl	8006dfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006556:	609a      	str	r2, [r3, #8]
      break;
 8006558:	e03c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6859      	ldr	r1, [r3, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	461a      	mov	r2, r3
 8006568:	f000 fb18 	bl	8006b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2150      	movs	r1, #80	; 0x50
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fc27 	bl	8006dc6 <TIM_ITRx_SetConfig>
      break;
 8006578:	e02c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6859      	ldr	r1, [r3, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	461a      	mov	r2, r3
 8006588:	f000 fb74 	bl	8006c74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2160      	movs	r1, #96	; 0x60
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fc17 	bl	8006dc6 <TIM_ITRx_SetConfig>
      break;
 8006598:	e01c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f000 faf8 	bl	8006b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2140      	movs	r1, #64	; 0x40
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fc07 	bl	8006dc6 <TIM_ITRx_SetConfig>
      break;
 80065b8:	e00c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f000 fbfe 	bl	8006dc6 <TIM_ITRx_SetConfig>
      break;
 80065ca:	e003      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
      break;
 80065d0:	e000      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b0c      	cmp	r3, #12
 8006602:	d831      	bhi.n	8006668 <HAL_TIM_ReadCapturedValue+0x78>
 8006604:	a201      	add	r2, pc, #4	; (adr r2, 800660c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660a:	bf00      	nop
 800660c:	08006641 	.word	0x08006641
 8006610:	08006669 	.word	0x08006669
 8006614:	08006669 	.word	0x08006669
 8006618:	08006669 	.word	0x08006669
 800661c:	0800664b 	.word	0x0800664b
 8006620:	08006669 	.word	0x08006669
 8006624:	08006669 	.word	0x08006669
 8006628:	08006669 	.word	0x08006669
 800662c:	08006655 	.word	0x08006655
 8006630:	08006669 	.word	0x08006669
 8006634:	08006669 	.word	0x08006669
 8006638:	08006669 	.word	0x08006669
 800663c:	0800665f 	.word	0x0800665f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	60fb      	str	r3, [r7, #12]

      break;
 8006648:	e00f      	b.n	800666a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	60fb      	str	r3, [r7, #12]

      break;
 8006652:	e00a      	b.n	800666a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800665a:	60fb      	str	r3, [r7, #12]

      break;
 800665c:	e005      	b.n	800666a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	60fb      	str	r3, [r7, #12]

      break;
 8006666:	e000      	b.n	800666a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006668:	bf00      	nop
  }

  return tmpreg;
 800666a:	68fb      	ldr	r3, [r7, #12]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a34      	ldr	r2, [pc, #208]	; (8006798 <TIM_Base_SetConfig+0xe4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00f      	beq.n	80066ec <TIM_Base_SetConfig+0x38>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d2:	d00b      	beq.n	80066ec <TIM_Base_SetConfig+0x38>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a31      	ldr	r2, [pc, #196]	; (800679c <TIM_Base_SetConfig+0xe8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d007      	beq.n	80066ec <TIM_Base_SetConfig+0x38>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a30      	ldr	r2, [pc, #192]	; (80067a0 <TIM_Base_SetConfig+0xec>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_Base_SetConfig+0x38>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a2f      	ldr	r2, [pc, #188]	; (80067a4 <TIM_Base_SetConfig+0xf0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d108      	bne.n	80066fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a25      	ldr	r2, [pc, #148]	; (8006798 <TIM_Base_SetConfig+0xe4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01b      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670c:	d017      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <TIM_Base_SetConfig+0xe8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <TIM_Base_SetConfig+0xec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00f      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <TIM_Base_SetConfig+0xf0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a1f      	ldr	r2, [pc, #124]	; (80067a8 <TIM_Base_SetConfig+0xf4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a1e      	ldr	r2, [pc, #120]	; (80067ac <TIM_Base_SetConfig+0xf8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_Base_SetConfig+0x8a>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a1d      	ldr	r2, [pc, #116]	; (80067b0 <TIM_Base_SetConfig+0xfc>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d108      	bne.n	8006750 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a08      	ldr	r2, [pc, #32]	; (8006798 <TIM_Base_SetConfig+0xe4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d103      	bne.n	8006784 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	615a      	str	r2, [r3, #20]
}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40014400 	.word	0x40014400
 80067b0:	40014800 	.word	0x40014800

080067b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f023 0201 	bic.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 0302 	bic.w	r3, r3, #2
 80067fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1c      	ldr	r2, [pc, #112]	; (800687c <TIM_OC1_SetConfig+0xc8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0308 	bic.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0304 	bic.w	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a13      	ldr	r2, [pc, #76]	; (800687c <TIM_OC1_SetConfig+0xc8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40010000 	.word	0x40010000

08006880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f023 0210 	bic.w	r2, r3, #16
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0320 	bic.w	r3, r3, #32
 80068ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a1e      	ldr	r2, [pc, #120]	; (8006954 <TIM_OC2_SetConfig+0xd4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10d      	bne.n	80068fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a15      	ldr	r2, [pc, #84]	; (8006954 <TIM_OC2_SetConfig+0xd4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d113      	bne.n	800692c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800690a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40010000 	.word	0x40010000

08006958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <TIM_OC3_SetConfig+0xd0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10d      	bne.n	80069d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a14      	ldr	r2, [pc, #80]	; (8006a28 <TIM_OC3_SetConfig+0xd0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d113      	bne.n	8006a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40010000 	.word	0x40010000

08006a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	031b      	lsls	r3, r3, #12
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a10      	ldr	r2, [pc, #64]	; (8006ac8 <TIM_OC4_SetConfig+0x9c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d109      	bne.n	8006aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	019b      	lsls	r3, r3, #6
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000

08006acc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f023 0201 	bic.w	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a24      	ldr	r2, [pc, #144]	; (8006b88 <TIM_TI1_SetConfig+0xbc>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <TIM_TI1_SetConfig+0x56>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b00:	d00f      	beq.n	8006b22 <TIM_TI1_SetConfig+0x56>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a21      	ldr	r2, [pc, #132]	; (8006b8c <TIM_TI1_SetConfig+0xc0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00b      	beq.n	8006b22 <TIM_TI1_SetConfig+0x56>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <TIM_TI1_SetConfig+0xc4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d007      	beq.n	8006b22 <TIM_TI1_SetConfig+0x56>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <TIM_TI1_SetConfig+0xc8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d003      	beq.n	8006b22 <TIM_TI1_SetConfig+0x56>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <TIM_TI1_SetConfig+0xcc>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d101      	bne.n	8006b26 <TIM_TI1_SetConfig+0x5a>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <TIM_TI1_SetConfig+0x5c>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e003      	b.n	8006b46 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f023 030a 	bic.w	r3, r3, #10
 8006b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f003 030a 	and.w	r3, r3, #10
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	621a      	str	r2, [r3, #32]
}
 8006b7a:	bf00      	nop
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40010000 	.word	0x40010000
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40014000 	.word	0x40014000

08006b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 030a 	bic.w	r3, r3, #10
 8006bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b087      	sub	sp, #28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f023 0210 	bic.w	r2, r3, #16
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	699b      	ldr	r3, [r3, #24]
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	031b      	lsls	r3, r3, #12
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	621a      	str	r2, [r3, #32]
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f023 0210 	bic.w	r2, r3, #16
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	031b      	lsls	r3, r3, #12
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	621a      	str	r2, [r3, #32]
}
 8006cc8:	bf00      	nop
 8006cca:	371c      	adds	r7, #28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 0303 	bic.w	r3, r3, #3
 8006d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	621a      	str	r2, [r3, #32]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	031b      	lsls	r3, r3, #12
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	031b      	lsls	r3, r3, #12
 8006da4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	f043 0307 	orr.w	r3, r3, #7
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	021a      	lsls	r2, r3, #8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2201      	movs	r2, #1
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	401a      	ands	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	431a      	orrs	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e050      	b.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d018      	beq.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d013      	beq.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a13      	ldr	r2, [pc, #76]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d10c      	bne.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3714      	adds	r7, #20
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40010000 	.word	0x40010000
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40014000 	.word	0x40014000

08006f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e03f      	b.n	800701e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc fc70 	bl	8003898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	; 0x24
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fddf 	bl	8007b94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b08a      	sub	sp, #40	; 0x28
 800702a:	af02      	add	r7, sp, #8
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	4613      	mov	r3, r2
 8007034:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b20      	cmp	r3, #32
 8007044:	d17c      	bne.n	8007140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <HAL_UART_Transmit+0x2c>
 800704c:	88fb      	ldrh	r3, [r7, #6]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e075      	b.n	8007142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_UART_Transmit+0x3e>
 8007060:	2302      	movs	r3, #2
 8007062:	e06e      	b.n	8007142 <HAL_UART_Transmit+0x11c>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2221      	movs	r2, #33	; 0x21
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800707a:	f7fc fdb1 	bl	8003be0 <HAL_GetTick>
 800707e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	88fa      	ldrh	r2, [r7, #6]
 800708a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007094:	d108      	bne.n	80070a8 <HAL_UART_Transmit+0x82>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e003      	b.n	80070b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80070b8:	e02a      	b.n	8007110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 fb1f 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e036      	b.n	8007142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	3302      	adds	r3, #2
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e007      	b.n	8007102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	3301      	adds	r3, #1
 8007100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1cf      	bne.n	80070ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2200      	movs	r2, #0
 8007122:	2140      	movs	r1, #64	; 0x40
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 faef 	bl	8007708 <UART_WaitOnFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e006      	b.n	8007142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b20      	cmp	r3, #32
 8007162:	d11d      	bne.n	80071a0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_UART_Receive_IT+0x26>
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e016      	b.n	80071a2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_UART_Receive_IT+0x38>
 800717e:	2302      	movs	r3, #2
 8007180:	e00f      	b.n	80071a2 <HAL_UART_Receive_IT+0x58>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	461a      	mov	r2, r3
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fb24 	bl	80077e4 <UART_Start_Receive_IT>
 800719c:	4603      	mov	r3, r0
 800719e:	e000      	b.n	80071a2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80071a0:	2302      	movs	r3, #2
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b0ba      	sub	sp, #232	; 0xe8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80071ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10f      	bne.n	8007212 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f6:	f003 0320 	and.w	r3, r3, #32
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <HAL_UART_IRQHandler+0x66>
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007202:	f003 0320 	and.w	r3, r3, #32
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fc07 	bl	8007a1e <UART_Receive_IT>
      return;
 8007210:	e256      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 80de 	beq.w	80073d8 <HAL_UART_IRQHandler+0x22c>
 800721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d106      	bne.n	8007236 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80d1 	beq.w	80073d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00b      	beq.n	800725a <HAL_UART_IRQHandler+0xae>
 8007242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725e:	f003 0304 	and.w	r3, r3, #4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_UART_IRQHandler+0xd2>
 8007266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0202 	orr.w	r2, r3, #2
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_UART_IRQHandler+0xf6>
 800728a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f043 0204 	orr.w	r2, r3, #4
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0308 	and.w	r3, r3, #8
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <HAL_UART_IRQHandler+0x126>
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 81ed 	beq.w	80076b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e0:	f003 0320 	and.w	r3, r3, #32
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_UART_IRQHandler+0x14e>
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb92 	bl	8007a1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f003 0308 	and.w	r3, r3, #8
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <HAL_UART_IRQHandler+0x17a>
 800731e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d04f      	beq.n	80073c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fa9a 	bl	8007860 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007336:	2b40      	cmp	r3, #64	; 0x40
 8007338:	d141      	bne.n	80073be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3314      	adds	r3, #20
 8007340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007348:	e853 3f00 	ldrex	r3, [r3]
 800734c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007366:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800736a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800737e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1d9      	bne.n	800733a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	2b00      	cmp	r3, #0
 800738c:	d013      	beq.n	80073b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	4a7d      	ldr	r2, [pc, #500]	; (8007588 <HAL_UART_IRQHandler+0x3dc>)
 8007394:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc fdd1 	bl	8003f42 <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b4:	e00e      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f990 	bl	80076dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	e00a      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f98c 	bl	80076dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e006      	b.n	80073d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f988 	bl	80076dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80073d2:	e170      	b.n	80076b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	bf00      	nop
    return;
 80073d6:	e16e      	b.n	80076b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	2b01      	cmp	r3, #1
 80073de:	f040 814a 	bne.w	8007676 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8143 	beq.w	8007676 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 813c 	beq.w	8007676 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073fe:	2300      	movs	r3, #0
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	f040 80b4 	bne.w	800758c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8140 	beq.w	80076ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800743e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007442:	429a      	cmp	r2, r3
 8007444:	f080 8139 	bcs.w	80076ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745a:	f000 8088 	beq.w	800756e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	330c      	adds	r3, #12
 8007464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007474:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800747c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800748a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800748e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007496:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d9      	bne.n	800745e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3314      	adds	r3, #20
 80074b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074bc:	f023 0301 	bic.w	r3, r3, #1
 80074c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3314      	adds	r3, #20
 80074ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e1      	bne.n	80074aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3314      	adds	r3, #20
 80074ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3314      	adds	r3, #20
 8007506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800750a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800750c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007510:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007512:	e841 2300 	strex	r3, r2, [r1]
 8007516:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1e3      	bne.n	80074e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800753c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753e:	f023 0310 	bic.w	r3, r3, #16
 8007542:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007550:	65ba      	str	r2, [r7, #88]	; 0x58
 8007552:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800755e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e3      	bne.n	800752c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	4618      	mov	r0, r3
 800756a:	f7fc fc7a 	bl	8003e62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007576:	b29b      	uxth	r3, r3
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	b29b      	uxth	r3, r3
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8b6 	bl	80076f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007584:	e099      	b.n	80076ba <HAL_UART_IRQHandler+0x50e>
 8007586:	bf00      	nop
 8007588:	08007927 	.word	0x08007927
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007594:	b29b      	uxth	r3, r3
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 808b 	beq.w	80076be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8086 	beq.w	80076be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80075d6:	647a      	str	r2, [r7, #68]	; 0x44
 80075d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e3      	bne.n	80075b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3314      	adds	r3, #20
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	e853 3f00 	ldrex	r3, [r3]
 80075f8:	623b      	str	r3, [r7, #32]
   return(result);
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	f023 0301 	bic.w	r3, r3, #1
 8007600:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3314      	adds	r3, #20
 800760a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800760e:	633a      	str	r2, [r7, #48]	; 0x30
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e3      	bne.n	80075ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	330c      	adds	r3, #12
 8007636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0310 	bic.w	r3, r3, #16
 8007646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007654:	61fa      	str	r2, [r7, #28]
 8007656:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	69b9      	ldr	r1, [r7, #24]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	617b      	str	r3, [r7, #20]
   return(result);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e3      	bne.n	8007630 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f83e 	bl	80076f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007674:	e023      	b.n	80076be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_UART_IRQHandler+0x4ea>
 8007682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f95d 	bl	800794e <UART_Transmit_IT>
    return;
 8007694:	e014      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <HAL_UART_IRQHandler+0x514>
 80076a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f99d 	bl	80079ee <UART_EndTransmit_IT>
    return;
 80076b4:	e004      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
    return;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
      return;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_UART_IRQHandler+0x514>
      return;
 80076be:	bf00      	nop
  }
}
 80076c0:	37e8      	adds	r7, #232	; 0xe8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop

080076c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b090      	sub	sp, #64	; 0x40
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007718:	e050      	b.n	80077bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d04c      	beq.n	80077bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <UART_WaitOnFlagUntilTimeout+0x30>
 8007728:	f7fc fa5a 	bl	8003be0 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007734:	429a      	cmp	r2, r3
 8007736:	d241      	bcs.n	80077bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	330c      	adds	r3, #12
 800773e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	e853 3f00 	ldrex	r3, [r3]
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800774e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007758:	637a      	str	r2, [r7, #52]	; 0x34
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800775e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007760:	e841 2300 	strex	r3, r2, [r1]
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e5      	bne.n	8007738 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3314      	adds	r3, #20
 8007772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	613b      	str	r3, [r7, #16]
   return(result);
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3314      	adds	r3, #20
 800778a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800778c:	623a      	str	r2, [r7, #32]
 800778e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	69f9      	ldr	r1, [r7, #28]
 8007792:	6a3a      	ldr	r2, [r7, #32]
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	61bb      	str	r3, [r7, #24]
   return(result);
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e5      	bne.n	800776c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e00f      	b.n	80077dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4013      	ands	r3, r2
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	461a      	mov	r2, r3
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d09f      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3740      	adds	r7, #64	; 0x40
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2222      	movs	r2, #34	; 0x22
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007830:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0220 	orr.w	r2, r2, #32
 8007850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b095      	sub	sp, #84	; 0x54
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	330c      	adds	r3, #12
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800787e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	330c      	adds	r3, #12
 8007886:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007888:	643a      	str	r2, [r7, #64]	; 0x40
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800788e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3314      	adds	r3, #20
 80078a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3314      	adds	r3, #20
 80078ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d119      	bne.n	800790c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	330c      	adds	r3, #12
 80078de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e853 3f00 	ldrex	r3, [r3]
 80078e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f023 0310 	bic.w	r3, r3, #16
 80078ee:	647b      	str	r3, [r7, #68]	; 0x44
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	330c      	adds	r3, #12
 80078f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078f8:	61ba      	str	r2, [r7, #24]
 80078fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6979      	ldr	r1, [r7, #20]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	613b      	str	r3, [r7, #16]
   return(result);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e5      	bne.n	80078d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
}
 800791a:	bf00      	nop
 800791c:	3754      	adds	r7, #84	; 0x54
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007932:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff fecb 	bl	80076dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b21      	cmp	r3, #33	; 0x21
 8007960:	d13e      	bne.n	80079e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	d114      	bne.n	8007996 <UART_Transmit_IT+0x48>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d110      	bne.n	8007996 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007988:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	621a      	str	r2, [r3, #32]
 8007994:	e008      	b.n	80079a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	1c59      	adds	r1, r3, #1
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6211      	str	r1, [r2, #32]
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4619      	mov	r1, r3
 80079b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10f      	bne.n	80079dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	e000      	b.n	80079e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fe5a 	bl	80076c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b08c      	sub	sp, #48	; 0x30
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b22      	cmp	r3, #34	; 0x22
 8007a30:	f040 80ab 	bne.w	8007b8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3c:	d117      	bne.n	8007a6e <UART_Receive_IT+0x50>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d113      	bne.n	8007a6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a6c:	e026      	b.n	8007abc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a80:	d007      	beq.n	8007a92 <UART_Receive_IT+0x74>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <UART_Receive_IT+0x82>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e008      	b.n	8007ab2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d15a      	bne.n	8007b86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0220 	bic.w	r2, r2, #32
 8007ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695a      	ldr	r2, [r3, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d135      	bne.n	8007b7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	330c      	adds	r3, #12
 8007b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	613b      	str	r3, [r7, #16]
   return(result);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f023 0310 	bic.w	r3, r3, #16
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	330c      	adds	r3, #12
 8007b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b36:	623a      	str	r2, [r7, #32]
 8007b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	69f9      	ldr	r1, [r7, #28]
 8007b3c:	6a3a      	ldr	r2, [r7, #32]
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1e5      	bne.n	8007b16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d10a      	bne.n	8007b6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fdbb 	bl	80076f0 <HAL_UARTEx_RxEventCallback>
 8007b7a:	e002      	b.n	8007b82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7fb fc2b 	bl	80033d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e002      	b.n	8007b8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e000      	b.n	8007b8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b8a:	2302      	movs	r3, #2
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3730      	adds	r7, #48	; 0x30
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b98:	b0c0      	sub	sp, #256	; 0x100
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	68d9      	ldr	r1, [r3, #12]
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	ea40 0301 	orr.w	r3, r0, r1
 8007bbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bec:	f021 010c 	bic.w	r1, r1, #12
 8007bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0e:	6999      	ldr	r1, [r3, #24]
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	ea40 0301 	orr.w	r3, r0, r1
 8007c1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b8f      	ldr	r3, [pc, #572]	; (8007e60 <UART_SetConfig+0x2cc>)
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d005      	beq.n	8007c34 <UART_SetConfig+0xa0>
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	4b8d      	ldr	r3, [pc, #564]	; (8007e64 <UART_SetConfig+0x2d0>)
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d104      	bne.n	8007c3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c34:	f7fd fc46 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 8007c38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c3c:	e003      	b.n	8007c46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c3e:	f7fd fc2d 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 8007c42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c50:	f040 810c 	bne.w	8007e6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c66:	4622      	mov	r2, r4
 8007c68:	462b      	mov	r3, r5
 8007c6a:	1891      	adds	r1, r2, r2
 8007c6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c6e:	415b      	adcs	r3, r3
 8007c70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c76:	4621      	mov	r1, r4
 8007c78:	eb12 0801 	adds.w	r8, r2, r1
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	eb43 0901 	adc.w	r9, r3, r1
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c96:	4690      	mov	r8, r2
 8007c98:	4699      	mov	r9, r3
 8007c9a:	4623      	mov	r3, r4
 8007c9c:	eb18 0303 	adds.w	r3, r8, r3
 8007ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	eb49 0303 	adc.w	r3, r9, r3
 8007caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	18db      	adds	r3, r3, r3
 8007cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8007cc8:	4613      	mov	r3, r2
 8007cca:	eb42 0303 	adc.w	r3, r2, r3
 8007cce:	657b      	str	r3, [r7, #84]	; 0x54
 8007cd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007cd8:	f7f8 fe6c 	bl	80009b4 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4b61      	ldr	r3, [pc, #388]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	011c      	lsls	r4, r3, #4
 8007cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cf4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	464b      	mov	r3, r9
 8007d00:	1891      	adds	r1, r2, r2
 8007d02:	64b9      	str	r1, [r7, #72]	; 0x48
 8007d04:	415b      	adcs	r3, r3
 8007d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d12:	4649      	mov	r1, r9
 8007d14:	eb43 0b01 	adc.w	fp, r3, r1
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d2c:	4692      	mov	sl, r2
 8007d2e:	469b      	mov	fp, r3
 8007d30:	4643      	mov	r3, r8
 8007d32:	eb1a 0303 	adds.w	r3, sl, r3
 8007d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	18db      	adds	r3, r3, r3
 8007d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007d5e:	4613      	mov	r3, r2
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	647b      	str	r3, [r7, #68]	; 0x44
 8007d66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d6e:	f7f8 fe21 	bl	80009b4 <__aeabi_uldivmod>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	4b3b      	ldr	r3, [pc, #236]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d7e:	095b      	lsrs	r3, r3, #5
 8007d80:	2264      	movs	r2, #100	; 0x64
 8007d82:	fb02 f303 	mul.w	r3, r2, r3
 8007d86:	1acb      	subs	r3, r1, r3
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d8e:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007d90:	fba3 2302 	umull	r2, r3, r3, r2
 8007d94:	095b      	lsrs	r3, r3, #5
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d9c:	441c      	add	r4, r3
 8007d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007da8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007dac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007db0:	4642      	mov	r2, r8
 8007db2:	464b      	mov	r3, r9
 8007db4:	1891      	adds	r1, r2, r2
 8007db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007db8:	415b      	adcs	r3, r3
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007dc0:	4641      	mov	r1, r8
 8007dc2:	1851      	adds	r1, r2, r1
 8007dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	414b      	adcs	r3, r1
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
 8007dcc:	f04f 0200 	mov.w	r2, #0
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dd8:	4659      	mov	r1, fp
 8007dda:	00cb      	lsls	r3, r1, #3
 8007ddc:	4651      	mov	r1, sl
 8007dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007de2:	4651      	mov	r1, sl
 8007de4:	00ca      	lsls	r2, r1, #3
 8007de6:	4610      	mov	r0, r2
 8007de8:	4619      	mov	r1, r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	4642      	mov	r2, r8
 8007dee:	189b      	adds	r3, r3, r2
 8007df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007df4:	464b      	mov	r3, r9
 8007df6:	460a      	mov	r2, r1
 8007df8:	eb42 0303 	adc.w	r3, r2, r3
 8007dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e14:	460b      	mov	r3, r1
 8007e16:	18db      	adds	r3, r3, r3
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	eb42 0303 	adc.w	r3, r2, r3
 8007e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e2a:	f7f8 fdc3 	bl	80009b4 <__aeabi_uldivmod>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007e34:	fba3 1302 	umull	r1, r3, r3, r2
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	2164      	movs	r1, #100	; 0x64
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	3332      	adds	r3, #50	; 0x32
 8007e46:	4a08      	ldr	r2, [pc, #32]	; (8007e68 <UART_SetConfig+0x2d4>)
 8007e48:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f003 0207 	and.w	r2, r3, #7
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4422      	add	r2, r4
 8007e5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e5c:	e105      	b.n	800806a <UART_SetConfig+0x4d6>
 8007e5e:	bf00      	nop
 8007e60:	40011000 	.word	0x40011000
 8007e64:	40011400 	.word	0x40011400
 8007e68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e7e:	4642      	mov	r2, r8
 8007e80:	464b      	mov	r3, r9
 8007e82:	1891      	adds	r1, r2, r2
 8007e84:	6239      	str	r1, [r7, #32]
 8007e86:	415b      	adcs	r3, r3
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e8e:	4641      	mov	r1, r8
 8007e90:	1854      	adds	r4, r2, r1
 8007e92:	4649      	mov	r1, r9
 8007e94:	eb43 0501 	adc.w	r5, r3, r1
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	00eb      	lsls	r3, r5, #3
 8007ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ea6:	00e2      	lsls	r2, r4, #3
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	461d      	mov	r5, r3
 8007eac:	4643      	mov	r3, r8
 8007eae:	18e3      	adds	r3, r4, r3
 8007eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	eb45 0303 	adc.w	r3, r5, r3
 8007eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007eca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007eda:	4629      	mov	r1, r5
 8007edc:	008b      	lsls	r3, r1, #2
 8007ede:	4621      	mov	r1, r4
 8007ee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	008a      	lsls	r2, r1, #2
 8007ee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007eec:	f7f8 fd62 	bl	80009b4 <__aeabi_uldivmod>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4b60      	ldr	r3, [pc, #384]	; (8008078 <UART_SetConfig+0x4e4>)
 8007ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	011c      	lsls	r4, r3, #4
 8007efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f10:	4642      	mov	r2, r8
 8007f12:	464b      	mov	r3, r9
 8007f14:	1891      	adds	r1, r2, r2
 8007f16:	61b9      	str	r1, [r7, #24]
 8007f18:	415b      	adcs	r3, r3
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f20:	4641      	mov	r1, r8
 8007f22:	1851      	adds	r1, r2, r1
 8007f24:	6139      	str	r1, [r7, #16]
 8007f26:	4649      	mov	r1, r9
 8007f28:	414b      	adcs	r3, r1
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	f04f 0200 	mov.w	r2, #0
 8007f30:	f04f 0300 	mov.w	r3, #0
 8007f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f38:	4659      	mov	r1, fp
 8007f3a:	00cb      	lsls	r3, r1, #3
 8007f3c:	4651      	mov	r1, sl
 8007f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f42:	4651      	mov	r1, sl
 8007f44:	00ca      	lsls	r2, r1, #3
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	4642      	mov	r2, r8
 8007f4e:	189b      	adds	r3, r3, r2
 8007f50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f54:	464b      	mov	r3, r9
 8007f56:	460a      	mov	r2, r1
 8007f58:	eb42 0303 	adc.w	r3, r2, r3
 8007f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f78:	4649      	mov	r1, r9
 8007f7a:	008b      	lsls	r3, r1, #2
 8007f7c:	4641      	mov	r1, r8
 8007f7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f82:	4641      	mov	r1, r8
 8007f84:	008a      	lsls	r2, r1, #2
 8007f86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f8a:	f7f8 fd13 	bl	80009b4 <__aeabi_uldivmod>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4b39      	ldr	r3, [pc, #228]	; (8008078 <UART_SetConfig+0x4e4>)
 8007f94:	fba3 1302 	umull	r1, r3, r3, r2
 8007f98:	095b      	lsrs	r3, r3, #5
 8007f9a:	2164      	movs	r1, #100	; 0x64
 8007f9c:	fb01 f303 	mul.w	r3, r1, r3
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	3332      	adds	r3, #50	; 0x32
 8007fa6:	4a34      	ldr	r2, [pc, #208]	; (8008078 <UART_SetConfig+0x4e4>)
 8007fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb2:	441c      	add	r4, r3
 8007fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb8:	2200      	movs	r2, #0
 8007fba:	673b      	str	r3, [r7, #112]	; 0x70
 8007fbc:	677a      	str	r2, [r7, #116]	; 0x74
 8007fbe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fc2:	4642      	mov	r2, r8
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	1891      	adds	r1, r2, r2
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	415b      	adcs	r3, r3
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fd2:	4641      	mov	r1, r8
 8007fd4:	1851      	adds	r1, r2, r1
 8007fd6:	6039      	str	r1, [r7, #0]
 8007fd8:	4649      	mov	r1, r9
 8007fda:	414b      	adcs	r3, r1
 8007fdc:	607b      	str	r3, [r7, #4]
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fea:	4659      	mov	r1, fp
 8007fec:	00cb      	lsls	r3, r1, #3
 8007fee:	4651      	mov	r1, sl
 8007ff0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	00ca      	lsls	r2, r1, #3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4642      	mov	r2, r8
 8008000:	189b      	adds	r3, r3, r2
 8008002:	66bb      	str	r3, [r7, #104]	; 0x68
 8008004:	464b      	mov	r3, r9
 8008006:	460a      	mov	r2, r1
 8008008:	eb42 0303 	adc.w	r3, r2, r3
 800800c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800800e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	663b      	str	r3, [r7, #96]	; 0x60
 8008018:	667a      	str	r2, [r7, #100]	; 0x64
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	f04f 0300 	mov.w	r3, #0
 8008022:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008026:	4649      	mov	r1, r9
 8008028:	008b      	lsls	r3, r1, #2
 800802a:	4641      	mov	r1, r8
 800802c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008030:	4641      	mov	r1, r8
 8008032:	008a      	lsls	r2, r1, #2
 8008034:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008038:	f7f8 fcbc 	bl	80009b4 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <UART_SetConfig+0x4e4>)
 8008042:	fba3 1302 	umull	r1, r3, r3, r2
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	2164      	movs	r1, #100	; 0x64
 800804a:	fb01 f303 	mul.w	r3, r1, r3
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	3332      	adds	r3, #50	; 0x32
 8008054:	4a08      	ldr	r2, [pc, #32]	; (8008078 <UART_SetConfig+0x4e4>)
 8008056:	fba2 2303 	umull	r2, r3, r2, r3
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4422      	add	r2, r4
 8008068:	609a      	str	r2, [r3, #8]
}
 800806a:	bf00      	nop
 800806c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008070:	46bd      	mov	sp, r7
 8008072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008076:	bf00      	nop
 8008078:	51eb851f 	.word	0x51eb851f

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f834 	bl	80080fc <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	080081a4 	.word	0x080081a4
 80080b8:	080081a4 	.word	0x080081a4
 80080bc:	080081a4 	.word	0x080081a4
 80080c0:	080081a8 	.word	0x080081a8

080080c4 <memset>:
 80080c4:	4402      	add	r2, r0
 80080c6:	4603      	mov	r3, r0
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d100      	bne.n	80080ce <memset+0xa>
 80080cc:	4770      	bx	lr
 80080ce:	f803 1b01 	strb.w	r1, [r3], #1
 80080d2:	e7f9      	b.n	80080c8 <memset+0x4>

080080d4 <strncmp>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	b17a      	cbz	r2, 80080f8 <strncmp+0x24>
 80080d8:	4603      	mov	r3, r0
 80080da:	3901      	subs	r1, #1
 80080dc:	1884      	adds	r4, r0, r2
 80080de:	f813 0b01 	ldrb.w	r0, [r3], #1
 80080e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80080e6:	4290      	cmp	r0, r2
 80080e8:	d101      	bne.n	80080ee <strncmp+0x1a>
 80080ea:	42a3      	cmp	r3, r4
 80080ec:	d101      	bne.n	80080f2 <strncmp+0x1e>
 80080ee:	1a80      	subs	r0, r0, r2
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d1f3      	bne.n	80080de <strncmp+0xa>
 80080f6:	e7fa      	b.n	80080ee <strncmp+0x1a>
 80080f8:	4610      	mov	r0, r2
 80080fa:	e7f9      	b.n	80080f0 <strncmp+0x1c>

080080fc <_init>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	bf00      	nop
 8008100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008102:	bc08      	pop	{r3}
 8008104:	469e      	mov	lr, r3
 8008106:	4770      	bx	lr

08008108 <_fini>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	bf00      	nop
 800810c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810e:	bc08      	pop	{r3}
 8008110:	469e      	mov	lr, r3
 8008112:	4770      	bx	lr
